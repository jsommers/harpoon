%!PS-Adobe-2.0 EPSF-2.0
%%Title: net_arch.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Wed May 12 00:19:17 2004
%%For: jes@itchy.local (joel sommers)
%%BoundingBox: 0 0 586 210
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.883 0.883 0.930 srgb} bind def
/col33 {0.578 0.578 0.602 srgb} bind def
/col34 {0.855 0.855 0.855 srgb} bind def
/col35 {0.629 0.629 0.715 srgb} bind def
/col36 {0.609 0.000 0.000 srgb} bind def
/col37 {0.926 0.926 0.926 srgb} bind def
/col38 {0.875 0.875 0.875 srgb} bind def
/col39 {0.523 0.672 0.996 srgb} bind def
/col40 {0.438 0.438 0.996 srgb} bind def
/col41 {0.523 0.508 0.523 srgb} bind def
/col42 {0.777 0.762 0.777 srgb} bind def
/col43 {0.902 0.887 0.902 srgb} bind def
/col44 {0.500 0.500 0.500 srgb} bind def
/col45 {0.750 0.750 0.750 srgb} bind def
/col46 {0.555 0.555 0.555 srgb} bind def
/col47 {0.555 0.559 0.555 srgb} bind def
/col48 {0.266 0.266 0.266 srgb} bind def
/col49 {0.523 0.523 0.523 srgb} bind def
/col50 {0.777 0.777 0.777 srgb} bind def
/col51 {0.902 0.902 0.902 srgb} bind def
/col52 {0.965 0.965 0.965 srgb} bind def
/col53 {0.617 0.617 0.617 srgb} bind def
/col54 {0.441 0.457 0.441 srgb} bind def
/col55 {0.254 0.270 0.254 srgb} bind def
/col56 {0.457 0.457 0.457 srgb} bind def
/col57 {0.254 0.254 0.254 srgb} bind def
/col58 {0.934 0.980 0.996 srgb} bind def
/col59 {0.250 0.250 0.250 srgb} bind def
/col60 {0.949 0.949 0.949 srgb} bind def
/col61 {0.664 0.664 0.664 srgb} bind def
/col62 {0.332 0.332 0.332 srgb} bind def
/col63 {0.840 0.824 0.840 srgb} bind def
/col64 {0.680 0.664 0.680 srgb} bind def
/col65 {0.758 0.758 0.758 srgb} bind def
/col66 {0.188 0.188 0.188 srgb} bind def
/col67 {0.316 0.332 0.316 srgb} bind def
/col68 {0.965 0.949 0.965 srgb} bind def
/col69 {0.398 0.398 0.398 srgb} bind def
/col70 {0.441 0.441 0.441 srgb} bind def
/col71 {0.863 0.613 0.574 srgb} bind def
/col72 {0.941 0.922 0.875 srgb} bind def
/col73 {0.762 0.762 0.762 srgb} bind def
/col74 {0.883 0.781 0.656 srgb} bind def
/col75 {0.879 0.879 0.879 srgb} bind def
/col76 {0.820 0.820 0.820 srgb} bind def
/col77 {0.852 0.477 0.102 srgb} bind def
/col78 {0.941 0.891 0.102 srgb} bind def
/col79 {0.531 0.488 0.758 srgb} bind def
/col80 {0.836 0.836 0.836 srgb} bind def
/col81 {0.547 0.547 0.645 srgb} bind def
/col82 {0.289 0.289 0.289 srgb} bind def
/col83 {0.547 0.418 0.418 srgb} bind def
/col84 {0.352 0.352 0.352 srgb} bind def
/col85 {0.387 0.387 0.387 srgb} bind def
/col86 {0.715 0.605 0.449 srgb} bind def
/col87 {0.254 0.574 0.996 srgb} bind def
/col88 {0.746 0.438 0.230 srgb} bind def
/col89 {0.855 0.465 0.000 srgb} bind def
/col90 {0.852 0.719 0.000 srgb} bind def
/col91 {0.000 0.391 0.000 srgb} bind def
/col92 {0.352 0.418 0.230 srgb} bind def
/col93 {0.824 0.824 0.824 srgb} bind def
/col94 {0.555 0.555 0.641 srgb} bind def
/col95 {0.949 0.723 0.363 srgb} bind def
/col96 {0.535 0.598 0.418 srgb} bind def
/col97 {0.391 0.391 0.391 srgb} bind def
/col98 {0.715 0.898 0.996 srgb} bind def
/col99 {0.523 0.750 0.922 srgb} bind def
/col100 {0.738 0.738 0.738 srgb} bind def
/col101 {0.824 0.582 0.320 srgb} bind def
/col102 {0.594 0.820 0.992 srgb} bind def
/col103 {0.547 0.609 0.418 srgb} bind def
/col104 {0.965 0.418 0.000 srgb} bind def
/col105 {0.352 0.418 0.223 srgb} bind def
/col106 {0.547 0.609 0.418 srgb} bind def
/col107 {0.547 0.609 0.480 srgb} bind def
/col108 {0.094 0.289 0.094 srgb} bind def
/col109 {0.676 0.676 0.676 srgb} bind def
/col110 {0.965 0.738 0.352 srgb} bind def
/col111 {0.387 0.418 0.609 srgb} bind def
/col112 {0.867 0.000 0.000 srgb} bind def
/col113 {0.676 0.676 0.676 srgb} bind def
/col114 {0.965 0.738 0.352 srgb} bind def
/col115 {0.676 0.676 0.676 srgb} bind def
/col116 {0.965 0.738 0.352 srgb} bind def
/col117 {0.387 0.418 0.609 srgb} bind def
/col118 {0.320 0.418 0.160 srgb} bind def
/col119 {0.578 0.578 0.578 srgb} bind def
/col120 {0.000 0.387 0.000 srgb} bind def
/col121 {0.000 0.387 0.289 srgb} bind def
/col122 {0.480 0.516 0.289 srgb} bind def
/col123 {0.902 0.738 0.480 srgb} bind def
/col124 {0.645 0.707 0.773 srgb} bind def
/col125 {0.418 0.418 0.578 srgb} bind def
/col126 {0.516 0.418 0.418 srgb} bind def
/col127 {0.320 0.609 0.289 srgb} bind def
/col128 {0.836 0.902 0.902 srgb} bind def
/col129 {0.320 0.387 0.387 srgb} bind def
/col130 {0.094 0.418 0.289 srgb} bind def
/col131 {0.609 0.645 0.707 srgb} bind def
/col132 {0.996 0.578 0.000 srgb} bind def
/col133 {0.996 0.578 0.000 srgb} bind def
/col134 {0.000 0.387 0.289 srgb} bind def
/col135 {0.480 0.516 0.289 srgb} bind def
/col136 {0.387 0.449 0.480 srgb} bind def
/col137 {0.902 0.738 0.480 srgb} bind def
/col138 {0.094 0.289 0.094 srgb} bind def
/col139 {0.965 0.738 0.352 srgb} bind def
/col140 {0.867 0.867 0.867 srgb} bind def
/col141 {0.949 0.930 0.824 srgb} bind def
/col142 {0.957 0.680 0.363 srgb} bind def
/col143 {0.582 0.805 0.598 srgb} bind def
/col144 {0.707 0.082 0.488 srgb} bind def
/col145 {0.930 0.930 0.930 srgb} bind def
/col146 {0.516 0.516 0.516 srgb} bind def
/col147 {0.480 0.480 0.480 srgb} bind def
/col148 {0.000 0.352 0.000 srgb} bind def
/col149 {0.902 0.449 0.449 srgb} bind def
/col150 {0.996 0.793 0.191 srgb} bind def
/col151 {0.160 0.473 0.289 srgb} bind def
/col152 {0.867 0.156 0.129 srgb} bind def
/col153 {0.129 0.348 0.773 srgb} bind def
/col154 {0.969 0.969 0.969 srgb} bind def
/col155 {0.898 0.898 0.898 srgb} bind def
/col156 {0.129 0.516 0.352 srgb} bind def
/col157 {0.547 0.547 0.547 srgb} bind def
/col158 {0.258 0.258 0.258 srgb} bind def
/col159 {0.547 0.547 0.547 srgb} bind def
/col160 {0.258 0.258 0.258 srgb} bind def
/col161 {0.547 0.547 0.547 srgb} bind def
/col162 {0.258 0.258 0.258 srgb} bind def
/col163 {0.547 0.547 0.547 srgb} bind def
/col164 {0.258 0.258 0.258 srgb} bind def
/col165 {0.547 0.547 0.547 srgb} bind def
/col166 {0.258 0.258 0.258 srgb} bind def
/col167 {0.547 0.547 0.547 srgb} bind def
/col168 {0.258 0.258 0.258 srgb} bind def
/col169 {0.773 0.715 0.590 srgb} bind def
/col170 {0.934 0.969 0.996 srgb} bind def
/col171 {0.859 0.793 0.648 srgb} bind def
/col172 {0.840 0.840 0.840 srgb} bind def
/col173 {0.680 0.680 0.680 srgb} bind def
/col174 {0.742 0.742 0.742 srgb} bind def
/col175 {0.316 0.316 0.316 srgb} bind def
/col176 {0.000 0.000 0.285 srgb} bind def
/col177 {0.473 0.473 0.473 srgb} bind def
/col178 {0.188 0.203 0.188 srgb} bind def
/col179 {0.777 0.711 0.586 srgb} bind def

end
save
newpath 0 210 moveto 0 0 lineto 586 0 lineto 586 210 lineto closepath clip newpath
-63.0 259.2 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 150
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
%***********************************************************************
%*                                                                     *
%* Object: Image decoding PS-routine                    Date: 01.02.93 *
%* Author: Evgeni CHERNYAEV (chernaev@vxcern.cern.ch)                  *
%*                                                                     *
%* Function: Display a run-length encoded color image.                 *
%*           The image is displayed in color on viewers and printers   *
%*           that support color Postscript, otherwise it is displayed  *
%*           as grayscale.                                             *
%*                                                                     *
%***********************************************************************
/byte 1 string def
/color 3 string def
systemdict /colorimage known { /cnt 3 def } { /cnt 1 def } ifelse
/String 256 cnt mul string def
%***********************************************************************
/DecodePacket            % Decode color packet                         *
%***********************************************************************
{
  currentfile byte readhexstring pop 0 get
  /Nbyte exch 1 add cnt mul def
  /color ColorMap currentfile byte readhexstring pop 0 get get def
  String dup
  0 cnt Nbyte 1 sub { color putinterval dup } for
  pop 0 Nbyte getinterval
} bind def
%***********************************************************************
/DisplayImage            % Display run-length encoded color image      *
%***********************************************************************
{
  gsave
  currentfile String readline pop
  token { /columns exch def } { } ifelse
  token { /rows exch def pop } { } ifelse
  currentfile String readline pop
  token { /Ncol exch def pop } { } ifelse
  /ColorMap Ncol array def
  systemdict /colorimage known {
    0 1 Ncol 1 sub {
      ColorMap exch
      currentfile 3 string readhexstring pop put
    } for
    columns rows 8
    [ columns 0 0 rows neg 0 rows ]
    { DecodePacket } false 3 colorimage
  }{
    0 1 Ncol 1 sub {
      ColorMap exch
      1 string dup 0
      currentfile color readhexstring pop pop
      color 0 get 0.299 mul
      color 1 get 0.587 mul add
      color 2 get 0.114 mul add
      cvi put put
    } for
    columns rows 8
    [ columns 0 0 rows neg 0 rows ]
    { DecodePacket } image
  } ifelse
  grestore
} bind def
n gs
4050 1575 tr
3.286115 -3.325444 sc
0 -338 tr
0 0 tr
sa
/showpage {} def
% PNG image follows:
713 338 sc
%***********************************************
%*              Image decoding                 *
%***********************************************
DisplayImage
713 338
46
fffffff5f5f5c8c8c89696968c8c8c821e1e000000000000ff0000ff00c8
ff00c8ffcc00ffcc00ce9c43880088ff000088000000ff000088000000ff
00008800ffff888888000000ff8888aaaa00880088ff00c8ff00c8ffcc00
ffcc00ce9c43880088ff000088000000ff000088000000ff00008800ffff
888888000000ff8888aaaa00880088f5f5f5
ff01ff01ff01250100054e0100054e0100054e0100054e0100054e0100054e0100054e01
0005890100040c0100050b0100040b0100040c0100040b0100040b0100040c0100050b01
00040b0100040c0100040b0100040b0100040c0100050b0100040b0100040c0100040b01
00040b0100040c0100050b0100040b0100040c0100040b0100040b0100040c0100050b01
00040b0100040c0100040b0100040b0100040c0100050b0100040b0100040c0100040b01
00040b0100040c0100050b0100040b0100040c0100040b0100040b0100040c0100050b01
00040b0100040c0100040b0100044c01150400054e0400054e0400054e0400054e040005
4e0400054e0400054e040005390447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004030000044601
030400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000002040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000002040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000002040000030446010004ff00ff007e0000044701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040300000447010004ff00ff007e000004470100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040300000447010004ff00ff007e00000447010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040300000447010004ff00ff007e00000447010004060000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
000403000004460103040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000000040000030446010004060000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040300000447010004ff00ff007e00000447010004060000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
000447010004ff00ff007e00000447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004030000044701
0004ff00ff007e00000447010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040300000447010004ff00
ff007e000004460103040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000002040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000002040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000000400000004000002040000030446010004ff00
ff007e00000447010004060000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040300000447010004ff00ff007e00
000447010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040300000447010004ff00ff007e0000044701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040300000431010006020104060101020607010004ff00
0700000eff00750000043001010602010006040100060201000606010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050100000e080000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b000004030000042f010006000100060201000604010006020100060401
040500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000e0005000e000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000030530010006020103060101000602010006060100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c000005010e0000010e060000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040300000431010006060100060001000602010006
06010004ff000400000e0000000e0000020e0200000eff006e0000043101000602010006
02010006000100060201000606010004060000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050200000e0100000e0000010e
010000040b0000040400000e060000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040300000431010006030102060201020607010004ff000400000e0200
000e0100020e0000000e1200010eff005800000447010004060000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040a00010e00050900
010e00040000000e090000040300010e060000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040300000447010004ff000100000e0e00020e0e00000e0000
010eff005600000447010004060000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040900000e010000050b0000040100000e08000004
0300000e0000000e0000000e030000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050400000e05000004
0b0000040c0000040b0000040300000447010004ff000100000e1100000e0c00000e0100
000e0000000e0000000eff001e00000e0000000e3100000447010004060000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040900000e
010000050b0000040100000e080000040200000e0400000e0000010e00040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050200010e0000020e020000040b0000040c0000040b000004030000044601
030400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000e0004000e
0004000e000400000004000000040000000400000004000e000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000e00040000000400000004000000040000
0004000000040000000400000004000000040000000400000004000e0004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000030446010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040800000e020000050b0000040100
000e0300010e0100000e00040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040000000e0a0000050200000e
0300000e020000040b0000040c0000040b0000040300000447010004ff000000000e1300
000e0100000e0100010e0e00020eff000600000e0000010e0c00000e0500000e2e000004
47010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040800000e020000050b0000040200000e0100000e0200000e00000004
0c0000040100000e080000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040a00000e00040200000e080000050100000e0500000e0100
00040b0000040400000e0200000e020000040b0000040300000447010004ff00000e1400
000e0100000e1500000eff000400000e0300000e0b00000e0500010e0000000e0000000e
0000020e0000000e0800000e0000020e0000000e1300000447010004060000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040600000e
040000050b0000040200000e0000000e050000040c0000040200020e050000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040700020e
000000040300000e070000050100000e0700000e0004000e0000000e0200000e0000010e
0000000e00040000010e0000000e0200000e0000000e010000040b000004030000044701
0004fe00000e1500020e1a00000efd00000e0700000e0a00000e0700000e0000000e0000
000e0400000e0000000e0100000e0000000e0000000e0500000e0000000e0c00000e0200
000447010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040500000e050000050b0000040b0000040c0000040500000e0400
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040700000e020000040300000e070000050000000e090000040b000004000e0100000e
0600010e0004010e0200000e0000010e020000040000000e0100000447010004fd00000e
3500000efb00000e0900000e0800000e1a00000e0b00010e0000000e0000000e0000000e
0100000e0300000446010304000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
0000000400000004000000040000000400000004000e0004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000e00040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
0000000400000004000000040000000400000204000000040000000400000004000e0004
000000040000000400000004000000040000000400000004000000040000000400000004
000e00040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000e0004000e000400000004000e02040000030446010004
fa00000e0000000e3700000efa00000e0900010e0600000e2a00000e0000000e0300000e
0400000447010004060000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040200000e080000050b0000040b0000040c0000040800000e
010000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040300020e040000040600000e0200010e00050b0000040b0000040c0000040300
000e060000040300000447010004f900000e3b00000ef500000e0f00030e0100000e3800
000447010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040000010e090000050b0000040b0000040c0000040900000e0000
0004000e0a0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040200000e070000040c0000050b0000040b0000040c0000040b00000403000004
4701010ef700000e3d00000e0000010eee00000e0000000e5000000447010004000e0500
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040000000e0a0000050b0000040b0000040c0000040a00000e00040000000e09000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004010e0900
00040c0000050b0000040b0000040c0000040b00000403000004470100040000010ef400
000e3f00000e0100000e0000000eea00000e53000004470100040000000e0000000e0200
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
0004000e0b0000050b0000040b0000040c0000040b0000040100000e0000000e06000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040a00000e00040b00
00040c0000050b0000040b0000040c0000040b0000040300000446010304000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000e00040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000e00040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000304460100040300000e010000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040400000e050000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040800010e000000040b0000040c0000050b0000040b0000040c0000040b0000040300
0004470100040400000ef000000e4800000ede00000e0300000e0000000e550000044701
00040400000e000000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040500000e040000040a00000e00040c0000050b0000040b0000040c0000040b000004
0500000e040000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0100000e0000000e0100010e020000040b0000040c0000050b0000040b0000040c000004
0b00000403000004470100040500000edb00000e0000010e0900040e4b00000edc00000e
0000020e5900000447010004060000040000010e090000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040300000e0300000e010000040100000e0000010e05000004
0c0000050b0000040b0000040c0000040b0000040700010e010000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040000000e0300000e040000040b000004
0c0000050b0000040b0000040c0000040b00000403000004470100040700000e0000000e
d600000e0300000e0100000e0000000e0000000e5500010ed700000e5e00000447010004
060000040200000e080000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0200000e0400000e01000004000e0a0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040200000e070000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
0004000e0a0000040b0000040c0000050b0000040b0000040c0000040b00000403000004
470100040a00000ed300010e0500000e0000000e5c00000e0200000e0100000e3900000e
0200030e8b00000e5f000004460103040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
0000000400000004000e0004000000040000000400000004000e02040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
0000000400000004000000040000000400000004000000040000000400000004000e0004
000e0004000e000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000e00040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000304
460100040b00000ed100000e0700000e0000000e5d00020e0000000e0100000e2700000e
0e00000e0000000e0000000e0200000e8a00000e6000000447010004060000040300000e
070000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040800000e0000010e00040000
000e0700000e000000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040200000e0400000e020000050b0000040b0000040700000e0000000e010000040200
000e0600000e0004010e0400000e030000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b00000403000004470100040b00000e0000000ec800000e0000
000e0100010e0800010e6000000e0400010e2000000e0200000e0100000e0100000e0000
000e0000000e0000000e0300000e0700000e8700010e6100000447010004060000040400
010e050000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040500000e0000000e0300
0004000e0800010e00040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040900000e010000050b0000040b0000040300030e0200010e00040000010e0000010e
0000010e0100000e00040600010e020000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040900000e010000040b0000040b0000040c00
00050b0000040b0000040c0000040b00000403000004470100040e00020e0800000eb800
000e0000000e1000000e6800000e0000000e0200000e1600020e0200000e0d00000e0000
000e0900000e8400000e6400000447010004060000040600000e0100000e01000005040e
0000000e040000040b0000040400010e0000020e010000040000000e090000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0400000e0000000e040000040a00000e00040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040a00010e0005020e0000000e060000040b000004000e0100000e
080000040700000e0000000e000000040800000e010000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040700000e030000040b000004
0b0000040c0000050b0000040b0000040c0000040b000004030000043101000603010206
02010206070100041100030e0600000e0f00000e0000020e0000000e0100000e0200030e
0000010e9200000e1200000e6f00020e0800000e0100000e0500000e0100000e1100000e
0000000e0a00000e7e00000e0200000e6500000430010106020100060201000600010006
0201000606010004060000040c0000050600020e010000040600010e0000000e00000004
0200000e080000040300000e060000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040300000e070000040a00000e00040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050600000e0200
000e00040200020e0000020e010000040c0000040800010e000000040900000e00000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0300030e040000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
030000042f01000600010006020100060201000600010006020100060401040500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000000050000000500000005000e000500000005000e0005000e0005
000e000500000005000e0005000000050000000500000005000000050000000500000005
00000005000000050000000500000005000e000500000005000000050000000500000005
000e00050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000000050000000500000005000e0005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000e000500000005000e000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000000050000000500000005000e0005000000050000000500000005
000000050000000500000005000e00050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000030530010006020100060201000600010006020100060601000406000004
0c0000050b0000040100000e0200000e040000040c0000040500000e04000004000e0000
000e0400000e0000000e000000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040300000e070000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050800010e000000040000010e0600
010e00040c0000040800000e010000040a00000e0004000e0100010e070000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040200000e08000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040300000431010006
02010006020100060001000602010006060100044400020e0100000e0200000e0200010e
0000000e7d00000e8900010e2500000e1000010e0100000e7400000e6a00000431010006
0201000602010006000100060201000606010004060000040c0000050b0000040b000004
0c0000040900000e000000040200030e0100010e000000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040200000e080000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040800000e010000040b0000040500000e050000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040000010e090000040b000004
0b0000040c0000050b0000040b0000040c0000040b000004030000043101000603010206
02010206070100044800000e0600000e0100000e0000020e0300000e7400000eca00000e
6f00000e6d00000447010004060000040c0000050b0000040b0000040c0000040a00000e
00040800000e0000000e00040000000e0200000e060000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040200000e080000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040600000e040000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b000004000e0b0000040b0000040b0000040c0000050b00
00040b0000040c0000040b00000403000004470100045500000e0100010e0000000e0000
000e7300000eca00000e6f00000e6d00000447010004060000040c0000050b0000040b00
00040c0000040b0000040a00000e00040200010e0000000e050000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040100000e090000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040700010e020000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b00000403000004470100045e00000e7000010ecc00000e
0000020e0000000e6700000e6e0000044601030400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
0000000400000004000000040000000400000004000000040000000400000004000e0004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
00000304460100045e00000e6f00000ed700000e6300000e6f0000044701000406000004
0c0000050b0000040b0000040c0000040b0000040b0000040700000e030000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b000004000e0b0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050300000e060000040b0000040c00
00040b0000040b0000040c0000050b0000040a00000e00040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b00000403000004470100045f00000e6d00000e
d900000e0000000e6000000e6f00000447010004060000040c0000050b0000040b000004
0c0000040b0000040b0000040800000e020000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050400000e0000000e030000040b0000040c0000040b0000040b000004
0c0000050b0000040900000e000000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b00000403000004470100046000000e6b00000edd00010e5d00000e
7000000447010004060000040c0000050b0000040b0000040c0000040b0000040b000004
0900000e010000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0a00000e00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050800
000e010000040b0000040c0000040b0000040b0000040c0000050b0000040800000e0100
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
0004470100046200010e0000000e6600000ee000000e5a00000e71000004470100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040a00010e00050000000e
090000040b0000040c0000040b0000040b0000040c0000050b0000040900000e00000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050900010e00040b00
00040c0000040b0000040b0000040c0000050b0000040700000e020000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b00000403000004460103040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000000400000004000e000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000e00040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000030446010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050100000e080000040b0000040c0000040b0000040b0000040c00
00050b0000040800000e010000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040000000e090000040c0000040b0000040b0000040c0000050b00
00040700000e020000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b00000403000004470100046800000e6000000ee700000e5400000e730000044701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050200
020e050000040b0000040c0000040b0000040b0000040c0000050b0000040600010e0200
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040100
010e070000040c0000040b0000040b0000040c0000050b0000040600000e030000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004030000044701
00046b00030e5800000eea00000e0000030e4d00000e7400000447010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050900000e000000040b00
00040c0000040b0000040b0000040c0000050b0000040300020e040000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040700000e020000040c00
00040b0000040b0000040c0000050b0000040500000e040000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b00000403000004470100046f00000e5400
000ef400000e4900010e7500000447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050a00000e0004000e0100000e070000040c0000040b00
00040b0000040c0000050b0000040000020e070000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040800000e01000004000e0b0000040b000004
0b0000040c0000050b0000040300000e060000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b00000403000004470100047100000e0000010e0000020e
4900000ef700030e4400000e770000044601030400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000e00040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000000400000004000000040000020400000004000e000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
00000304460100047900000e4700000efc00020e0000000e0000000e3c00000e78000004
47010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040600000e030000040c0000040b0000040b0000040c0000050b000004000e0a00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040500000e0000020e010000040b0000040b0000040c0000050b0000040100000e0800
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
0004470100047a00010e0100000e4100000eff000400000e0100010e0000000e2f00000e
0300000e7900000447010004060000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040900010e0004000e0b0000040b0000040b0000040c000005
0600010e020000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c000004000e0100030e04000004000e0a0000040c000005
0500020e0000010e0004000e0a0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b00000403000004470100047d00000e0100010e3800000e0100010e
0000000eff000b00010e0300010e0200000e0000000e0000000e0200000e0a00000e0700
040e8200000447010004060000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040200010e070000040b0000040b0000040c0000050500
000e0100000e0000000e00040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040800000e0000000e00040100000e0000
020e0000000e020000040200020e0000050e0005000e0a0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b00000403000004470100048400
020e3300000e0300000eff001500000e0900020e0000000e0100000e9300000447010004
060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040700010e020000040b0000040b0000040c0000050400000e050000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040a00000e0004020e090000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b000004030000044601030400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000000400000004000e0004000e0004000e00040000000400000004
00000004000000040000000400000004000000040000000400000004000e0004000e0004
00000004000e0004000000040000000400000004000e0004000000040000000400000004
00000004000e000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400190004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000030446010004060000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040a00010e0004000e0000000e0000000e06000004
0500000e0200010e00040000010e0000000e0000000e0100030e00050200000e07000004
0b0000040c0000040b0000040b0000040c0000050300011802190018010000040b000004
040002190200011900040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040319080000050b0000040b0000040c000004
0b00000403000004470100049100040e0300000e0000040e1300000e0000000e4c000019
000001190117021800171300001902180019000000190118ff000800011903180e000019
000001192f000004040107063a010004060000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040800020e00040000000e0900
00040c000005000e0000000e080000040b0000040c0000040b0000040b0000040c000005
001800190118001603170016011900040000011903000019030000040000021900180217
001800000018011700040119090000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040a00001800040317001907000005030001190000
0118011900000004000001190800000400000119090000040b0000040300000406010006
020100063b0100049900000e1a00000e0000000e4b000019001700180117001500160017
021601180019000001180000021900180319001800190317031600190017011602180019
ff0003000019051600180a00011900170018001901170118000000180119001806190000
04190200011900000019020000191000000406010006030100063a010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050000000e090000040b0000040c0000040b0000040b00
000400000119000000190400021900050016001701160115001602150016001700040019
001600170000021802170118000400180316011501160018001601150004011700180800
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
000407000119001800160004021501160119000000190300000500000019001800190016
001700190116011700190004001804170318001900180004001801170219011800190017
021900040219060000190000000403000004070103063b010004b600000e3e0001190118
001900180019000000190100021800170116071502160018011600190217021600170616
031500160215021600170219f20000190a00011800170515001601180019001801190100
001800190018011701160017031600180016001704160717011602180117001800170218
001702180019000000190000021900180319010000043501040601010206070100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050000000e090000040b0000040c0000040b00
000407000319000403180017001800000018001900000217000503150012031500130115
000400160015001600180216001503160004001607150016021500040115001602180219
020000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
080000180000001900040019000000190200011901170016001500040415011700180017
011801190005001800170116001501160315001600040116001508160004001601150017
001600170116001700160217000402170018001900180019021800170018000401180100
000435010006040100060201000606010004b600000e3500031900000019021801170116
001800160018001900170018001900170116041500100011001501120011021500160115
00170515001607150013091502170218011900000119e700021900180019001800190018
0019001802190118021606150116001700160317001600170016081500160a1500160415
051600150216001502160017001800160017031602170016010000040701040628010006
040100060201000604010405000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050004000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000400050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500040005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050004000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000400050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500040005001900050018000500180005001900050017000500170005
001600050016000500160005001800050017000500160005001600050012000500120005
001000050011000500110005001500050004000500150005001600050015000500150005
001500050015000500150005001500050015000500110005001300050015000500110005
001500050015000500160005001700050016000500180005000400050019000500190005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500040005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050004000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000400050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500040005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050004000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500190005001900050018000500180005
000400050018000500180005001800050017000500160005001500050015000500150005
001500050016000500160005001600050016000500160005001500050012000500150005
001200050013000500040005001500050015000500150005001500050015000500150005
001500050015000500150005001500050016000500150005001600050015000500150005
001700050016000500160005001500050004000500160305050100062d01030601010006
0201000606010118e2000019010000190100001800190218021700180016001702160215
001600150016001701160017031500110012001106100111011500110b15021100120210
0011001500120110001500140215051600170018011702180119de000019021802170016
0017001602170016021701160f1501160415001100120015031100150012001502120213
0115001300150113001501110e1500160015001607150100000407010006300100060001
000602010006060101170119030000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c00000401000019000001190018011900170019000000040018021702160017
021600150004041501160015011602150005001000110910000400150010001102150014
001101120015001100040012021000110310001402100004011106150116001700040116
01170118050000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0100001802170216001501160004011600150216001500160315000400140b1500050015
021201100012031000120004001205110212001300110004001101100013001200130112
001500120215000400140113061500120015000401150100000406010506280100060201
00060001000602010006060101160118001901000019d700001900180019011800170118
0016001800000016001706160a1500160215001301120d10001101100015021100100211
011000110710001105100011071500160115021601170119da0001190017031602150016
001500160a15001300120011011200130015001300110013001200140013011500120014
001111100311041004110012011101130311001300150013001502120011001200130012
001301000004360102060201020607010115011700180119001800040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040a00011900040000001800170018011700160117
001600170000000400160015001608150004001501120015001201150011011500110110
00050b10000402100011071000040c100004021000120011001200110113021500040215
021600170018030000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
000401180116071500040715011201110004021000110012001100100311011200050011
0a1000040b10000407100011011001110004021000110015001100120110001100100011
00040111010000044701011501160117001800170019d100001901180119001700160017
011600150116001500160019001500160915001400120011011000130111001500100011
0015301000110010011101130715001600170219d3000319001701160515001304150012
041502113b10001100100011071001000004070103063b01011200160015011600170016
000400190b0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040800001900180117
000400180016001500160615001800040715001200130012001100040210001101100011
01100011021000050b1000040b1000040c10000409100011001200040012001304150016
0218001900040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b000004090000190118
000401160415011300110015001200040012001300110013011500110012031000040c10
00050b1000040b1000040c1000040b10000401100100000406010006030100063a010111
0215031600180119cc000019011702160017091500170115001300150012011100120015
00100011451002110013011401150016011700180319cd00001902170016051500120111
00100411001002110010001149100100000406010006030100063a010110001300110315
000400170118090000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b000004050000190000
001801160115000400160415001101150011001500160004001502110110011103100004
0c1000050b1000040b1000040c1000040b10000402100211021501160017000402180119
070000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b000004070000190017021600040215
00130211041000040b1000040c1000050b1000040b1000040c1000040b10000401100100
0004070103063a0103040010000400120004001400040016000400160004001900040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400180004001600040015000400150004001500040012000400110004001000040012
000400110004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400150004001500040016000400160004001700040018000400190004001900040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400190004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004001900040017
000400160004001500040015000400110004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001003044601041000110012001100040015
011601180119050000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b000004030001190017
00180016031500040015001100100011021001110110001500040b1000040c1000050b10
00040b1000040c1000040b10000405100011001203150004001502160017001902180119
0100000501000019080000040b0000040c0000040a000019000400000119000002190400
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
000403000119011800160315000400130012091000040b1000040c1000050b1000040b10
00040c1000040b10000401100100000447010710001102150116001800170219c0000019
001800170116021501110012001509100015571000110012001306150016031701180419
001800190b0000190e000419040000190700001700160019011800190218800000190118
00170016051500115d100100000406010006030100063a01071000040011011200160015
0116001800170018021900050b0000040b00000402000119000000190100001902000004
0b000004021903000119020000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b00000402000018001700160015001600150013001101100004
00110910001100040b1000040c1000050b1000040b1000040c1000040b10000408100011
001200140004001303150316011701180005011800170018021904000004010000190018
021901000019010000040219000001190318001901000004010000180019050000190016
0004011700160018021601190200000400190b0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040200001803160215011400040b1000040b10
00040c1000050b1000040b1000040c1000040b1000040110010000040601000603010006
3a0109100111031500170016001700180319180000190100011800190018011900180219
00000519020000190100001900180019001803190118000000197a000119001700160215
00136c100211021304150116021702160017011802190100031900180217001801190018
020002180019001801170016021701190018011900170018041900000018011501160015
021600150018001701190000001900180219740001190017011602150013001201115f10
0100000406010006030100063a0107100004021000120011011500160015001602170005
001701190100011901000019000000190004030001190100001900000119000400180119
011600170016011800160218000403180019001802190018001900000004011700160019
0218011600190018000000040219090000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b000004000001180016011500110015041000040b1000040b10
00040c1000050b1000040b1000040c1000040b1000040b10000400100311051501160005
021500160217011801190018000401180316001701180017011900040016011700180017
011602150016011700040017001801160218011900000017001300040215001601150013
0116001700180019000400160218080000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b00000400190117001603150012031000040b1000040b100004
0c1000050b1000040b1000040c1000040b100004011001000004070103063b010b100011
001001110015001400150416001700180119001700180119001800190018041901180119
001800190517011500160015011600150216001800170216011702180017001800190316
001701160017011600180016000003180019720001190116011500130010001274100111
011306150013001504160118011701160315031600180117041601150014021504160115
001701160117001900160111001301120015011200110016001501160017041601197000
001900180116031500136410010000044701071000040610001300110013021500050015
011600170018011601180016001700160004001800170018021700180017001600170116
000402160012001300150013011500130015011600040116001507160018000402150716
00190004021700180119060000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040a00001900040018011600150011071000040b1000040b1000040c100005
0b1000040b1000040c1000040b1000040b10000406100011001000130011011500050013
001200110013041502160004011501130112031501160004041501120011001200110013
011500040115001100140215011600180015001000040511001000150013011500160004
02150016001700180119040000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040a000019000400160215001100120111041000040b1000040b1000040c10
00050b1000040b1000040c1000040b10000401100100000447010f100011001000110412
011501160015021600150816001700160015001602150013011501100011001000110012
001000110113011500130012001306150016011201110215001601130016001500170416
011801196c0001190116011500117c100011001003110110001100130011021305150111
011000110115001102150211001200130410001101150012011300100011001400130012
011500170012041000110210001200110112001500130012011300150116011802196900
001900180017001601150013681001000004070101060101000639010304001000040010
000400100004001000040010000400100004001000040010000400110004001100040010
000400130004001500040015000400150004001502040015000400150004001500040015
000400150004001100040010000400110004001000040010000400100004001000040011
000400110004001000040011000400110004001200040011020400100004001100040010
000400100004001500040016000400150004001500040016000400180004001900040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040017000400160004001300040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100204001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001002040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010020400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040011000400130204001100040010000400100004001100040010
000400130004001000040010000400110004001000040010000400100004001100040011
000400100004001100040010000400110004001002040010000400100004001000040011
000400110004001200040011000400110004001500040016000400180004001800040019
000400190004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400190004001700040015000400120004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
020400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100204001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
00040010000400100204001003040501000600010006010100063a011810011100120111
01120211011200110012021100130011001000111b100011061000110110001100100015
001200110112001301150016001700180000001969000017001601158d1001110b100211
161000140d10001101100311001301150016001500160117001801170119600000190018
0116001500136b10010000040601000600010006010100063a01071000040c1000050b10
000405100011041000040c1000040b1000040a1000130004021000110012001300150116
00190018010000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0700011900160015000400120b1000040b1000040b1000040c1000050b1000040b100004
0c1000040b1000040b1000040c1000050b1000040b1000040c1000040810001101100004
0b10000403100111011200150013001501160005011601180219040000040b0000040c00
00040b0000040b0000040c0000050b000004060000190018001700160015000400110b10
00040b1000040b1000040c1000050b1000040b1000040c1000040b100004011001000004
070103063b015d100111011500180017011900180119610000190018001700150013ce10
0111001301110114011500130116021801195a000018001700160015001300116c100100
00044701071000040c1000050b1000040b1000040c1000040b1000040b10000406100111
00160015011800050017001800000219050000040b0000040c0000040b0000040b000004
0c0000050b000004030002190018001700160012001000040c1000040b1000040b100004
0c1000050b1000040b1000040c1000040b1000040b1000040c1000050b1000040b100004
0c1000040b1000040b100004071000110010021100050111001500130216021901000004
0b0000040c0000040b0000040b0000040c0000050b000004050000190017001600150013
001100040c1000040b1000040b1000040c1000050b1000040b1000040c1000040b100004
011001000004470161100015001201160015001600170019021800195600001900000019
021801160015d71004110215011700180119001800195200011900180016001500120011
6e100100000406010006010101063b01071000040c1000050b1000040b1000040c100004
0b1000040b10000408100011001001130005001300160017001601170018021901000004
011900000019070000040c0000040b0000040b0000040c0000050b000004000000180019
0018021701150011011000040c1000040b1000040b1000040c1000050b1000040b100004
0c1000040b1000040b1000040c1000050b1000040b1000040c1000040b1000040b100004
0c100005011004110216011800040017001901000219040000040c0000040b0000040b00
00040c0000050b0000040200001901180016001500120011011000040c1000040b100004
0b1000040c1000050b1000040b1000040c1000040b100004011001000004060100060101
0006000100063a0163100111001000110013001602150016011800170219011800190018
0100001948000019001600180017021600120011dd100211011300150116001500160018
011901180219470001190017011600150111701001000004060100060001000601010006
3a01071000040c1000050b1000040b1000040c1000040b1000040b1000040c1000050010
00110013021100150216011800040116011701190018040000040c0000040b0000040b00
00040c000005080001190000000400180015001600150213041000040c1000040b100004
0b1000040c1000050b1000040b1000040c1000040b1000040b1000040c1000050b100004
0b1000040c1000040b1000040b1000040c10000506100211001500130004001300160117
01160017011800190100000400190b0000040b0000040b0000040c0000050b0000040019
0118001601150013041000040c1000040b1000040b1000040c1000050b1000040b100004
0c1000040b10000401100100000407010106010100063a01681000110210001102120116
01150013011602170319000001193b0002190018001900170016001100150013e5100611
001204150116021901180100011939000319001801160015011300117210010000044601
030400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100204001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001002040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040013
020400110004001300040016000400180004001800040019000400180004001900040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040019
000400170004001602040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010020400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100204001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001002040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010020400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100204001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001102040011
000400130004001100040015000400170004001700040016000400190004001800040019
000400000004001900040019000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004001900040019
000400180204001500040011000400110004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001002040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010020400100004001000040010000400100004001000040010
000400100004001000040010000400100004001000040010000400100004001000040010
000400100004001000040010000400100204001003044601711000110410011200110016
031700160017021806191f00001903000119000003190000021901180216001500160012
0011f01006110415041700180017001900180019021800191c0000190800041901180117
03160015001301117510010000044701071000040c1000050b1000040b1000040c100004
0b1000040b1000040c1000050b1000040610001202150016000400150216001800170418
011900040000011903000119020000040019050004190004021900180319011800190118
000500180000021800170016011200130011001500040b1000040c1000040b1000040b10
00040c1000050b1000040b1000040010070f0110010f00040010000f091000040b100004
0c1000050b1000040b1000040c1000040b1000040b1000040c1000050b10000406100411
00040011011602150016001500170316000400170a190004071903000004001901000919
000502180117011602150113000400120011091000040c1000040b1000040b1000040c10
00050b1000040b1000040c1000040b10000401100100000447017b100011001003110112
0013041601170118001700190118031901180a1908180017031802170116011700190216
00150012031000111510000f0a10000f0110000f0310000f1110000f1010000f0210000f
0010030f0010140f8b100111001007110015001200140113011500170118021705180017
01180019031803190118011902170318041703160013001205111c10000f0510000f0b10
040f0410000f0f10000f0410050f0010040f0710000f1210010000044701071000040c10
00050b1000040b1000040610000f041000040b1000040b1000040c1000050b1000040b10
000403100013001202130316000403170118001701160118001900040017001801170218
001600170016001700160004021700160317011500160113000500150018001500130111
051000040b1000040210090f00040a0f001000040a0f00100004020f0010040f0010020f
000500100a0f00040b0f00040c0f0004090f011000040b1000040c1000050b1000040b10
00040c1000040b1000040b1000040c1000050b1000040b10000400100211001007110004
001100150216001502160117001600040216001703160318000402170015051602150005
0015011300120411021000040b1000040910020f00040b0f0004020f0210000f0010030f
00040c0f00050b0f00040b0f00040c0f0004030f0110050f0004000f0010010000044701
0610010f2210000f0610090f0210000f0a10040f0010030f0010050f2810041101130011
001601150316011501160117001600170016001302160012001300120015011200130115
0013031601100011031000161610000f00106b0f0110010f3510010f4e10001100100511
011302110113001400150313001200150112011303160012001501140211031307111610
6b0f010000044701030f0010020f0004020f0010020f051000050b1000040110030f0010
040f00040c0f00040a0f001000040b0f0004080f031000050b1000040b1000040c100004
031102130111001200130015000400120013031100120111001000110010000403100012
02110410000500100011091000040710000f0010010f00040c0f00040b0f00040b0f0004
0c0f00050b0f00040b0f00040c0f00040b0f0004060f041000040310020f051000050010
010f081000040110040f0110000f0010000f0004020f0110050f011000040410010f0310
000f00040010010f0210000f04100004000f0b1000050b1000040b1000040c1000040010
0a1100040811011200130004021102100311021000050b1000040a10000f00040c0f0004
0b0f00040b0f00040c0f00050b0f00040b0f00040c0f00040b0f0004010f010000040601
01063e01120f0010010f0010010f0210460f361001112b10d40f461003112310710f0100
0004060100063f01070f00040c0f00050b0f00040b0f00040c0f00040b0f00040b0f0004
0c0f0005000f0110000f071000040b1000040c1000040b1000040b1000040c1000050610
010f0210000400100a0f00040c0f00040b0f00040b0f00040c0f00050b0f00040b0f0004
0c0f00040b0f00040b0f00040c0f00050b0f00040b0f00040c0f00040b0f00040b0f0004
0c0f00050b1000040b1000040c1000040b1000040b1000040c1000050b1000040510050f
00040c0f00040b0f00040b0f00040c0f00050b0f00040b0f00040c0f00040b0f0004010f
01000004070100063d010304000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f000400100004000f0004000f0004000f000400100004
001000040010000400100004001000040010000400100004001000040010000400100004
001000040010000400100004001000040010000400100004001000040010000400100004
0010000400100004000f0004000f0004000f0004000f0004000f000400100004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f00040010000400100004000f00040010000400100004001000040010000400100004
001000040010000400100004001000040010000400100004001000040010000400100004
001000040010000400100004001000040010000400100004001000040010000400100004
001000040010000400100004001000040010000400100004001000040010000400100004
00100004001000040010000400100004000f0004000f0004000f000400100004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004000f0004
000f0004000f0004000f0004000f0004000f0004000f0304050105063a01070f00040c0f
00050b0f00040b0f00040c0f00040b0f00040b0f00040c0f00050b0f00040b0f00040c0f
00040110020f0110020f011000040110090f00040c0f00050b0f00040b0f00040c0f0004
0b0f00040b0f00040c0f00050b0f00040b0f00040c0f00040b0f00040b0f00040c0f0005
0b0f00040b0f00040c0f00040b0f00040b0f00040c0f00050b0f00040b0f00040c0f0004
000f0210020f041000040110060f021000040c0f00050b0f00040b0f00040c0f00040b0f
00040b0f00040c0f00050b0f00040b0f00040c0f00040b0f0004010f010000044701ff0f
ff0f7d0f010000044701070f00040c0f00050b0f00040b0f0004020f000d040f000d000f
010d0004000f000d090f0004000f040d030f000d000f0004030d000f010d050f00050b0f
00040b0f00040c0f00040b0f00040b0f00040c0f00050b0f00040b0f00040c0d0004020d
000f020d010f000d010f00040b0f00040c0f00050b0f00040b0f00040c0d0004010d030f
000d040f00040b0f00040c0f00050b0f00040b0f0004040f050d010f00040a0f000d0004
0b0f00040c0f00050b0f00040b0f00040c0f00040b0f00040b0f00040c0f00050b0f0004
0b0f0004000f060d000f030d0004060d040f00040b0f0004080f000d020f0005080d010f
000d0004010f090d00040c0d0004030d000f060d0004010d010000044701010d020f0a0d
0d0f430d000f020d3c0f000d040f020d020f000d000f060d010f060d030f100d030c0f0d
000f180d040f390d0a0f010d060f0b0d020f070d000f180d010f090d030f000d030f000d
010f000d020f010d030f000d190f000d190f010d000f010d040f010d100f020d0c0f130d
010c520d010c050d0100000407010106010100063a01070d00040c0d00050b0d0004060d
040c0004000c010d010c000d000c010d030c0004010c090d00040b0d00040c0d00050b0d
00040a0d000f0004000d010f010d000f060d00040b0d00040b0d00040c0d00050b0d0004
0b0d00040c0c0004020c000d050c010d00040b0d00040c0d00050b0d0004050d000c030d
000c00040c0c0004020c020d000c040d00040b0d00040c0d00050b0d00040b0d00040c0d
00040b0d00040b0d00040c0d00050b0d00040b0d00040c0d00040b0d00040b0d00040c0d
00050b0d0004020d000f050d010c00040c0c00040b0c0004000c000d080c000d0004000c
040d060c00050b0c00040b0c00040c0c00040b0c0004010c010000040601000600010006
010100063a01040c130d010c010d490c360d190c000d080c000d0c0c0e0b830c030d200c
010d260c000d290c000d250c040d0c0c0f0b340c050b000c020b000c090b010c010b000c
090b010000040601000600010006010100062f0102060701010b000c000b030c00040c0c
0005020c000b020c040b00040b0b00040c0b00040b0b0004080b000c010b0004030b000c
000b010c040b00050b0c00040b0c00040c0c00040b0c0004010c090b00040c0b00050a0b
000c00040b0b00040c0b00040b0b00040b0b00040c0b0005010c090b00040b0b00040c0b
0004090b000c000b0004060b020c010b0004050b060c0005000c000b090c00040a0c000b
0004000b080c000b010c0004010c000b010c010b040c00040b0c0004020c000b020c000b
000c000b020c0005010b000c000b070c00040b0c00040c0c0004040c000b040c000b0004
000c0a0b00040c0b00050a0b000c0004030c070b00040c0b00040b0b00040b0b00040c0b
00050b0b00040b0b00040c0b00040b0b0004010b01000004070103062f01000602010006
0601ff0bff0b7d0b010000043b0100060201000604010105ff2dff2d802d00053a010006
0201000606012d1e001d0f1e011d9e1e001dff1e2f1e031d0a1e011d021e001d1f1e011d
001e0c1d061e021d011e011d191e01000004070103062f010006020100060601051e001f
001e0004001e021f081e00050b1e00040b1e00040c1e00040b1e00040b1e00040c1e0005
091e001f001e0004021e021f001e031f001e00040c1f0004061f011e011f001e00040b1e
00040c1e00050b1e00040b1e00040c1e00040b1e00040b1e00040c1e00050b1e00040b1e
00040c1e00040b1e00040b1e00040c1e00050b1e00040b1e00040c1e00040b1e00040b1e
00040c1e00050b1e00040b1e00040c1e00040b1e00040b1e00040c1e00050b1e00040b1e
00040c1e00040b1e00040b1e00040c1e00050b1e00040b1e00040c1e00040b1e0004011e
0100000406010006030100062e010006020100060601271f1b1e001f041e621f001e031f
001e091f021e051f231e001f041e011f021e071f001e001f041e041f091e001f011e001f
041e001f041e011f111e011f001ea91f001e001f011e0b1f001e081f031e0a1f711e0100
000407010006020100062f01020607010421021f0004001f0121031f0021001f03210005
0621041f00040b1f00040c1f00040b1f00040b1f0004081f0021021f00050b2100040b21
00040c2100040b2100040221051f0021011f00040c1f0005001f0021081f002100040b1f
0004001f0b1e00040a1f002100040b1f00040c1f00050b1f00040b1f00040c1f00040b1f
0004071f0121001f002100040021011f0021021f052100050021051f0121011f00210004
0021081f0021001f00040c1f0004081f0021011f0004021f0021011f0021001f0021001f
012100040321001f0121021f022100050b2100040b2100040621001f042100040b210004
00210a1f00040c1f0005091f012100040521051f0004001f021e051f021e0004051e051f
00040b1f00040c1f00050b1f0004081f011e001f0004021e091f00040b1f0004011f0100
00040601070638012c21011f1021001f0c21011f0521001f0221011f7221121f0121031f
3521001f0121001f01210b1f0021001fdd21041f00210f1f0221001f0021011f0421001f
0121001f0321011f0421221f0021081f0221001f00210a1f010000044701072100040c21
00050b2100040b2100040c2100040b2100040b2100040c2100050b2100040b2100040c21
0004052100220221012200040b2100040c2100050b2100040b2100040c2100040b210004
0b2100040c2100050b2100040b2100040c2100040b2100040b2100040c2100050b210004
0b2100040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b210004
0b2100040c2100050b2100040b2100040c2100040021011f082100040b2100040c210005
0b2100040b2100040c2100040b21000401210100000447018e210f2200211022ff212021
072201210022012108220021032203210022052100228421010000044701072100040c21
00050b2100040b2100040c2100040b2100040b2100040c2100050b2100040b2100040421
072200040b2200040b22000407220421000500210022092100040b2100040c2100040b21
00040b2100040c2100050b2100040b2100040c2100040b2100040b2100040c2100050b21
00040b2100040c2100040b2100040b2100040c2100050b2100040b210004072100220121
012200040b2200040b2200040c2200050422062100040b2100040c2100040b2100040b21
00040c2100050b2100040b2100040c2100040b2100040121010000044601030400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040022000400220004002200040022000400220004002200040022000400220004
002200040022000400220004002200040022000400220004002200040022000400220004
002200040022000400220004002200040022000400220004002200040022000400220004
002200040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400220004
002200040022000400220004002200040022000400220004002200040022000400220004
002200040022000400220004002200040022000400220004002200040022000400220004
002200040022000400220004002200040022000400220004002200040022000400220004
002200040022000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
002100040021000400210004002100040021000400210004002100040021000400210004
00210004002103044601072100040c2100050b2100040b2100040c2100040b2100040b21
00040c2100050b2100040921012200040c2200040522002401220123002200040b220004
0c2200050522052100040b2100040c2100040b2100040b2100040c2100050b2100040b21
00040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b2100040b21
00040c2100050b2100040821022200040c22000402220024002200230024012200240123
00040023002203230122002400230022002300040c2200050b2200040122092100040c21
00040b2100040b2100040c2100050b2100040b2100040c2100040b210004012101000004
470179211522002401230027002400270126002700280026002800240026002400220224
2022f8210e22052400260124002601240226042401250124002700260024002600230026
09240322002410227321010000044701072100040c2100050b2100040b2100040c210004
0b2100040b2100040c2100050a2100220004012109220004062200230022012401260004
0026022807290004002800290028002401280029042200040c2200050b22000400220a21
00040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b2100040b21
00040c2100050b2100040b2100040c2100040b2100040b2100040c2100050b2100040121
092200040522002400220424000400260028002700290428022900040028002600270028
012901270329000402290028002600270328002601240005002400260324052200040622
042100040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b210004
01210100000447016f2115220026002401260128012900280329002a0029002a0129032a
0029012a0029022a08220023012400260024062200290e22e821002202210c2204240025
0024022602280229002a0029002a0229022a0429012a0129032a0029022a0229002a0029
002a01290328002901280027002602240a2272210100000406010006010101063b010721
00040c2100050b2100040b2100040c2100040b2100040b2100040c210005012100220221
052200040b220004022300260027002900280329012a0004032a002b002a002b012a022b
0004032a022b002303220004002402260128002900280023032200050026002a00230822
00040722032100040c2100040b2100040b2100040c2100050b2100040b2100040c210004
0b2100040b2100040c2100050b2100040b2100040c2100040b2100040b2100040c210005
062104220004082201240025000400240128002600270026002800260429000400290a2a
0004072a032b0004002b062a002b032a0005022a02290028012702240004002406220321
00040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b2100040121
010000040601000601010006000100063a01672113220023002201260024002801270129
002a0029012a002b002a012b002a032b0000002b0000012b0300022b002a020000240022
00230024002600240028012900280129012a0027032600270029002a0029002600230024
0f22dd210e22002300240023002600270028002600270429002a0029062a0c2b002a052b
0000002b0100002b0000062b0000032b012a002b032a0229002801270028002700260023
06226f21010000040601000600010006010100063a01072100040c2100050b2100040b21
00040c2100040b2100040b2100040a21012200050b220004052200230226012900040229
012a002b002a012b0000002b010000040b0000040200002b020000290024002601290004
022a0029032a04290005002a002b002a0029002800290024012300240023002600040922
012100040c2100040b2100040b2100040c2100050b2100040b2100040c2100040b210004
0b2100040c2100050b2100040b2100040c2100040b2100040b2100040c21000501210922
00040122042400260024022900040029062a002b012a012b0004002b0a0000040000002b
090000040c000005002b0000022b032a0229000400290028002600240123032201210004
0c2100040b2100040b2100040c2100050b2100040b2100040c2100040b21000401210100
000407010106010100063a0160211022002303220024012500260229012a0029022a012b
0000002b1a00002a0129032a012b022a012b052a002b0000012a0029002a002803270029
00230a22d1210f2200240222002400270226002700280027042a012b002a032b0000012b
2f00032b042a002900280027012605226d21010000044601030400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210204002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002102040021000400210004002100040021
000400210004002100040021000400210004002200040021000400220004002200040022
000400220004002200040022000400220004002200040024020400230004002700040028
0004002a0004002a0004002b0004002b0004002b00040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004002b0004002a0004002b0004002b000400000004002b000400000004002a
0004002a0004002b000400000004002b0004002a0004002a000400290004002902040022
000400220004002200040022000400220004002200040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
020400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210204002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002102040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021020400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210204002100040021000400210004002100040021
000400210004002100040021000400210004002200040022000400220004002200040022
000400220004002200040022000400240004002502040028000400290004002900040029
0004002b0004002b0004002a000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000000040000000400000004002b0204002a00040029
000400280004002200040022000400220004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002102040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
020400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
00040021020400210304050103063c015621002201211322022400270029022600280029
022a022b0100002b2200022b0000002b0700022b0500022b042a002b0129002400280026
0822b62100220d21002205210c22022402260028002700260027072a002b0200002b4200
002b012a01290027002404226c2101000004090102063a01072100040c21000509210022
00210004002200210622022100040c2100040b210004082100220021002200040c220005
01220024002300220023002201270129002a00040229022a002b040000040c0000040b00
00040b0000040c0000050500042b00000004002a00280129022600230322000400220b21
00040b2100040b2100040c2100050b2100040b2100040c2100040b2100040b2100040c21
0005082102220004002208210122000400220b2100040821002201210004092101220004
0c220005012201240026002400260228012900040029002a002b022a022b020000040c00
00040b0000040b0000040c0000050b0000040100002b022a002900260023022200040022
0b2100040b2100040b2100040c2100050b2100040b2100040c2100040b21000401210100
0004070102063c0117211522012101220521012201210522022100220b21002201211222
002301270026002700260129012a002b032a022b4800002b002a0029012a022800270522
8b21082202210b220521022200210022022104220a211122002600230024002600250028
002600280129022a0029002a002b0000022b4c00002b022a002800260024052269210100
0004090102063a01072100040c2100050b2200040b2200040c2200040b2200040b220004
0c220005002400260429032b00000004022b080000040c0000040b0000040b0000040c00
00050b000004002b002a002b002a032900270023012200040222092100040b2100040b21
00040c2100050b2100040b2100040c2100040b2100040b2100040c210005002202210722
00040b2200040722002103220004012200210722002100040b2200040722042400050024
0025002800270229022a012b0004002b0a0000040c0000040b0000040b0000040c000005
0b0000040300012b002a0029002800270024002200040522062100040b2100040b210004
0c2100050b2100040b2100040c2100040b210004012101000004060103063c0111215122
0126002300270029042a5600002b0000002b032a00290027002406227a21382200211422
0023002701260127002901270129022a022b0100002b5500002b002a0029002800270024
08226421010000044701072100040421072200050b2200040b2200040c2200040b220004
0b220004082200260023012800050029002a042b040000040b0000040c0000040b000004
0b0000040c0000050b0000040300022b002a01290027002200040522062100040b210004
0b2100040c2100050b2100040b2100040c2100040b2100040b2100040421072200050b22
00040b2200040c22000408220023012200040b2200040422022400290128012900050129
012a022b040000040b0000040c0000040b0000040b0000040c0000050b0000040600002b
002a00290028002700040722042100040b2100040b2100040c2100050b2100040b210004
0c2100040b21000401210100000447010d21152200233a220023002600280026012a0028
002a002b6100002b002a01290023082272213b2200260d22002403220023002402260229
012a002b032a6000012a002900280027082200210022612101000004070103063b010721
000402210922000501220123002400230024012201240023000400260024002500260124
052200040c2200040b2200040b22000404220124002600280129012a0005002b0a000004
0b0000040c0000040b0000040b0000040c0000050b0000040700002b002a002900270004
0822032100040b2100040b2100040c2100050b2100040b2100040c2100040b2100040b21
00040c2200050822012400250004002408220023002400040c2200040822002701220004
092200240026000402230024002601280029042a0005012a012b070000040b0000040c00
00040b0000040b0000040c0000050b0000040700002b012a002900040024092201210004
0b2100040b2100040c2100050b2100040b2100040c2100040b2100040121010000040601
000603010006390103040021000400210004002100040022000400220004002200040022
000400220004002200040022000400220004002500040027000400270004002600040028
000400270004002700040029000400270004002400040023000400220004002200040022
000400220004002200040022000400220004002200040022000400220004002200040022
000400220004002200040022000400220004002200040022000400220004002200040024
000400220004002200040026000400270004002a0004002a0004002b0004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004002b00040029000400270004002200040022
000400220004002200040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400220004002200040022000400220004002200040022
000400220004002200040022000400230004002400040025000400270004002600040024
000400220004002200040026000400260004002700040024000400230004002400040022
000400220004002200040025000400230004002200040022000400240004002600040022
000400220004002200040023000400220004002400040024000400270004002400040026
00040027000400290004002b0004002b0004002b0004002b000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004002b0004002a0004002700040023000400220004002200040022
000400220004002200040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
000400210004002100040021000400210004002100040021000400210004002100040021
0004002100040021000400210004002100040021030405010006030100063a0107210004
082203230005002402270029002800290128022900040529012801270023002600040026
0125092200040a22002300040322012300260322002700040223002400280129012a012b
010000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040900002b
0029000400280b22000400220921002200040b2100040c2100050b2100040b2100040c21
00040b2100040921012200040c2200050024002300220024002600240026012700280129
000400280027002600250124032700280029000400270226002702240023002400250127
0004012600240125002600270128002a0024002200040224002601240023022600280029
000402270129022a040000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040900012b000400280127002600240023062200040b2100040b2100040c210005
0b2100040b2100040c2100040b210004012101000004070103063b010621082200240023
01250124002700260729012a0029062a0329002701280029012800261422002700230024
00230024002601270028032200290024022600270029022a002b6c00002a012901270c22
012100220421012259210b220023002400250124012701240026012700280229012a0129
0028032707290128002700280227002501270129002800270028002602270229002a0027
00230024002701260027022602270029002a0429002a022b6e00002a0029032700260024
002307225c210100000447010521012200040422012401260327000500280a2a0004052b
022a02290004022900280822000401240223002202260024002600290004012600270329
0122002500220029000402280029002a022b040000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040a00002b0004002a0128002608220004052200210422
00040b2100040c2100050b2100040b2100040c2100040b21000407210322000404220224
0026032700050028012700280229042a0004002a0529042a000406290028002703290004
012900270229022a002b00280026000400290127002902270229002a002b00040029032a
070000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
002a022902270026042200040222082100040b2100040c2100050b2100040b2100040c21
00040b210004012101000004470101210022002107220024002201270028002700280429
022a002b002a062b0500022b062a00290222002400230122012502270126002700240228
0027012902280429012200280026002a0329002a002b0000002b6f00002b002a01290027
0124152255210822002300240027002601270328022900280029002a0029032a012b022a
0329042a002b052a0529042a0129022a012b00000029002700280229002a0229022a002b
0000002b022a012b7200002a032900280127002308220121022255210100000447010121
00220021032200040022012300260024012805290005002a022b0000002b050000040800
002b002a002b0004022b002a00230122002702260128000401290128002900270429002b
00040229032a0025002600290028002b0004032a080000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b000004002b012a002901270124042200040b22
00040722032100040c2100050b2100040b2100040c2100040b2100040521052200040022
0123012600280027012803290005002a0129032a022b01000004012b032a042b00000004
002b0b2a0004002a002b032a002b0200002a00290004032a0129032a01000004022b0900
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004002b
022a02290028002601240122000404220021052200040021002204210022032100040c21
00050b2100040b2100040c2100040b210004012101000004040107063a01012106220024
0126002800260129002a0029052a1500002b0400002b002600220026002902280329002a
0329042a0000032a032b00280029002a00290000002a032b7400012a0029012800260027
00231b224421012201210922002401260127002900280129082a022b0700032b0700052b
012a052b0000002a022b0300002b012a002b012a002b022a022b7b00022b002a02290127
00260123132200210022492101000004040100064101072200040026012700290028032a
032b0005002b0a0000040b00000403000029002600280329012a0004052a042b00000004
022b03000129002a0029000000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040000012b002a012901270026032200040b2200040b22
0004002101220221002200210122022100050b2100040b2100040c210004022100220021
0022022100220021002200040a2200250004022700280029002a0129042a0005012b002a
002b070000040b0000040600012b030000040100002b0700002a00040000012b0000022b
040000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040300002b012a002900280127012600040b2200040a2200210004032101220021
0022042100050b2100040b2100040c2100040b2100040121010000040401000641010722
002400270129002a0029012a012b2200002900280029032a082b0d000029002a002b002a
7c00002b012a00280029002700240026012400220023092200230d220021022200210522
122100220121002201210122012100220721002204210022002112220024002502270128
0129042a002b012a0200002b2f00002b8a00012b002a0129002801270026002319220121
0a2220210522042102220321002201210022010000044601030400220004002200040024
00040029000400290004002a0004002b0004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
0004000000040000000400000004002a0004002a0004002b0004002b0004000000040000
00040000000400000004000000040000000400000204000000040000000400000004002a
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004002a00040029
000400290004002700040027000400270004002200040022000400220004002200040022
020400220004002200040022000400220004002200040022000400220004002200040022
000400220004002200040022000400220004002100040021000400210004002100040021
000400210204002100040022000400220004002100040022000400220004002200040022
000400220004002100040022000400210004002100040022000400220004002200040022
000400220004002202040022000400220004002200040022000400260004002700040029
000400290004002a0004002a0004002a000400000004002b000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
00040000000400000004000000040000000400000004000000040000000400000004002a
000400290004002800040026000400230004002200040022000400220004002202040022
000400220004002200040022000400220004002200040022000400220004002200040022
000400220004002200040022000400220004002100040021000400210004002100040021
020400210004002100040021000400220004002100040022000400220004002100040022
000400220004002200040022000400220004002200040022000400220004002200040022
0004002102040022030403010006410104220024002601270029012a002b002a2600002b
002a002b1a00012b7f00012b012a00290027002803270026022403220023002400271d22
0721032200211022002102220221142200240026002700280229032a0000022bc600012a
02290028012700260023272201210022062128220100000404010006000100063f010122
00240022002402270004002a012b0000002b070000050b0000040b0000040400002b0600
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040500002a002b002a002800290128000400280327002500220125
0126002800040b2200040c22000503220521012200040b2200040c2200040b2200040522
00230127002801290004022a012b070000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040700012b002a0129000400280127002601220024042200040b2200040c2200050322
00210122012100220021002200040b2200040c2200040b22000401220100000404010006
000100063f01012200270023002700280229002bcc00002b0000002a0529002803270026
0327002901241e2200210222002130220026002700280129022a012bce00022a01290028
012700240023002601240022002400230024002200230422002349220100000405010606
3a010122002700260028022900040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040700002b032a0004002a0029022803270128002a0004002700220024002202240023
032200040c2200050b2200040b2200040c2200040b22000400240022032400270129022a
0004002b0b0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040900002b012a0004
022901270026022700240126000401240022022400220026032200040c2200050b220004
0b2200040c2200040b220004012201000004060100063f010124002900270129012a002b
d000002a022b012a042900280329002a0127002400270025032700230024412200230022
002300240027002304270029022a002bd300022b012a0129082700260027002402270023
0027482200230100000447010127002900280029022a00040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040800002b02000004002b012a0629002a002b000400280627
00260027012400040022012400230122002400220124022200050b2200040b2200040c22
000402220023042400260024002600040027002603270029022a002b000000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c000004022a00290028002700290128
002701280004052700260027032200040c2200050b2200040b2200040722012300220123
0004032202230322002300040022002401000004350104060101020607010128002a0029
002a022bd700002b032a0029032a00000129002700280027032803270025002201270026
002200240027002201270023122200260522002301220023072200230622002600270026
06270029002700280329002a012bd800012b012a04290028002900280029002800290027
022800270029002400230024052201240022002400230024032314220023072200230024
012300260124012500230022012300240026002500260124002300220026002400230027
0100000435010006040100060201000606010129022a020000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040100022b032a012b00000004002900280029
002803290128012700040025022700240127002601270026012400050b22000400240022
002400270123002500220023002400260023000400260124002200230322002602220004
0124002305270028002700280004002900280329002a002b030000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040100002b012a0029022a022900040529
002700290027002400260024000403240027002600240026002500270224000501230922
000402220023012200230124022300040223002400250026002500260427000400240026
002403270226002300270004002400270100000435010006040100060201000604010405
002a00050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000000050000000500000005002b0005002b000500000005002a0005
002900050029000500290005002900050029000500280005002700050028000500270005
002800050028000500270005002700050023000500220005002200050022000500220005
002400050023000500220005002700050027000500220005002700050026000500270005
002600050026000500220005002300050022000500220005002700050026000500280005
0029000500280005002800050029000500290005002a0005002a00050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005002a0005002a0005002a0005002a0005002a0005002a000500290005
00290005002a000500270005002600050027000500260005002700050026000500270005
002700050027000500260005002400050022000500240005002200050022000500220005
002300050024000500240005002600050023000500250005002600050026000500270005
002700050027000500270005002700050027000500270005002700050027000500270005
0026000500270005002703052e0104060001030601010006020100060601012a0000002b
030000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
002b0029052a032900040027012900280027002800290028012900280127000500260027
012401220023022201270004002700240027002902270024032700040427002400230125
002700230122000402270729002a0004052a050000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040300002b002a022b002a002b002a0004052a0029002a
002802270004062700280027002802270005022700240023002400260322002400040023
012605270026012700040727042800040227002800290028002901280127002900040027
0029010000043901000600010006020100060601012ae800002b0000022a022b022a0029
002a00290028022900280029002a0029012a032801270026002701220024022202270029
002700280029012700280127002800290127002904270026012700290026012400270128
00270029082a002b002a032be100002b0200002b0000012b072a00290128062700290028
022900280129012802270024012702240023002701260627002802270028022700280129
012804290128002900280629002703290100000435010006020100060001000602010006
0601012b050000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040000022b0200012b022a00040029022a0129002a0029012a0229000500280029
012701240027022401280004002900270029002a02290027032900040229012803270029
022700040229082a00040000002b090000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b000004012b002a022b002a002b022900270004032700280729
000501290028022700280227002600270004012705280029002700290028000402280929
00040329022a0329002a00040029002a01000004360102060201020607010004f300022b
042a0029002a002b002a002b032a0229012805270229002a0129002a0129002a00280129
002a0129002a0329002800270128002a02270029012a0029022a002b012a002b002a002b
f200002b0200002a0000002a012901270028012700280029002a0029022a0029022a0229
0028002700280029032700280127072900280629012a0029052a0129002a0029062a0029
032a0100000447010004060000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040a00000e00040b0000040c0000050000000e
090000040b0000040c0000040b0000040b000004002a022b012a0000002a0000002b022a
00050029002a0129012700280227012a0004002a0029042a0029032a0004042a00290028
0129002a02280004022a022b0000012b0000002b000000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040500002b0000022a00290004
0329082a0005022a002900280029002a0328002900040629012a0029002a002900040c2a
0004032a022b032a002b0004012a01000004470100049300000e0100010e0100010e0100
010e1500000e3f00002b0200002a002b0000002b0100002b042a0129012800290228052a
002b022a0029012a002b062a0229002a002b0229032aff000100022a0529002a002b002a
022b002a012b042a0029012a0629072a0029062a012b002a062b002a022b0200022b002a
0000002b002a002b0100000447010004060000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040300010e0000010e02000004
0100010e0100000e040000040c0000050000000e090000040b0000040c0000040b000004
0b0000040300002b0500012b0005002a002b012a0129002a0229012a0004002b012a0000
012a002b002a012b0000002b0004022b052a0000002a01290004012b002a080000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040000010e090000050b0000040b0000040c0000040b00
00040700012b012a0004042a0000002b0200002b01000005022b022a002b0129022a0004
062a012b002a002b002a0004002a022b0100002b05000004002b0800002b00000004002b
02000004470100048800000e0000010e0100000e0000000e0b00000e0100000e1300000e
0000000e4c00002b0000022a0029002a0229012b002a0000002a002b0000012b0000002a
0300002b0200012b032a0000022a002b0100002ba600010e0200000e0000010e0100000e
0000030e0100000e0100010e0200010e3f00002b052a002b0b00002b002a002b0000062a
062b0000002a0000002b0000002b1d000004460103040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
0004000000040000000400000004000000040000000400000004000e0004000e00040000
0004000e0004000e00040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000e0004000e000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004002a0004002a0004002a0004002a00040000
0204002b00040000000400000004002b0004000000040000000400000004000000040000
0004002a0004002b0004002a0004002a0004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000002040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000000400000204000e0004000e000400000004000e
0004000e0004000000040000000400000004000e000400000004000e0004000e00040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
0004000000040000000400000004002a0004002a0004002a000400000004000000040000
000400000004000000040000000400000004002b000400000004002a0004002a02040000
0004000000040000000400000004002b0004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000304460100048600010e1700000e1300000e0000000e4e00002b0000012a002b
022a1500002b0200022ba100000e0000010e0000020e0200000e0000000e0f00000e0600
010e0000020e0000020e3600042b1100012b0000002b0000002b2b000004470100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040500000e050000040b0000040500000e040000040c000005000e0000000e08000004
0b0000040c0000040b0000040b0000040c0000050300012b0000022b010000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040a00010e0004000e0000000e0100000e05000004000e0a00
00040c0000050400000e0200020e0004000e0a0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b00000403000004470100048200020e1a00000e1200
000e0200000e0000000eff000d00000e3300000e0300000e790000044701000406000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040900010e
00040000010e090000040b0000040500000e040000040c0000050200010e0000000e0300
000e00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040000010e0100000e0000010e0000000e010000040b0000040b000004
0c0000050b0000040100000e080000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b00000403000004470100047c00010e0000000e1f00000e0c00000e
0200010e0600050efd00000e0100010e0000000e0100000e3b00000e7700000447010004
060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0800000e01000004000e0b0000040b0000040500000e040000040500000e0000000e0000
000e010000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040900010e0004000e0b0000040b0000040b0000040c0000050b00
00040300000e060000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b00000403000004470100047b00000e0100000e2100000e0900000e0200000e0f00
000ef800000e4900010e7500000447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040600010e020000040c0000040b0000040600
000e030000040200010e070000050b000004000e0a0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040700000e020000040c0000040b000004
0b0000040c0000050b0000040500000e040000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040300000446010304000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
0000000400000004000000040000000400000004000e0004000000040000000400000004
000e00040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000e0004000e000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000304
46010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040300020e040000040c0000040b0000040600000e03000004000e0b0000050b00
00040000000e090000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040000000e0000000e0100000e040000040c0000040b0000040b0000040c00
00050b0000040500000e040000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b00000403000004470100047400010e2a00000e0400000e1a00000eee00
000e5400000e7300000447010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050a00000e00040000000e090000040c0000040b0000040600000e
030000040c0000050b0000040000010e080000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040000000e090000040c0000040b0000040b000004
0c0000050b0000040600000e030000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b00000403000004470100047000030e2c00000e0200010e1d00000e
e800000e0100000e5500000e7300000447010004060000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050900000e000000040b0000040c0000040b000004
0600000e0100000e000000040c0000050b0000040300000e0000000e040000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050900010e0004000e0a000004
0c0000040b0000040b0000040c0000050b0000040700000e020000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b00000403000004470100046f00000e
3000000e0100000e2000010e0000000ee100020e0100010e5600000e7200000447010004
060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050900000e
000000040b0000040c0000040b0000040600000e0100000e000000040c0000050b000004
0600000e030000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0500000e0100000e010000040b0000040c0000040b0000040b0000040c0000050b000004
0800000e010000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b00000403000004470100046c00020e3100000e0000000e2500000edd00010e5f00000e
710000044601030400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000020400000004000000040000000400000004000e000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000e00040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000020400000004000000040000000400000004000e000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000000400000004000000040000020400000304460100046900020e
3500000e2700000ed700000e0200000e6200000e7000000447010004060000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050200000e0100000e04000004
0b0000040c0000040b0000040700000e020000040c0000050b0000040900000e00000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040700000e0000000e0000000e
00050100010e070000040b0000040c0000040b0000040b0000040c0000050b0000040900
000e000000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
000403000004470100046700000e6300000ed100010e0000010e0000010e6500000e6f00
000447010004060000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050000000e090000040b0000040c0000040b0000040b0000040c0000050b0000040900
000e000000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040600000e0400
0005010e090000040b0000040c0000040b0000040b0000040c0000050b0000040a00000e
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
0004470100046600000e6500000ecf00000e6e00000e6e00000447010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c000005000e0a0000040b000004
0c0000040b0000040b0000040c0000050b0000040a00000e00040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040600000e040000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b00000403000004470100046200010e0000000e6700000ecd00
000e6f00000e6e00000447010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040a00010e0005000e0a0000040b0000040c0000040b0000040b0000040c00
00050b0000040b000004000e0b0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0500000e050000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b000004000e0b0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
000403000004460103040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000000400000004000e000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000000040000000400000004000e0004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000e00040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000000040000030446010004060000040c0000050b00
00040b0000040c0000040b0000040b0000040900000e010000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040000000e0a0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040300000e070000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b000004000e0b0000040b0000040b0000040c000005
0b0000040b0000040c0000040b00000403000004470100046000000e6e00000e8c00020e
0900000e1900000e0d00000e0400000e7300000e0000000e6a0000044701000406000004
0c0000050b0000040b0000040c0000040b0000040b0000040700000e030000050b000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040000010e09000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0600010e02000004020e0200020e0000010e00040c0000040800000e010000040900000e
00000004020e0000000e070000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040000010e0000000e070000040b0000040b0000040c0000050b00
00040b0000040c0000040b00000403000004470100041f00000e3e00000e7100000e8700
000e0800000e0000000e0500000e1600010e0a00000e0500000e7700010e680000044701
0004060000040c0000050800000e0000000e0004010e0000000e070000040c0000040b00
00040b0000040600000e040000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040300000e070000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050400010e040000040300010e050000040c00
00040700000e0000000e000000040700000e020000040200000e080000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040500000e050000040b00
00040b0000040c0000050b0000040b0000040c0000040b00000403000004470100041b00
020e0100010e0100000e0000010e3500000e7300000e8400000e1400000e0200010e0600
000e0700000e0000000e0800000e8300000e6600000447010004060000040c0000050000
000e0200000e050000040400000e050000040c0000040b0000040300020e040000040500
000e050000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040400000e060000040a00000e00040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050000020e070000040b000004030e0100010e0100020e0004
0700000e0100000e0004010e0000030e040000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040700000e030000040b0000040b000004
0c0000050b0000040b0000040c0000040b00000403000004310100060301020602010206
070100041000010e0200000e0000000e0000010e0c00000e0500000e1700000e0300000e
0100000e0a00010e7600000e1100000e6b00000e2000010e0300000e0000000e0000040e
0100010e0100000e8900000e650000043001010602010006020100060001000602010006
06010004060000040400000e0100000e0100010e00050200000e070000040500000e0400
00040000000e0a0000040a00000e00040100000e0200000e040000040300000e07000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040500010e
040000040900010e00040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040700010e02000004010e0000000e070000040100000e
080000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040800000e020000040b0000040b0000040c0000050b0000040b0000040c000004
0b000004030000042f010006000100060201000602010006000100060201000604010405
000000050000000500000005000000050000000500000005000e0005000e000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000e0005000e0005000e000500000005000e00050000000500000005
0000000500000005000000050000000500000005000000050000000500000005000e0005
00000005000e000500000005000000050000000500000005000000050000000500000005
000e00050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
0000000500000005000000050000000500000005000000050000000500000005000e0005
00000005000000050000000500000005000000050000000500000005000e000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000005000000050000000500000005000000050000000500000005
000000050000000500000305280104060201000602010006020100060001000602010006
06010004060000040300000e070000050b0000040900000e000000040200000e08000004
0900000e000000040500000e040000040200000e080000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040700010e02000004000e0800010e0004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040900000e0000000e
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040900000e010000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040300000431010006020100060201
00060001000602010006060100040b00000e2500000e1300000e0700000e0800000e7d00
000e0100000e0000000e0600000e0000000e6600000e0000010ec500000e620000043101
00060201000602010006000100060201000606010004060000040200000e080000050b00
00040b0000040200000e080000040900000e000000040500000e0300000e00040100000e
090000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0a00010e00040100000e0500000e010000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040400000e0200000e020000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040a00010e00040b0000040b0000040c0000050b0000040b0000040c000004
0b00000403000004310100060301020602010206070100040800010e2700000e1200000e
0800000e0300000e0100010e8400000e0400000e0200000e6000000e0000000e0000000e
cb00000e600000044701000406000004000e0b0000050b0000040b0000040200000e0800
00040800000e010000040600000e0200000e0004000e0b0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040200010e0000020e0200
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040300000e0100
000e040000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c000004000e0a000004
0b0000040c0000050b0000040b0000040c0000040b00000403000004470100040700000e
2900000e1200000e0900000e0200010e8a00000e0500000e5f00000ed100000e5f000004
47010004060000040c0000050b0000040b0000040200000e080000040600010e02000004
0600000e0100000e000000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040400000e05000004000e0a0000040c0000050b00
00040b0000040c0000040b0000040b0000040000010e090000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040000000e090000040b0000040c0000050b0000040b00
00040c0000040b00000403000004470100040500000e2b00000e0f00000e0c00000e0000
010e9300010e5b00000ed500000e0300000e59000004460103040000000400000004000e
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000000400000204000000040000000400000004000e
0004000e0004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0204000e0004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000204000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000204000000040000000400000004000000040000000400000004000e
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000020400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000204000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000002040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000020400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000204000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000e0004000e0004000e0004000e0004000002040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
020400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000020400000304460100040300000e2e00000e0c00000e0e00000e0000010e9500
040e5200030eda00000e0300000e55000004470100040000000e0000000e020000040c00
00050b0000040b0000040300000e070000040300000e060000040600010e0000000e0000
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040500000e040000040c0000050b0000040b0000040c0000040b00
00040700000e020000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040400000e0400000e00040b0000040c0000050b0000040b0000040c0000040b000004
0300000447010004000e0000010e2f00000e0700000e0200000e0f00010e9c00020e4d00
000ee500000e540000044701010e0000000e030000040c0000050b0000040b0000040300
000e0500010e0004000e0100000e070000040600010e020000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040800
000e010000040c0000050b0000040b0000040c0000040b0000040500000e040000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b00000403000004470100043300000e0400000e0300
010eb300010e4900000ee700000e0000000e5100000447010004060000040c0000050b00
00040b0000040300000e0300010e010000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040100030e050000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040000020e0200000e0300
00040c0000050b0000040b0000040c0000040b00000403000004470100043300000e0200
000ebe00020e4000000eed00000e0200030e4b00000447010004060000040c0000050b00
00040b0000040300000e0100000e040000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040200000e080000050b0000040b0000040c0000040b0000040000000e090000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004000e0500000e
030000040c0000050b0000040b0000040c0000040b000004030000044601030400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000e00040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
0000000400000004000000040000000400000004000000040000000400000004000e0004
000e00040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000e0004000e0004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000e00040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000030446010004060000040c0000050b0000040b0000040300000e0000000e
050000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040300000e0400000e01000005
0b0000040200000e070000040c0000040200010e0000020e020000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040700000e02000004
0c0000050b0000040b0000040c0000040b00000403000004470100043300000e0000000e
c400000e0400000e1200010e0000000e0000020e0200010e0d00000e0000000efe00000e
0c00000e3c00000447010004060000040c0000050b0000040b0000040400010e05000004
0b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040a00010e00050900000e000000040100
000e0000020e0000000e0100000e0004000e0100000e080000040200000e070000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040700
000e020000040600020e020000050b0000040b0000040c0000040b000004030000044701
00043400000ecf00010e0700010e0200000e0300000e0700000e0400000e0500000eff00
0100000e0800010e0200000e3b00000447010004060000040c0000050b0000040b000004
0400000e060000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005010e0000
000e0500010e0004000e0000000e0300000e030000040300000e0300000e02000004020e
080000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c000005
0b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c000004
0b0000040700000e020000040300000e0000000e0200000e010000050b0000040b000004
0700000e030000040b0000040300000447010004ff000600000e0000010e0000000e0100
000e0100000e0000000e0e00000e0200010e0200000e0100000eff000200010e0500000e
0500000e0000000e2000000e0000030e0000040e0000000e090000044701000406000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050000000e0000010e0000010e0000000e010000040b0000040300000e0200000e
0000000e0000000e00040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040a00000e00040200000e0600010e00050b0000040b00
00040400010e050000040400000e0000000e0200000e00040000000e0100000447010004
ff000700000e0100000e0000020e1400000e0000000e0100020eff000800050e0900000e
1b00010e0d00000e0000010e0000000e0100000e02000004460103040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000002040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000e00040000000400000004
000000040000020400000004000000040000000400000004000000040000000400000004
0000000400000004000e000400000004000e000400000004000000040000000400000004
000000040000000400000204000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000002040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000020400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000204000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000002040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000020400000004
000000040000000400000004000000040000000400000004000000040000000400000004
000000040000000400000004000000040000000400000004000000040000000400000204
000000040000000400000004000000040000000400000004000000040000000400000004
00000004000000040000000400000004000e000400000004000000040000000400000004
0000020400000004000000040000000400000004000000040000000400000004000e0004
000e00040000000400000004000000040000000400000004000000040000000400000004
00000004000e02040000030446010004ff000700000e1b00010eff002000000e0b00030e
0000010e0000000e0100000e1d00000447010004060000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050100000e08000004
0b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b000004
0b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b000004
0b0000040c0000040b0000040b0000040c0000050100000e0700000e00040000000e0300
000e0100000e0000000e00040c0000040b0000040300000447010004ff00ff004700000e
0600010e0100000e0300000e2400000447010004060000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b000004
0c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b000004
0c0000040b0000040b0000040c0000050200000e0400010e00000004000e0a0000040c00
00040b0000040300000447010004ff00ff004800000e0400000e0100010e2a0000044701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050200
000e0300000e020000040b0000040c0000040b0000040300000447010004ff00ff004900
000e0100010e2f00000447010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050300000e0000000e040000040b0000040c0000040b0000040300
000446010304000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
0004000000040000000400000004000000040000000400000004000e0004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
00040000000400000004000000040000030446010004060000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
000447010004ff00ff007e00000447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004030000044701
0004ff00ff007e00000447010004060000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040300000447010004ff00
ff007e00000431010006020104060101020607010004060000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
00043001010602010006040100060201000606010004ff00ff007e0000042f0100060001
000602010006040100060201000604010405000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050004000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000400050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500040005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050004
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000400050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500040005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050004000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000400050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500040005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050004000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000400050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500040005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050004
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000400050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500040005000000050000000500000005000000050000
000500000005000000050000000500000005000000050000000500000005000000050000
000500000005000000050000000500000005000000050004000500000305280104060201
000602010306010100060201000606010004ff00ff007e00000431010006060100060001
00060201000606010004060000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040300000431010006020100060201
0006000100060201000606010004ff00ff007e0000043101000603010206020102060701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040300000447010004ff00ff007e000004470100040600
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040300000447010004ff00ff007e00000447010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b000004030000044601030400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000000400000004000000040000
000400000004000000040000000400000004000000040000030446010004060000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040300000447010004ff00ff007e00000447010004060000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040300000447010004ff00ff007e00000447010004060000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b00
00040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b00
00040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b0000040300
000447010004ff00ff007e00000447010004060000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c00
00050b0000040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c00
00040b0000040b0000040c0000050b0000040b0000040c0000040b000004030000044701
0004060000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b0000040b0000040c0000050b0000040b0000040c0000040b00
00040b0000040c0000050b0000040b0000040c0000040b0000040b0000040c0000050b00
00040b0000040c0000040b00000403000004430102060304000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000602040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006020400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060204000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000602040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006020400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060204
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000602040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006020400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060204000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000602040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006020400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060204000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000602040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006020400060004
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060204
000600040006000400060004000600040006000400060004000600040006000400060004
000600040006000400060004000600040006000400060004000600040006000400060004
00060204000603044e0100040c0100050b0100040b0100040c0100040b0100040b010004
0c0100050b0100040b0100040c0100040b0100040b0100040c0100050b0100040b010004
0c0100040b0100040b0100040c0100050b0100040b0100040c0100040b0100040b010004
0c0100050b0100040b0100040c0100040b0100040b0100040c0100050b0100040b010004
0c0100040b0100040b0100040c0100050b0100040b0100040c0100040b0100040b010004
0c0100050b0100040b0100040c0100040b010004620100054e0100054e0100054e010005
4e0100054e0100054e0100054e010005ff01ff01ff01ff01ff01ff01ff01ff01e6010006
030102060801020602010206340102060201020608010206020102063401020602010206
080102060201020635010006030102060801020602010206350100060301020608010206
020102063401020602010206080102060201020634010206020102060801020602010206
350100060301020608010206020102067d01010602010006020100060101000603010006
020100060001000602010006320100060201000600010006020100060101000603010006
020100060001000602010006320100060201000600010006020100060101000603010006
020100060001000602010006330101060201000602010006010100060301000602010006
000100060201000633010106020100060201000601010006030100060201000600010006
020100063201000602010006000100060201000601010006030100060201000600010006
020100063201000602010006000100060201000601010006030100060201000600010006
020100063301010602010006020100060101000603010006020100060001000602010006
7b0100060001000602010006020100060101000603010006020100060001000602010006
320100060201000600010006020100060101000603010006020100060001000602010006
320100060201000600010006050100060301000602010006000100060201000632010006
000100060601000601010006030100060201000600010006020100063201000600010006
020100060201000601010006030100060201000600010006020100063201000602010006
000100060201000601010006030100060201000600010006020100063201000602010006
000100060501000603010006020100060001000602010006320100060001000606010006
01010006030100060201000600010006020100067d010006030102060701000602010006
000100060201000632010006020100060001000602010006060100060201000600010006
020100063201000602010006000103060701000602010006000100060201000634010006
040101060701000602010006000100060201000634010006030102060701000602010006
000100060201000632010006020100060001000602010006060100060201000600010006
020100063201000602010006000103060701000602010006000100060201000634010006
04010106070100060201000600010006020100067d010006020100060201000606010006
020100060001000602010006320100060201000600010006020100060601000602010006
000100060201000632010006020100060001000602010006060100060201000600010006
020100063401000603010006090100060201000600010006020100063401000602010006
020100060601000602010006000100060201000632010006020100060001000602010006
060100060201000600010006020100063201000602010006000100060201000606010006
020100060001000602010006340100060301000609010006020100060001000602010006
7d0100060201000602010006010100060301000602010006000100060201000632010006
020100060001000602010006010100060301000602010006000100060201000632010006
020100060001000602010006010100060301000602010006000100060201000634010006
020100060501000603010006020100060001000602010006340100060201000602010006
010100060301000602010006000100060201000632010006020100060001000602010006
010100060301000602010006000100060201000632010006020100060001000602010006
010100060301000602010006000100060201000634010006020100060501000603010006
0201000600010006020100067d0100060301020602010006040102060201020634010206
020102060201000604010206020102063401020602010206020100060401020602010206
350100060201040601010006040102060201020635010006030102060201000604010206
020102063401020602010206020100060401020602010206340102060201020602010006
04010206020102063501000602010406010100060401020602010206ff01ff01ff01ff01
ff01bf01
restore grestore
%
% End Imported PIC File: flowscan.png
%
% here ends figure;
% 
% here starts figure with depth 110
% Polyline
7.500 slw
n 4080 2475 m 3975 2475 3975 3120 105 arcto 4 {pop} repeat
  3975 3225 4995 3225 105 arcto 4 {pop} repeat
  5100 3225 5100 2580 105 arcto 4 {pop} repeat
  5100 2475 4080 2475 105 arcto 4 {pop} repeat
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 6255 2550 m 6150 2550 6150 3045 105 arcto 4 {pop} repeat
  6150 3150 7170 3150 105 arcto 4 {pop} repeat
  7275 3150 7275 2655 105 arcto 4 {pop} repeat
  7275 2550 6255 2550 105 arcto 4 {pop} repeat
 cp gs 0.90 setgray ef gr gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 102
% Polyline
1 slj
7.500 slw
n 10219 3825 m 9979 3995 l 9979 4132 l 10664 4200 l 10664 4064 l 10800 3859 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 9678 1936 m 9525 2045 l 9525 2132 l 9963 2175 l 9963 2088 l 10050 1958 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7878 1861 m 7725 1970 l 7725 2057 l 8163 2100 l 8163 2013 l 8250 1883 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7515 3825 m 7275 3995 l 7275 4132 l 7960 4200 l 7960 4064 l 8096 3859 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7747 2015 m 7769 2018 l 7769 2028 l 7747 2026 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 9744 2088 m 9875 2101 l 9875 2123 l 9744 2110 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 7617 4064 m 7822 4084 l 7822 4118 l 7617 4098 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 7309 4067 m 7343 4071 l 7343 4087 l 7309 4084 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 10321 4064 m 10526 4084 l 10526 4118 l 10321 4098 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 10013 4067 m 10047 4071 l 10047 4087 l 10013 4084 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 9547 2090 m 9569 2093 l 9569 2103 l 9547 2101 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 7944 2013 m 8075 2026 l 8075 2048 l 7944 2035 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
1 slj
n 7960 4064 m 7960 4200 l 8096 3961 l 8096 3859 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7960 4166 m
 7275 4098 l gs col62 s gr 
% Polyline
n 7312 3188 m 7186 3314 l 7428 3556 l 7326 3658 l 7657 3658 l 7656 3328 l
 7554 3429 l
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 7925 4162 m
 7925 4094 l gs col62 s gr 
% Polyline
n 7515 4122 m
 7515 4054 l gs col62 s gr 
% Polyline
n 7925 4128 m
 7515 4087 l gs col62 s gr 
% Polyline
n 9963 2153 m
 9525 2110 l gs col62 s gr 
% Polyline
n 9940 2151 m
 9940 2107 l gs col62 s gr 
% Polyline
n 9678 2125 m
 9678 2082 l gs col62 s gr 
% Polyline
n 9940 2129 m
 9678 2103 l gs col62 s gr 
% Polyline
n 9536 2068 m 9580 2072 l 9580 2094 l 9536 2089 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 9897 2103 m 9930 2107 l 9930 2117 l 9897 2114 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 9919 2149 m
 9919 2128 l gs col62 s gr 
% Polyline
n 9897 2146 m
 9897 2125 l gs col62 s gr 
% Polyline
n 7292 4032 m 7361 4038 l 7361 4072 l 7292 4065 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
1 slj
n 8163 2013 m 8163 2100 l 8250 1948 l 8250 1883 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 10664 4166 m
 9979 4098 l gs col62 s gr 
% Polyline
n 10629 4162 m
 10629 4094 l gs col62 s gr 
% Polyline
n 8163 2078 m
 7725 2035 l gs col62 s gr 
% Polyline
n 10219 4122 m
 10219 4054 l gs col62 s gr 
% Polyline
n 8140 2076 m
 8140 2032 l gs col62 s gr 
% Polyline
n 7878 2050 m
 7878 2007 l gs col62 s gr 
% Polyline
n 8140 2054 m
 7878 2028 l gs col62 s gr 
% Polyline
n 7736 1993 m 7780 1997 l 7780 2019 l 7736 2014 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 10629 4128 m
 10219 4087 l gs col62 s gr 
% Polyline
n 8097 2028 m 8130 2032 l 8130 2042 l 8097 2039 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 9996 4032 m 10065 4038 l 10065 4072 l 9996 4065 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 10560 4087 m 10613 4093 l 10613 4109 l 10560 4104 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 10594 4159 m
 10594 4126 l gs col62 s gr 
% Polyline
n 10560 4155 m
 10560 4122 l gs col62 s gr 
% Polyline
n 3150 2779 m 3150 2958 l 3492 2958 l 3492 3102 l 3726 2868 l 3492 2635 l
 3492 2779 l
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 8097 2071 m
 8097 2050 l gs col62 s gr 
% Polyline
n 8119 2074 m
 8119 2053 l gs col62 s gr 
% Polyline
n 7856 4087 m 7909 4093 l 7909 4109 l 7856 4104 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
1 slj
n 9963 2088 m 9963 2175 l 10050 2023 l 10050 1958 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7890 4159 m
 7890 4126 l gs col62 s gr 
% Polyline
n 7856 4155 m
 7856 4122 l gs col62 s gr 
% Polyline
n 5325 2779 m 5325 2958 l 5667 2958 l 5667 3102 l 5901 2868 l 5667 2635 l
 5667 2779 l
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
1 slj
n 10664 4064 m 10664 4200 l 10800 3961 l 10800 3859 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7207 2425 m 7334 2551 l 7575 2309 l 7677 2411 l 7677 2080 l 7347 2081 l
 7448 2184 l
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 10030 4000 m
 10262 3827 l gs col62 s gr 
% Polyline
n 10054 4003 m
 10283 3829 l gs col62 s gr 
% Polyline
n 10080 4005 m
 10305 3830 l gs col62 s gr 
% Polyline
n 10105 4009 m
 10326 3831 l gs col62 s gr 
% Polyline
n 10131 4011 m
 10348 3832 l gs col62 s gr 
% Polyline
n 10155 4014 m
 10369 3835 l gs col62 s gr 
% Polyline
n 10182 4016 m
 10391 3835 l gs col62 s gr 
% Polyline
n 10208 4017 m
 10412 3837 l gs col62 s gr 
% Polyline
n 10232 4021 m
 10434 3837 l gs col62 s gr 
% Polyline
n 10258 4023 m
 10456 3838 l gs col62 s gr 
% Polyline
n 10283 4026 m
 10478 3840 l gs col62 s gr 
% Polyline
n 10309 4028 m
 10498 3841 l gs col62 s gr 
% Polyline
n 10334 4031 m
 10519 3843 l gs col62 s gr 
% Polyline
n 10360 4033 m
 10541 3844 l gs col62 s gr 
% Polyline
n 10385 4036 m
 10563 3846 l gs col62 s gr 
% Polyline
n 10410 4038 m
 10585 3846 l gs col62 s gr 
% Polyline
n 10435 4041 m
 10607 3848 l gs col62 s gr 
% Polyline
n 10461 4043 m
 10627 3848 l gs col62 s gr 
% Polyline
n 10486 4047 m
 10648 3851 l gs col62 s gr 
% Polyline
n 10512 4049 m
 10670 3852 l gs col62 s gr 
% Polyline
n 10536 4050 m
 10692 3853 l gs col62 s gr 
% Polyline
n 10562 4054 m
 10714 3853 l gs col62 s gr 
% Polyline
n 10587 4056 m
 10736 3855 l gs col62 s gr 
% Polyline
n 10613 4058 m
 10757 3857 l gs col62 s gr 
% Polyline
n 10637 4061 m
 10778 3858 l gs col62 s gr 
% Polyline
n 10007 4101 m
 10007 4134 l gs col62 s gr 
% Polyline
n 10034 4104 m
 10034 4137 l gs col62 s gr 
% Polyline
n 10062 4105 m
 10062 4140 l gs col62 s gr 
% Polyline
n 10088 4109 m
 10088 4142 l gs col62 s gr 
% Polyline
n 10116 4111 m
 10116 4145 l gs col62 s gr 
% Polyline
n 10143 4115 m
 10143 4148 l gs col62 s gr 
% Polyline
n 10171 4117 m
 10171 4151 l gs col62 s gr 
% Polyline
n 10198 4120 m
 10198 4154 l gs col62 s gr 
% Polyline
n 10226 4122 m
 10226 4155 l gs col62 s gr 
% Polyline
n 10253 4126 m
 10253 4159 l gs col62 s gr 
% Polyline
n 10281 4128 m
 10281 4162 l gs col62 s gr 
% Polyline
n 10307 4131 m
 10307 4165 l gs col62 s gr 
% Polyline
n 10335 4133 m
 10335 4167 l gs col62 s gr 
% Polyline
n 10362 4135 m
 10362 4170 l gs col62 s gr 
% Polyline
n 10390 4139 m
 10390 4173 l gs col62 s gr 
% Polyline
n 10417 4142 m
 10417 4176 l gs col62 s gr 
% Polyline
n 10445 4144 m
 10445 4178 l gs col62 s gr 
% Polyline
n 10472 4146 m
 10472 4179 l gs col62 s gr 
% Polyline
n 10500 4149 m
 10500 4184 l gs col62 s gr 
% Polyline
n 10526 4153 m
 10526 4187 l gs col62 s gr 
% Polyline
n 10554 4155 m
 10554 4189 l gs col62 s gr 
% Polyline
n 10581 4157 m
 10581 4191 l gs col62 s gr 
% Polyline
n 10609 4161 m
 10609 4195 l gs col62 s gr 
% Polyline
n 10636 4163 m
 10636 4196 l gs col62 s gr 
% Polyline
n 10664 4098 m
 9979 4030 l gs col62 s gr 
% Polyline
n 9525 2045 m
 9963 2088 l gs col62 s gr 
% Polyline
n 9541 2046 m
 9692 1937 l gs col62 s gr 
% Polyline
n 9558 2048 m
 9706 1938 l gs col62 s gr 
% Polyline
n 9573 2049 m
 9719 1938 l gs col62 s gr 
% Polyline
n 9590 2051 m
 9733 1939 l gs col62 s gr 
% Polyline
n 9606 2053 m
 9747 1940 l gs col62 s gr 
% Polyline
n 9622 2055 m
 9761 1941 l gs col62 s gr 
% Polyline
n 9638 2056 m
 9775 1942 l gs col62 s gr 
% Polyline
n 9655 2058 m
 9789 1942 l gs col62 s gr 
% Polyline
n 9671 2059 m
 9802 1944 l gs col62 s gr 
% Polyline
n 9687 2061 m
 9816 1944 l gs col62 s gr 
% Polyline
n 9703 2062 m
 9830 1945 l gs col62 s gr 
% Polyline
n 9719 2064 m
 9844 1945 l gs col62 s gr 
% Polyline
n 9736 2066 m
 9857 1946 l gs col62 s gr 
% Polyline
n 9752 2067 m
 9870 1948 l gs col62 s gr 
% Polyline
n 9768 2069 m
 9884 1948 l gs col62 s gr 
% Polyline
n 9785 2070 m
 9898 1949 l gs col62 s gr 
% Polyline
n 9800 2072 m
 9912 1949 l gs col62 s gr 
% Polyline
n 9817 2073 m
 9926 1951 l gs col62 s gr 
% Polyline
n 9833 2075 m
 9940 1951 l gs col62 s gr 
% Polyline
n 9849 2077 m
 9953 1952 l gs col62 s gr 
% Polyline
n 9866 2079 m
 9967 1953 l gs col62 s gr 
% Polyline
n 9881 2080 m
 9981 1954 l gs col62 s gr 
% Polyline
n 9898 2082 m
 9995 1954 l gs col62 s gr 
% Polyline
n 9914 2083 m
 10009 1955 l gs col62 s gr 
% Polyline
n 9930 2084 m
 10023 1956 l gs col62 s gr 
% Polyline
n 9946 2087 m
 10036 1957 l gs col62 s gr 
% Polyline
n 9543 2112 m
 9543 2133 l gs col62 s gr 
% Polyline
n 9560 2114 m
 9560 2135 l gs col62 s gr 
% Polyline
n 9578 2114 m
 9578 2137 l gs col62 s gr 
% Polyline
n 9595 2117 m
 9595 2138 l gs col62 s gr 
% Polyline
n 9613 2118 m
 9613 2140 l gs col62 s gr 
% Polyline
n 9630 2121 m
 9630 2142 l gs col62 s gr 
% Polyline
n 9648 2122 m
 9648 2144 l gs col62 s gr 
% Polyline
n 9665 2124 m
 9665 2146 l gs col62 s gr 
% Polyline
n 9683 2125 m
 9683 2146 l gs col62 s gr 
% Polyline
n 9700 2128 m
 9700 2149 l gs col62 s gr 
% Polyline
n 9718 2129 m
 9718 2151 l gs col62 s gr 
% Polyline
n 9735 2131 m
 9735 2152 l gs col62 s gr 
% Polyline
n 9753 2132 m
 9753 2154 l gs col62 s gr 
% Polyline
n 9770 2134 m
 9770 2156 l gs col62 s gr 
% Polyline
n 9788 2136 m
 9788 2158 l gs col62 s gr 
% Polyline
n 9805 2138 m
 9805 2159 l gs col62 s gr 
% Polyline
n 9823 2139 m
 9823 2161 l gs col62 s gr 
% Polyline
n 9840 2141 m
 9840 2162 l gs col62 s gr 
% Polyline
n 9858 2142 m
 9858 2165 l gs col62 s gr 
% Polyline
n 9893 2146 m
 9893 2168 l gs col62 s gr 
% Polyline
n 9910 2148 m
 9910 2170 l gs col62 s gr 
% Polyline
n 9928 2150 m
 9928 2172 l gs col62 s gr 
% Polyline
n 9945 2152 m
 9945 2173 l gs col62 s gr 
% Polyline
n 9963 2110 m
 9525 2066 l gs col62 s gr 
% Polyline
n 7725 1970 m
 8163 2013 l gs col62 s gr 
% Polyline
n 7741 1971 m
 7892 1862 l gs col62 s gr 
% Polyline
n 7758 1973 m
 7906 1863 l gs col62 s gr 
% Polyline
n 7773 1974 m
 7919 1863 l gs col62 s gr 
% Polyline
n 7790 1976 m
 7933 1864 l gs col62 s gr 
% Polyline
n 7806 1978 m
 7947 1865 l gs col62 s gr 
% Polyline
n 7822 1980 m
 7961 1866 l gs col62 s gr 
% Polyline
n 7838 1981 m
 7975 1867 l gs col62 s gr 
% Polyline
n 7855 1983 m
 7989 1867 l gs col62 s gr 
% Polyline
n 7871 1984 m
 8002 1869 l gs col62 s gr 
% Polyline
n 7887 1986 m
 8016 1869 l gs col62 s gr 
% Polyline
n 7903 1987 m
 8030 1870 l gs col62 s gr 
% Polyline
n 7919 1989 m
 8044 1870 l gs col62 s gr 
% Polyline
n 7936 1991 m
 8057 1871 l gs col62 s gr 
% Polyline
n 7952 1992 m
 8070 1873 l gs col62 s gr 
% Polyline
n 7968 1994 m
 8084 1873 l gs col62 s gr 
% Polyline
n 7985 1995 m
 8098 1874 l gs col62 s gr 
% Polyline
n 8000 1997 m
 8112 1874 l gs col62 s gr 
% Polyline
n 8017 1998 m
 8126 1876 l gs col62 s gr 
% Polyline
n 8033 2000 m
 8140 1876 l gs col62 s gr 
% Polyline
n 8049 2002 m
 8153 1877 l gs col62 s gr 
% Polyline
n 8066 2004 m
 8167 1878 l gs col62 s gr 
% Polyline
n 8081 2005 m
 8181 1879 l gs col62 s gr 
% Polyline
n 8098 2007 m
 8195 1879 l gs col62 s gr 
% Polyline
n 8114 2008 m
 8209 1880 l gs col62 s gr 
% Polyline
n 8130 2009 m
 8223 1881 l gs col62 s gr 
% Polyline
n 8146 2012 m
 8236 1882 l gs col62 s gr 
% Polyline
n 7743 2037 m
 7743 2058 l gs col62 s gr 
% Polyline
n 7760 2039 m
 7760 2060 l gs col62 s gr 
% Polyline
n 7778 2039 m
 7778 2062 l gs col62 s gr 
% Polyline
n 7795 2042 m
 7795 2063 l gs col62 s gr 
% Polyline
n 7813 2043 m
 7813 2065 l gs col62 s gr 
% Polyline
n 7830 2046 m
 7830 2067 l gs col62 s gr 
% Polyline
n 7848 2047 m
 7848 2069 l gs col62 s gr 
% Polyline
n 7865 2049 m
 7865 2071 l gs col62 s gr 
% Polyline
n 7883 2050 m
 7883 2071 l gs col62 s gr 
% Polyline
n 7900 2053 m
 7900 2074 l gs col62 s gr 
% Polyline
n 7918 2054 m
 7918 2076 l gs col62 s gr 
% Polyline
n 7935 2056 m
 7935 2077 l gs col62 s gr 
% Polyline
n 7953 2057 m
 7953 2079 l gs col62 s gr 
% Polyline
n 7970 2059 m
 7970 2081 l gs col62 s gr 
% Polyline
n 7988 2061 m
 7988 2083 l gs col62 s gr 
% Polyline
n 8005 2063 m
 8005 2084 l gs col62 s gr 
% Polyline
n 8023 2064 m
 8023 2086 l gs col62 s gr 
% Polyline
n 8040 2066 m
 8040 2087 l gs col62 s gr 
% Polyline
n 8058 2067 m
 8058 2090 l gs col62 s gr 
% Polyline
n 8075 2070 m
 8075 2091 l gs col62 s gr 
% Polyline
n 8093 2071 m
 8093 2093 l gs col62 s gr 
% Polyline
n 8110 2073 m
 8110 2095 l gs col62 s gr 
% Polyline
n 8128 2075 m
 8128 2097 l gs col62 s gr 
% Polyline
n 8145 2077 m
 8145 2098 l gs col62 s gr 
% Polyline
n 8163 2035 m
 7725 1991 l gs col62 s gr 
% Polyline
n 9875 2145 m
 9875 2166 l gs col62 s gr 
% Polyline
n 7275 3995 m
 7960 4064 l gs col62 s gr 
% Polyline
n 7301 3998 m
 7537 3826 l gs col62 s gr 
% Polyline
n 7326 4000 m
 7558 3827 l gs col62 s gr 
% Polyline
n 7350 4003 m
 7579 3829 l gs col62 s gr 
% Polyline
n 7376 4005 m
 7601 3830 l gs col62 s gr 
% Polyline
n 7401 4009 m
 7622 3831 l gs col62 s gr 
% Polyline
n 7427 4011 m
 7644 3832 l gs col62 s gr 
% Polyline
n 7451 4014 m
 7665 3835 l gs col62 s gr 
% Polyline
n 7478 4016 m
 7687 3835 l gs col62 s gr 
% Polyline
n 7504 4017 m
 7708 3837 l gs col62 s gr 
% Polyline
n 7528 4021 m
 7730 3837 l gs col62 s gr 
% Polyline
n 7554 4023 m
 7752 3838 l gs col62 s gr 
% Polyline
n 7579 4026 m
 7774 3840 l gs col62 s gr 
% Polyline
n 7605 4028 m
 7794 3841 l gs col62 s gr 
% Polyline
n 7630 4031 m
 7815 3843 l gs col62 s gr 
% Polyline
n 7656 4033 m
 7837 3844 l gs col62 s gr 
% Polyline
n 7681 4036 m
 7859 3846 l gs col62 s gr 
% Polyline
n 7706 4038 m
 7881 3846 l gs col62 s gr 
% Polyline
n 7731 4041 m
 7903 3848 l gs col62 s gr 
% Polyline
n 7757 4043 m
 7923 3848 l gs col62 s gr 
% Polyline
n 7782 4047 m
 7944 3851 l gs col62 s gr 
% Polyline
n 7808 4049 m
 7966 3852 l gs col62 s gr 
% Polyline
n 7832 4050 m
 7988 3853 l gs col62 s gr 
% Polyline
n 7858 4054 m
 8010 3853 l gs col62 s gr 
% Polyline
n 7883 4056 m
 8032 3855 l gs col62 s gr 
% Polyline
n 7909 4058 m
 8053 3857 l gs col62 s gr 
% Polyline
n 7933 4061 m
 8074 3858 l gs col62 s gr 
% Polyline
n 7303 4101 m
 7303 4134 l gs col62 s gr 
% Polyline
n 7330 4104 m
 7330 4137 l gs col62 s gr 
% Polyline
n 7358 4105 m
 7358 4140 l gs col62 s gr 
% Polyline
n 7384 4109 m
 7384 4142 l gs col62 s gr 
% Polyline
n 7412 4111 m
 7412 4145 l gs col62 s gr 
% Polyline
n 7439 4115 m
 7439 4148 l gs col62 s gr 
% Polyline
n 7467 4117 m
 7467 4151 l gs col62 s gr 
% Polyline
n 7494 4120 m
 7494 4154 l gs col62 s gr 
% Polyline
n 7522 4122 m
 7522 4155 l gs col62 s gr 
% Polyline
n 7549 4126 m
 7549 4159 l gs col62 s gr 
% Polyline
n 7577 4128 m
 7577 4162 l gs col62 s gr 
% Polyline
n 7603 4131 m
 7603 4165 l gs col62 s gr 
% Polyline
n 7631 4133 m
 7631 4167 l gs col62 s gr 
% Polyline
n 7658 4135 m
 7658 4170 l gs col62 s gr 
% Polyline
n 7686 4139 m
 7686 4173 l gs col62 s gr 
% Polyline
n 7713 4142 m
 7713 4176 l gs col62 s gr 
% Polyline
n 7741 4144 m
 7741 4178 l gs col62 s gr 
% Polyline
n 7768 4146 m
 7768 4179 l gs col62 s gr 
% Polyline
n 7796 4149 m
 7796 4184 l gs col62 s gr 
% Polyline
n 7822 4153 m
 7822 4187 l gs col62 s gr 
% Polyline
n 7850 4155 m
 7850 4189 l gs col62 s gr 
% Polyline
n 7877 4157 m
 7877 4191 l gs col62 s gr 
% Polyline
n 7905 4161 m
 7905 4195 l gs col62 s gr 
% Polyline
n 7932 4163 m
 7932 4196 l gs col62 s gr 
% Polyline
n 7960 4098 m
 7275 4030 l gs col62 s gr 
% Polyline
n 9979 3995 m
 10664 4064 l gs col62 s gr 
% Polyline
n 10005 3998 m
 10241 3826 l gs col62 s gr 
% here ends figure;
% 
% here starts figure with depth 50
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
1050 1765 tr
15.789474 -15.769231 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
/Helvetica-Bold ff 180.00 scf sf
9000 3975 m
gs 1 -1 sc (. . .) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
2925 1800 tr
15.789474 -15.769231 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
2025 2343 tr
21.710526 -21.692308 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
/Helvetica-Bold ff 165.00 scf sf
9000 4275 m
gs 1 -1 sc (harpoon) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 165.00 scf sf
9000 1950 m
gs 1 -1 sc (harpoon) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
9000 2100 m
gs 1 -1 sc (. . .) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
8550 2343 tr
21.710526 -21.692308 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
1650 1275 tr
5.921053 -5.769231 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
/Helvetica-Bold ff 150.00 scf sf
4500 3150 m
gs 1 -1 sc (processing) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
4500 2700 m
gs 1 -1 sc (flow record) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
4500 2925 m
gs 1 -1 sc (capture and) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
8977 960 m
gs 1 -1 sc (emulation) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
8977 1185 m
gs 1 -1 sc (testbed) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
2400 975 m
gs 1 -1 sc (operational) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
2400 1200 m
gs 1 -1 sc (network) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
2700 1394 tr
6.973684 -6.961538 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
% here ends figure;
% 
% here starts figure with depth 45
/Helvetica-Bold ff 150.00 scf sf
6750 2775 m
gs 1 -1 sc (self) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
15.000 slw
n 8835 2874 m
 7635 3822 l gs col0 s gr 
% Polyline
7.500 slw
n 7947 2094 m
 8715 2394 l gs col0 s gr 
% Polyline
n 9195 2418 m
 9795 2178 l gs col0 s gr 
% Polyline
n 2700 2400 m
 3255 2200 l gs col0 s gr 
% Polyline
n 1350 1800 m
 1725 1425 l gs col0 s gr 
% Polyline
n 1350 2175 m
 2100 2475 l gs col0 s gr 
% Polyline
 [15 45] 45 sd
n 2850 1425 m
 3450 1200 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 2775 1425 m
 2475 1275 l gs col0 s gr  [] 0 sd
% Polyline
 [15 60] 60 sd
n 1800 1275 m
 2025 1200 l gs col0 s gr  [] 0 sd
% Polyline
 [15 60] 60 sd
n 1725 1275 m
 1275 1125 l gs col0 s gr  [] 0 sd
% Polyline
n 3225 1815 m
 2850 1575 l gs col0 s gr 
% Polyline
15.000 slw
n 2310 2874 m
 1110 3822 l gs col0 s gr 
% Polyline
n 2598 2874 m
 3870 3822 l gs col0 s gr 
% Polyline
7.500 slw
n 3000 1875 m
 1800 1407 l gs col0 s gr 
/Helvetica-Bold ff 150.00 scf sf
6750 3000 m
gs 1 -1 sc (configuration) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
15.000 slw
n 9123 2874 m
 10395 3822 l gs col0 s gr 
% here ends figure;
$F2psEnd
rs
showpage
