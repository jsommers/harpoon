%!PS-Adobe-2.0 EPSF-2.0
%%Title: impl_arch.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Wed May  5 16:21:16 2004
%%For: jes@coredump.cs.wisc.edu (joel sommers)
%%BoundingBox: 0 0 375 191
%%Magnification: 1.0000
%%EndComments
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.883 0.883 0.930 srgb} bind def
/col33 {0.578 0.578 0.602 srgb} bind def
/col34 {0.855 0.855 0.855 srgb} bind def
/col35 {0.629 0.629 0.715 srgb} bind def
/col36 {0.609 0.000 0.000 srgb} bind def
/col37 {0.926 0.926 0.926 srgb} bind def
/col38 {0.875 0.875 0.875 srgb} bind def
/col39 {0.523 0.672 0.996 srgb} bind def
/col40 {0.438 0.438 0.996 srgb} bind def
/col41 {0.523 0.508 0.523 srgb} bind def
/col42 {0.777 0.762 0.777 srgb} bind def
/col43 {0.902 0.887 0.902 srgb} bind def
/col44 {0.500 0.500 0.500 srgb} bind def
/col45 {0.750 0.750 0.750 srgb} bind def
/col46 {0.555 0.555 0.555 srgb} bind def
/col47 {0.555 0.559 0.555 srgb} bind def
/col48 {0.266 0.266 0.266 srgb} bind def
/col49 {0.523 0.523 0.523 srgb} bind def
/col50 {0.777 0.777 0.777 srgb} bind def
/col51 {0.902 0.902 0.902 srgb} bind def
/col52 {0.965 0.965 0.965 srgb} bind def
/col53 {0.617 0.617 0.617 srgb} bind def
/col54 {0.441 0.457 0.441 srgb} bind def
/col55 {0.254 0.270 0.254 srgb} bind def
/col56 {0.457 0.457 0.457 srgb} bind def
/col57 {0.254 0.254 0.254 srgb} bind def
/col58 {0.934 0.980 0.996 srgb} bind def
/col59 {0.250 0.250 0.250 srgb} bind def
/col60 {0.949 0.949 0.949 srgb} bind def
/col61 {0.664 0.664 0.664 srgb} bind def
/col62 {0.332 0.332 0.332 srgb} bind def
/col63 {0.840 0.824 0.840 srgb} bind def
/col64 {0.680 0.664 0.680 srgb} bind def
/col65 {0.758 0.758 0.758 srgb} bind def
/col66 {0.188 0.188 0.188 srgb} bind def
/col67 {0.316 0.332 0.316 srgb} bind def
/col68 {0.965 0.949 0.965 srgb} bind def
/col69 {0.398 0.398 0.398 srgb} bind def
/col70 {0.441 0.441 0.441 srgb} bind def
/col71 {0.863 0.613 0.574 srgb} bind def
/col72 {0.941 0.922 0.875 srgb} bind def
/col73 {0.762 0.762 0.762 srgb} bind def
/col74 {0.883 0.781 0.656 srgb} bind def
/col75 {0.879 0.879 0.879 srgb} bind def
/col76 {0.820 0.820 0.820 srgb} bind def
/col77 {0.852 0.477 0.102 srgb} bind def
/col78 {0.941 0.891 0.102 srgb} bind def
/col79 {0.531 0.488 0.758 srgb} bind def
/col80 {0.836 0.836 0.836 srgb} bind def
/col81 {0.547 0.547 0.645 srgb} bind def
/col82 {0.289 0.289 0.289 srgb} bind def
/col83 {0.547 0.418 0.418 srgb} bind def
/col84 {0.352 0.352 0.352 srgb} bind def
/col85 {0.387 0.387 0.387 srgb} bind def
/col86 {0.715 0.605 0.449 srgb} bind def
/col87 {0.254 0.574 0.996 srgb} bind def
/col88 {0.746 0.438 0.230 srgb} bind def
/col89 {0.855 0.465 0.000 srgb} bind def
/col90 {0.852 0.719 0.000 srgb} bind def
/col91 {0.000 0.391 0.000 srgb} bind def
/col92 {0.352 0.418 0.230 srgb} bind def
/col93 {0.824 0.824 0.824 srgb} bind def
/col94 {0.555 0.555 0.641 srgb} bind def
/col95 {0.949 0.723 0.363 srgb} bind def
/col96 {0.535 0.598 0.418 srgb} bind def
/col97 {0.391 0.391 0.391 srgb} bind def
/col98 {0.715 0.898 0.996 srgb} bind def
/col99 {0.523 0.750 0.922 srgb} bind def
/col100 {0.738 0.738 0.738 srgb} bind def
/col101 {0.824 0.582 0.320 srgb} bind def
/col102 {0.594 0.820 0.992 srgb} bind def
/col103 {0.547 0.609 0.418 srgb} bind def
/col104 {0.965 0.418 0.000 srgb} bind def
/col105 {0.352 0.418 0.223 srgb} bind def
/col106 {0.547 0.609 0.418 srgb} bind def
/col107 {0.547 0.609 0.480 srgb} bind def
/col108 {0.094 0.289 0.094 srgb} bind def
/col109 {0.676 0.676 0.676 srgb} bind def
/col110 {0.965 0.738 0.352 srgb} bind def
/col111 {0.387 0.418 0.609 srgb} bind def
/col112 {0.867 0.000 0.000 srgb} bind def
/col113 {0.676 0.676 0.676 srgb} bind def
/col114 {0.965 0.738 0.352 srgb} bind def
/col115 {0.676 0.676 0.676 srgb} bind def
/col116 {0.965 0.738 0.352 srgb} bind def
/col117 {0.387 0.418 0.609 srgb} bind def
/col118 {0.320 0.418 0.160 srgb} bind def
/col119 {0.578 0.578 0.578 srgb} bind def
/col120 {0.000 0.387 0.000 srgb} bind def
/col121 {0.000 0.387 0.289 srgb} bind def
/col122 {0.480 0.516 0.289 srgb} bind def
/col123 {0.902 0.738 0.480 srgb} bind def
/col124 {0.645 0.707 0.773 srgb} bind def
/col125 {0.418 0.418 0.578 srgb} bind def
/col126 {0.516 0.418 0.418 srgb} bind def
/col127 {0.320 0.609 0.289 srgb} bind def
/col128 {0.836 0.902 0.902 srgb} bind def
/col129 {0.320 0.387 0.387 srgb} bind def
/col130 {0.094 0.418 0.289 srgb} bind def
/col131 {0.609 0.645 0.707 srgb} bind def
/col132 {0.996 0.578 0.000 srgb} bind def
/col133 {0.996 0.578 0.000 srgb} bind def
/col134 {0.000 0.387 0.289 srgb} bind def
/col135 {0.480 0.516 0.289 srgb} bind def
/col136 {0.387 0.449 0.480 srgb} bind def
/col137 {0.902 0.738 0.480 srgb} bind def
/col138 {0.094 0.289 0.094 srgb} bind def
/col139 {0.965 0.738 0.352 srgb} bind def
/col140 {0.867 0.867 0.867 srgb} bind def
/col141 {0.949 0.930 0.824 srgb} bind def
/col142 {0.957 0.680 0.363 srgb} bind def
/col143 {0.582 0.805 0.598 srgb} bind def
/col144 {0.707 0.082 0.488 srgb} bind def
/col145 {0.930 0.930 0.930 srgb} bind def
/col146 {0.516 0.516 0.516 srgb} bind def
/col147 {0.480 0.480 0.480 srgb} bind def
/col148 {0.000 0.352 0.000 srgb} bind def
/col149 {0.902 0.449 0.449 srgb} bind def
/col150 {0.996 0.793 0.191 srgb} bind def
/col151 {0.160 0.473 0.289 srgb} bind def
/col152 {0.867 0.156 0.129 srgb} bind def
/col153 {0.129 0.348 0.773 srgb} bind def
/col154 {0.969 0.969 0.969 srgb} bind def
/col155 {0.898 0.898 0.898 srgb} bind def
/col156 {0.129 0.516 0.352 srgb} bind def
/col157 {0.547 0.547 0.547 srgb} bind def
/col158 {0.258 0.258 0.258 srgb} bind def
/col159 {0.547 0.547 0.547 srgb} bind def
/col160 {0.258 0.258 0.258 srgb} bind def
/col161 {0.547 0.547 0.547 srgb} bind def
/col162 {0.258 0.258 0.258 srgb} bind def
/col163 {0.547 0.547 0.547 srgb} bind def
/col164 {0.258 0.258 0.258 srgb} bind def
/col165 {0.547 0.547 0.547 srgb} bind def
/col166 {0.258 0.258 0.258 srgb} bind def
/col167 {0.547 0.547 0.547 srgb} bind def
/col168 {0.258 0.258 0.258 srgb} bind def
/col169 {0.773 0.715 0.590 srgb} bind def
/col170 {0.934 0.969 0.996 srgb} bind def
/col171 {0.859 0.793 0.648 srgb} bind def
/col172 {0.840 0.840 0.840 srgb} bind def
/col173 {0.680 0.680 0.680 srgb} bind def
/col174 {0.742 0.742 0.742 srgb} bind def
/col175 {0.316 0.316 0.316 srgb} bind def
/col176 {0.000 0.000 0.285 srgb} bind def
/col177 {0.473 0.473 0.473 srgb} bind def
/col178 {0.188 0.203 0.188 srgb} bind def
/col179 {0.777 0.711 0.586 srgb} bind def

end
save
newpath 0 191 moveto 0 0 lineto 375 0 lineto 375 191 lineto closepath clip newpath
-80.0 270.7 translate
1 -1 scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 150
% Polyline
7.500 slw
n 2880 2775 m 2775 2775 2775 4095 105 arcto 4 {pop} repeat
  2775 4200 5445 4200 105 arcto 4 {pop} repeat
  5550 4200 5550 2880 105 arcto 4 {pop} repeat
  5550 2775 2880 2775 105 arcto 4 {pop} repeat
 cp gs 0.75 setgray ef gr gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 110
% Polyline
7.500 slw
n 7018 3111 m 7018 2974 l 6881 2974 l
 6881 2871 l gs col0 s gr 
% Polyline
n 7052 3111 m 7052 2974 l 7189 2974 l
 7189 2837 l gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 102
% Polyline
1 slj
7.500 slw
n 6765 2731 m 6675 2795 l 6675 2846 l 6932 2871 l 6932 2820 l 6983 2743 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7211 2731 m 7121 2795 l 7121 2846 l 7378 2871 l 7378 2820 l 7429 2743 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 6469 3750 m 6229 3920 l 6229 4057 l 6914 4125 l 6914 3989 l 7050 3784 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7299 3729 m 7189 3806 l 7189 3869 l 7502 3900 l 7502 3838 l 7564 3744 l

 cp gs col61 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7346 3838 m 7439 3847 l 7439 3862 l 7346 3853 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 6804 2820 m 6881 2828 l 6881 2841 l 6804 2833 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 6263 3992 m 6297 3996 l 6297 4012 l 6263 4009 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 6688 2822 m 6701 2823 l 6701 2829 l 6688 2828 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 7133 2822 m 7146 2823 l 7146 2829 l 7133 2828 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 6571 3989 m 6776 4009 l 6776 4043 l 6571 4023 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 7249 2820 m 7326 2828 l 7326 2841 l 7249 2833 l
 cp gs 0.00 setgray ef gr gs col0 s gr 
% Polyline
n 7204 3839 m 7220 3841 l 7220 3849 l 7204 3847 l
 cp gs 0.00 setgray ef gr gs col62 s gr 
% Polyline
n 7339 2829 m 7359 2831 l 7359 2837 l 7339 2836 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 4830 1500 m 4725 1500 4725 2745 105 arcto 4 {pop} repeat
  4725 2850 5295 2850 105 arcto 4 {pop} repeat
  5400 2850 5400 1605 105 arcto 4 {pop} repeat
  5400 1500 4830 1500 105 arcto 4 {pop} repeat
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 6914 4091 m
 6229 4023 l gs col62 s gr 
% Polyline
n 7127 2809 m 7153 2811 l 7153 2823 l 7127 2820 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 7502 3885 m
 7189 3853 l gs col62 s gr 
% Polyline
n 6879 4087 m
 6879 4019 l gs col62 s gr 
% Polyline
n 7486 3883 m
 7486 3851 l gs col62 s gr 
% Polyline
n 7299 3865 m
 7299 3833 l gs col62 s gr 
% Polyline
n 7486 3867 m
 7299 3849 l gs col62 s gr 
% Polyline
n 7197 3823 m 7229 3826 l 7229 3842 l 7197 3838 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 7455 3849 m 7479 3851 l 7479 3858 l 7455 3856 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7470 3881 m
 7470 3866 l gs col62 s gr 
% Polyline
n 7455 3879 m
 7455 3865 l gs col62 s gr 
% Polyline
n 6469 4047 m
 6469 3979 l gs col62 s gr 
% Polyline
1 slj
n 6932 2820 m 6932 2871 l 6983 2782 l 6983 2743 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 6879 4053 m
 6469 4012 l gs col62 s gr 
% Polyline
n 6246 3957 m 6315 3963 l 6315 3997 l 6246 3990 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 6810 4012 m 6863 4018 l 6863 4034 l 6810 4029 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 6844 4084 m
 6844 4051 l gs col62 s gr 
% Polyline
n 6810 4080 m
 6810 4047 l gs col62 s gr 
% Polyline
n 6932 2859 m
 6675 2833 l gs col62 s gr 
% Polyline
n 6919 2857 m
 6919 2831 l gs col62 s gr 
% Polyline
n 6765 2842 m
 6765 2817 l gs col62 s gr 
% Polyline
n 6919 2845 m
 6765 2829 l gs col62 s gr 
% Polyline
n 6681 2809 m 6708 2811 l 6708 2823 l 6681 2820 l
 cp gs col4 1.00 shd ef gr gs col4 s gr 
% Polyline
n 7378 2859 m
 7121 2833 l gs col62 s gr 
% Polyline
n 6893 2829 m 6913 2831 l 6913 2837 l 6893 2836 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7364 2857 m
 7364 2831 l gs col62 s gr 
% Polyline
n 6906 2856 m
 6906 2843 l gs col62 s gr 
% Polyline
n 7211 2842 m
 7211 2817 l gs col62 s gr 
% Polyline
n 6893 2854 m
 6893 2842 l gs col62 s gr 
% Polyline
1 slj
n 7378 2820 m 7378 2871 l 7429 2782 l 7429 2743 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
n 7502 3838 m 7502 3900 l 7564 3791 l 7564 3744 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 7364 2845 m
 7211 2829 l gs col62 s gr 
% Polyline
n 4290 3468 m 4200 3468 4200 3978 90 arcto 4 {pop} repeat
  4200 4068 5310 4068 90 arcto 4 {pop} repeat
  5400 4068 5400 3558 90 arcto 4 {pop} repeat
  5400 3468 4290 3468 90 arcto 4 {pop} repeat
 cp gs 0.95 setgray ef gr gs col0 s gr 
% Polyline
1 slj
n 6914 3989 m 6914 4125 l 7050 3886 l 7050 3784 l
 cp gs col62 1.00 shd ef gr gs col62 s gr 
% Polyline
0 slj
n 2955 2925 m 2850 2925 2850 3270 105 arcto 4 {pop} repeat
  2850 3375 5370 3375 105 arcto 4 {pop} repeat
  5475 3375 5475 3030 105 arcto 4 {pop} repeat
  5475 2925 2955 2925 105 arcto 4 {pop} repeat
 cp gs 0.95 setgray ef gr gs col0 s gr 
% Polyline
15.000 slw
n 6778 3729 m 6778 3660 l 7018 3660 l
 7018 3317 l gs col0 s gr 
% Polyline
7.500 slw
n 3105 3450 m 3000 3450 3000 3975 105 arcto 4 {pop} repeat
  3000 4080 3945 4080 105 arcto 4 {pop} repeat
  4050 4080 4050 3555 105 arcto 4 {pop} repeat
  4050 3450 3105 3450 105 arcto 4 {pop} repeat
 cp gs 0.95 setgray ef gr gs col0 s gr 
% Polyline
n 3030 1500 m 2925 1500 2925 2745 105 arcto 4 {pop} repeat
  2925 2850 3495 2850 105 arcto 4 {pop} repeat
  3600 2850 3600 1605 105 arcto 4 {pop} repeat
  3600 1500 3030 1500 105 arcto 4 {pop} repeat
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
15.000 slw
n 7326 3729 m 7326 3660 l 7086 3660 l
 7086 3317 l gs col0 s gr 
% Polyline
7.500 slw
n 7339 2854 m
 7339 2842 l gs col62 s gr 
% Polyline
n 3780 1500 m 3675 1500 3675 2745 105 arcto 4 {pop} repeat
  3675 2850 4245 2850 105 arcto 4 {pop} repeat
  4350 2850 4350 1605 105 arcto 4 {pop} repeat
  4350 1500 3780 1500 105 arcto 4 {pop} repeat
 cp gs 0.90 setgray ef gr gs col0 s gr 
% Polyline
n 7352 2856 m
 7352 2843 l gs col62 s gr 
% Polyline
n 7259 3814 m
 7357 3732 l gs col62 s gr 
% Polyline
n 7270 3815 m
 7367 3733 l gs col62 s gr 
% Polyline
n 7282 3816 m
 7378 3733 l gs col62 s gr 
% Polyline
n 7293 3817 m
 7387 3734 l gs col62 s gr 
% Polyline
n 7304 3818 m
 7397 3734 l gs col62 s gr 
% Polyline
n 7316 3819 m
 7407 3734 l gs col62 s gr 
% Polyline
n 7328 3821 m
 7417 3735 l gs col62 s gr 
% Polyline
n 7340 3821 m
 7426 3736 l gs col62 s gr 
% Polyline
n 7351 3823 m
 7436 3737 l gs col62 s gr 
% Polyline
n 7363 3823 m
 7446 3737 l gs col62 s gr 
% Polyline
n 7375 3825 m
 7456 3738 l gs col62 s gr 
% Polyline
n 7386 3826 m
 7466 3738 l gs col62 s gr 
% Polyline
n 7398 3828 m
 7476 3739 l gs col62 s gr 
% Polyline
n 7410 3828 m
 7485 3739 l gs col62 s gr 
% Polyline
n 7421 3830 m
 7495 3741 l gs col62 s gr 
% Polyline
n 7432 3831 m
 7505 3741 l gs col62 s gr 
% Polyline
n 7444 3831 m
 7515 3741 l gs col62 s gr 
% Polyline
n 7455 3833 m
 7525 3741 l gs col62 s gr 
% Polyline
n 7467 3834 m
 7535 3742 l gs col62 s gr 
% Polyline
n 7479 3835 m
 7544 3743 l gs col62 s gr 
% Polyline
n 7489 3837 m
 7554 3743 l gs col62 s gr 
% Polyline
n 7202 3855 m
 7202 3870 l gs col62 s gr 
% Polyline
n 7214 3856 m
 7214 3871 l gs col62 s gr 
% Polyline
n 7227 3857 m
 7227 3873 l gs col62 s gr 
% Polyline
n 7239 3858 m
 7239 3874 l gs col62 s gr 
% Polyline
n 7252 3860 m
 7252 3875 l gs col62 s gr 
% Polyline
n 7264 3861 m
 7264 3876 l gs col62 s gr 
% Polyline
n 7277 3862 m
 7277 3878 l gs col62 s gr 
% Polyline
n 7289 3863 m
 7289 3879 l gs col62 s gr 
% Polyline
n 7302 3865 m
 7302 3879 l gs col62 s gr 
% Polyline
n 7314 3866 m
 7314 3881 l gs col62 s gr 
% Polyline
n 7327 3867 m
 7327 3883 l gs col62 s gr 
% Polyline
n 7339 3869 m
 7339 3884 l gs col62 s gr 
% Polyline
n 7352 3869 m
 7352 3885 l gs col62 s gr 
% Polyline
n 7364 3870 m
 7364 3886 l gs col62 s gr 
% Polyline
n 7377 3872 m
 7377 3887 l gs col62 s gr 
% Polyline
n 7389 3874 m
 7389 3889 l gs col62 s gr 
% Polyline
n 7402 3874 m
 7402 3890 l gs col62 s gr 
% Polyline
n 7414 3876 m
 7414 3890 l gs col62 s gr 
% Polyline
n 7427 3876 m
 7427 3892 l gs col62 s gr 
% Polyline
n 7439 3878 m
 7439 3894 l gs col62 s gr 
% Polyline
n 7452 3879 m
 7452 3895 l gs col62 s gr 
% Polyline
n 7464 3881 m
 7464 3896 l gs col62 s gr 
% Polyline
n 7477 3882 m
 7477 3898 l gs col62 s gr 
% Polyline
n 7489 3883 m
 7489 3898 l gs col62 s gr 
% Polyline
n 7502 3853 m
 7189 3822 l gs col62 s gr 
% Polyline
n 6675 2795 m
 6932 2820 l gs col62 s gr 
% Polyline
n 6685 2795 m
 6773 2731 l gs col62 s gr 
% Polyline
n 6694 2797 m
 6781 2731 l gs col62 s gr 
% Polyline
n 6704 2797 m
 6789 2732 l gs col62 s gr 
% Polyline
n 6713 2798 m
 6797 2733 l gs col62 s gr 
% Polyline
n 6722 2799 m
 6805 2733 l gs col62 s gr 
% Polyline
n 6732 2801 m
 6813 2733 l gs col62 s gr 
% Polyline
n 6741 2802 m
 6822 2734 l gs col62 s gr 
% Polyline
n 6752 2802 m
 6830 2734 l gs col62 s gr 
% Polyline
n 6761 2803 m
 6838 2735 l gs col62 s gr 
% Polyline
n 6770 2804 m
 6846 2735 l gs col62 s gr 
% Polyline
n 6779 2805 m
 6854 2735 l gs col62 s gr 
% Polyline
n 6789 2806 m
 6862 2736 l gs col62 s gr 
% Polyline
n 6799 2807 m
 6870 2737 l gs col62 s gr 
% Polyline
n 6809 2808 m
 6878 2738 l gs col62 s gr 
% Polyline
n 6818 2809 m
 6886 2738 l gs col62 s gr 
% Polyline
n 6827 2810 m
 6894 2738 l gs col62 s gr 
% Polyline
n 6837 2811 m
 6902 2738 l gs col62 s gr 
% Polyline
n 6846 2811 m
 6911 2740 l gs col62 s gr 
% Polyline
n 6856 2813 m
 6918 2740 l gs col62 s gr 
% Polyline
n 6866 2814 m
 6926 2740 l gs col62 s gr 
% Polyline
n 6875 2815 m
 6934 2740 l gs col62 s gr 
% Polyline
n 6884 2815 m
 6943 2741 l gs col62 s gr 
% Polyline
n 6894 2817 m
 6951 2741 l gs col62 s gr 
% Polyline
n 6903 2818 m
 6959 2742 l gs col62 s gr 
% Polyline
n 6913 2818 m
 6967 2742 l gs col62 s gr 
% Polyline
n 6922 2820 m
 6975 2743 l gs col62 s gr 
% Polyline
n 6685 2834 m
 6685 2847 l gs col62 s gr 
% Polyline
n 6696 2836 m
 6696 2847 l gs col62 s gr 
% Polyline
n 6706 2836 m
 6706 2849 l gs col62 s gr 
% Polyline
n 6716 2837 m
 6716 2850 l gs col62 s gr 
% Polyline
n 6726 2838 m
 6726 2851 l gs col62 s gr 
% Polyline
n 6737 2839 m
 6737 2852 l gs col62 s gr 
% Polyline
n 6747 2841 m
 6747 2853 l gs col62 s gr 
% Polyline
n 6757 2841 m
 6757 2854 l gs col62 s gr 
% Polyline
n 6768 2842 m
 6768 2854 l gs col62 s gr 
% Polyline
n 6778 2843 m
 6778 2856 l gs col62 s gr 
% Polyline
n 6788 2845 m
 6788 2857 l gs col62 s gr 
% Polyline
n 6798 2845 m
 6798 2858 l gs col62 s gr 
% Polyline
n 6809 2846 m
 6809 2859 l gs col62 s gr 
% Polyline
n 6819 2847 m
 6819 2860 l gs col62 s gr 
% Polyline
n 6829 2849 m
 6829 2861 l gs col62 s gr 
% Polyline
n 6839 2850 m
 6839 2862 l gs col62 s gr 
% Polyline
n 6850 2850 m
 6850 2863 l gs col62 s gr 
% Polyline
n 6860 2852 m
 6860 2863 l gs col62 s gr 
% Polyline
n 6870 2852 m
 6870 2866 l gs col62 s gr 
% Polyline
n 6881 2854 m
 6881 2866 l gs col62 s gr 
% Polyline
n 6891 2854 m
 6891 2868 l gs col62 s gr 
% Polyline
n 6901 2855 m
 6901 2868 l gs col62 s gr 
% Polyline
n 6911 2857 m
 6911 2870 l gs col62 s gr 
% Polyline
n 6922 2858 m
 6922 2870 l gs col62 s gr 
% Polyline
n 6932 2833 m
 6675 2807 l gs col62 s gr 
% Polyline
n 7121 2795 m
 7378 2820 l gs col62 s gr 
% Polyline
n 7130 2795 m
 7219 2731 l gs col62 s gr 
% Polyline
n 7140 2797 m
 7227 2731 l gs col62 s gr 
% Polyline
n 7149 2797 m
 7235 2732 l gs col62 s gr 
% Polyline
n 7158 2798 m
 7243 2733 l gs col62 s gr 
% Polyline
n 7168 2799 m
 7251 2733 l gs col62 s gr 
% Polyline
n 7178 2801 m
 7259 2733 l gs col62 s gr 
% Polyline
n 7187 2802 m
 7267 2734 l gs col62 s gr 
% Polyline
n 7197 2802 m
 7275 2734 l gs col62 s gr 
% Polyline
n 7215 2804 m
 7291 2735 l gs col62 s gr 
% Polyline
n 7225 2805 m
 7300 2735 l gs col62 s gr 
% Polyline
n 7235 2806 m
 7308 2736 l gs col62 s gr 
% Polyline
n 7245 2807 m
 7316 2737 l gs col62 s gr 
% Polyline
n 7254 2808 m
 7323 2738 l gs col62 s gr 
% Polyline
n 7263 2809 m
 7332 2738 l gs col62 s gr 
% Polyline
n 7273 2810 m
 7340 2738 l gs col62 s gr 
% Polyline
n 7282 2811 m
 7348 2738 l gs col62 s gr 
% Polyline
n 7292 2811 m
 7356 2740 l gs col62 s gr 
% Polyline
n 7302 2813 m
 7364 2740 l gs col62 s gr 
% Polyline
n 7311 2814 m
 7372 2740 l gs col62 s gr 
% Polyline
n 7320 2815 m
 7380 2740 l gs col62 s gr 
% Polyline
n 7330 2815 m
 7388 2741 l gs col62 s gr 
% Polyline
n 7339 2817 m
 7396 2741 l gs col62 s gr 
% Polyline
n 7349 2818 m
 7405 2742 l gs col62 s gr 
% Polyline
n 7359 2818 m
 7413 2742 l gs col62 s gr 
% Polyline
n 7368 2820 m
 7421 2743 l gs col62 s gr 
% Polyline
n 7131 2834 m
 7131 2847 l gs col62 s gr 
% Polyline
n 7141 2836 m
 7141 2847 l gs col62 s gr 
% Polyline
n 7151 2836 m
 7151 2849 l gs col62 s gr 
% Polyline
n 7162 2837 m
 7162 2850 l gs col62 s gr 
% Polyline
n 7172 2838 m
 7172 2851 l gs col62 s gr 
% Polyline
n 7182 2839 m
 7182 2852 l gs col62 s gr 
% Polyline
n 7192 2841 m
 7192 2853 l gs col62 s gr 
% Polyline
n 7203 2841 m
 7203 2854 l gs col62 s gr 
% Polyline
n 7213 2842 m
 7213 2854 l gs col62 s gr 
% Polyline
n 7223 2843 m
 7223 2856 l gs col62 s gr 
% Polyline
n 7234 2845 m
 7234 2857 l gs col62 s gr 
% Polyline
n 7244 2845 m
 7244 2858 l gs col62 s gr 
% Polyline
n 7254 2846 m
 7254 2859 l gs col62 s gr 
% Polyline
n 7264 2847 m
 7264 2860 l gs col62 s gr 
% Polyline
n 7275 2849 m
 7275 2861 l gs col62 s gr 
% Polyline
n 7285 2850 m
 7285 2862 l gs col62 s gr 
% Polyline
n 7295 2850 m
 7295 2863 l gs col62 s gr 
% Polyline
n 7306 2852 m
 7306 2863 l gs col62 s gr 
% Polyline
n 7316 2852 m
 7316 2866 l gs col62 s gr 
% Polyline
n 7326 2854 m
 7326 2866 l gs col62 s gr 
% Polyline
n 7336 2854 m
 7336 2868 l gs col62 s gr 
% Polyline
n 7347 2855 m
 7347 2868 l gs col62 s gr 
% Polyline
n 7357 2857 m
 7357 2870 l gs col62 s gr 
% Polyline
n 7367 2858 m
 7367 2870 l gs col62 s gr 
% Polyline
n 7378 2833 m
 7121 2807 l gs col62 s gr 
% Polyline
n 7206 2803 m
 7283 2735 l gs col62 s gr 
% Polyline
n 6229 3920 m
 6914 3989 l gs col62 s gr 
% Polyline
n 6255 3923 m
 6491 3751 l gs col62 s gr 
% Polyline
n 6280 3925 m
 6512 3752 l gs col62 s gr 
% Polyline
n 6304 3928 m
 6533 3754 l gs col62 s gr 
% Polyline
n 6330 3930 m
 6555 3755 l gs col62 s gr 
% Polyline
n 6355 3934 m
 6576 3756 l gs col62 s gr 
% Polyline
n 6381 3936 m
 6598 3757 l gs col62 s gr 
% Polyline
n 6405 3939 m
 6619 3760 l gs col62 s gr 
% Polyline
n 6432 3941 m
 6641 3760 l gs col62 s gr 
% Polyline
n 6458 3942 m
 6662 3762 l gs col62 s gr 
% Polyline
n 6482 3946 m
 6684 3762 l gs col62 s gr 
% Polyline
n 6508 3948 m
 6706 3763 l gs col62 s gr 
% Polyline
n 6533 3951 m
 6728 3765 l gs col62 s gr 
% Polyline
n 6559 3953 m
 6748 3766 l gs col62 s gr 
% Polyline
n 6584 3956 m
 6769 3768 l gs col62 s gr 
% Polyline
n 6610 3958 m
 6791 3769 l gs col62 s gr 
% Polyline
n 6635 3961 m
 6813 3771 l gs col62 s gr 
% Polyline
n 6660 3963 m
 6835 3771 l gs col62 s gr 
% Polyline
n 6685 3966 m
 6857 3773 l gs col62 s gr 
% Polyline
n 6711 3968 m
 6877 3773 l gs col62 s gr 
% Polyline
n 6736 3972 m
 6898 3776 l gs col62 s gr 
% Polyline
n 6762 3974 m
 6920 3777 l gs col62 s gr 
% Polyline
n 6786 3975 m
 6942 3778 l gs col62 s gr 
% Polyline
n 6812 3979 m
 6964 3778 l gs col62 s gr 
% Polyline
n 6837 3981 m
 6986 3780 l gs col62 s gr 
% Polyline
n 6863 3983 m
 7007 3782 l gs col62 s gr 
% Polyline
n 6887 3986 m
 7028 3783 l gs col62 s gr 
% Polyline
n 6257 4026 m
 6257 4059 l gs col62 s gr 
% Polyline
n 6284 4029 m
 6284 4062 l gs col62 s gr 
% Polyline
n 6312 4030 m
 6312 4065 l gs col62 s gr 
% Polyline
n 6338 4034 m
 6338 4067 l gs col62 s gr 
% Polyline
n 6366 4036 m
 6366 4070 l gs col62 s gr 
% Polyline
n 6393 4040 m
 6393 4073 l gs col62 s gr 
% Polyline
n 6421 4042 m
 6421 4076 l gs col62 s gr 
% Polyline
n 6448 4045 m
 6448 4079 l gs col62 s gr 
% Polyline
n 6476 4047 m
 6476 4080 l gs col62 s gr 
% Polyline
n 6503 4051 m
 6503 4084 l gs col62 s gr 
% Polyline
n 6531 4053 m
 6531 4087 l gs col62 s gr 
% Polyline
n 6557 4056 m
 6557 4090 l gs col62 s gr 
% Polyline
n 6585 4058 m
 6585 4092 l gs col62 s gr 
% Polyline
n 6612 4060 m
 6612 4095 l gs col62 s gr 
% Polyline
n 6640 4064 m
 6640 4098 l gs col62 s gr 
% Polyline
n 6667 4067 m
 6667 4101 l gs col62 s gr 
% Polyline
n 6695 4069 m
 6695 4103 l gs col62 s gr 
% Polyline
n 6722 4071 m
 6722 4104 l gs col62 s gr 
% Polyline
n 6750 4074 m
 6750 4109 l gs col62 s gr 
% Polyline
n 6776 4078 m
 6776 4112 l gs col62 s gr 
% Polyline
n 6804 4080 m
 6804 4114 l gs col62 s gr 
% Polyline
n 6831 4082 m
 6831 4116 l gs col62 s gr 
% Polyline
n 6859 4086 m
 6859 4120 l gs col62 s gr 
% Polyline
n 6886 4088 m
 6886 4121 l gs col62 s gr 
% Polyline
n 6914 4023 m
 6229 3955 l gs col62 s gr 
% Polyline
n 7189 3806 m
 7502 3838 l gs col62 s gr 
% Polyline
n 7201 3807 m
 7309 3729 l gs col62 s gr 
% Polyline
n 7213 3809 m
 7318 3730 l gs col62 s gr 
% Polyline
n 7223 3810 m
 7328 3730 l gs col62 s gr 
% Polyline
n 7235 3811 m
 7338 3731 l gs col62 s gr 
% Polyline
n 7247 3812 m
 7348 3732 l gs col62 s gr 
% here ends figure;
% 
% here starts figure with depth 50
/Helvetica-Bold ff 150.00 scf sf
7050 2325 m
gs 1 -1 sc (emulation) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
4805 3800 m
gs 1 -1 sc (additional) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
4805 3646 m
gs 1 -1 sc (logging, statistics,) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
5025 2775 m
gs 1 -1 sc  90.0 rot (Other plugins) col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
4200 2775 m
gs 1 -1 sc  90.0 rot (bitrate generator) col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
3975 2775 m
gs 1 -1 sc  90.0 rot (UDP constant) col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
3450 2775 m
gs 1 -1 sc  90.0 rot (generator) col0 sh gr
% Polyline
%
% pen to black in case this eps object doesn't set color first
0 0 0 setrgbcolor
% Begin Imported EPS File: router.eps
%%BeginDocument: router.eps
%
n gs
6846 3085 tr
9.921053 -9.923077 sc
0 -26 tr
0 0 tr
sa
n 0 0 m 38 0 l 38 26 l 0 26 l cp clip n
countdictstack
mark
/showpage {} def
% EPS file follows:
%!PS-Adobe-3.1 EPSF-3.0%%Title: Router.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Gary Stewart
%%CreationDate: 12/10/2002
%%BoundingBox: 0 0 38 26
%%HiResBoundingBox: 0 0 37.1631 25.1797
%%CropBox: 0 0 37.1631 25.1797
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 3015 CVU)
%%CMYKCustomColor: 
%%RGBCustomColor: .00784302 .423523 .607834 (PANTONE 3015 CVU)
%AI7_Thumbnail: 128 88 8
%%BeginData: 12288 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDACFFAFFD07FFA8AF84A95A845A845A845A845A845A845A845A84
%84AF84AFFD08FFA9FD56FFA8A95A84355A0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D36355A5A8484AFAFFD4AFFAFFFFF
%FFA9A95A5A2FFD2E0D36598484FD45FFAF5A5A2F0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D353584A8FD3CFF845A2FFD380D36
%FD090D3559A9FD35FF845A0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D6084FFA8130D0D0D130D0D0D130D0D0D133584A9FD2E
%FF5A35FD380D3584A8FD04FFA9FD100D2F84A8FD28FF845A0D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D365AA9FD08FFA8350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D35A9FD23FFA860FD370D5A84AFFD0B
%FFA9FD150D3559AFFD1FFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D3585A9FD10FF0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D5AA8FD18FFA8FFA85AFD350D3584AFFD12FFFD1A0D35FD18FF
%600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%2F5AFD0FFF0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D84FD14FFA9FD050D355A5A2F35FD330D3584FD09FFA8AFFD04FFFD
%1E0D84FD11FF840D0D0D130D5AAFFD05FFA8845A5A0D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D36AFFD09FFA9360D13355A5A130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D5AFD0EFFA935FD050D84FD
%0CFFA9A95A602FFD120D5AFD130D5AFD0AFF842FFD260D2FFD0DFF360D35
%0D0D0DAFFD14FFA8845A5A0D0D0D350D0D0D350D0D0DAFFF5A0D350D0D0D
%350D0D0D350D0D0D350D0D0DA9FD0AFF84350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350DAF
%FD09FFA836FD040D35FD1BFFA8A95A5A350D0D0D2FAFFFFFAFFD100DAFFD
%0AFF59FD2C0DAFAFFD07FF360D130D0D5AFD23FFA8FD05FF840D0D130D0D
%0D130D0D0D130D0D35FD0BFF35130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1335FD
%07FF60FD050D8484FD29FF35FD0B0D5AFD0AFFAFFD300D35FD05FFAF0D0D
%0D350D0D0D350D35358484AFFD24FF0D350D0D0D350D0D0D352F8484AFFD
%07FFAF0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0DA8FD04FF35FD10
%0D365A8484FD1EFFA8FD0F0D3659848484FD330D36FFFFFFAF0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D36358484AFFD19FF5A0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130DFFFFA884FD1D0D5A5AA9A8FD13FF84FD200D365AA9A85A
%FD220D5AFFFF600D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D365A84FD0BFFA95A5A0D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D5A5AAFAFFD04FF600D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D84FFFF84FD230D36AFFD06FFAF845AFD1D0D365AA8A8FD08FF60FD24
%0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D5AAFFFFFFFA88436350D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0DA9AFFD0FFFA9855A5A2F0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D84FFAF
%A9FD210D84A9845936FD220DA8FD16FFA97E842F35FD180D7EFFFFFF360D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%352F0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D84FD1CFFA8845A5A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0DFD04FF5AFD330D59FFA8A85A5A2FFD0E0DFD21FFAFA95A
%6035FD0C0D5AFD05FF0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D1384
%FD08FFAF845A0D0D0D130D0D0D130D0D84FD27FFA8845A360D130D0D0D36
%AFFFFFFFA9FF84FD300D84FD0AFFAFFD0B0D35FD05FF60598484FD20FFAF
%FD060D5AFF84FFFF60AFFF840D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D36A8FD
%0AFF850D350D0D0D350D0D0D350D0D0DAFFFFFFF5A0D0D0D350D363584A8
%FD1AFFA90D0D0D350D0D5AFFA95AFFFF840DFFFF5AFD2B0D36AFFD0AFF85
%FD0E0D35FFAF35FD0C0D2F8484AFFD13FF5AFD060D59FFA93535FFFF5A13
%2FFFFF600D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AAFFD0AFF5A0D130D0D0D130D0D0D
%130D0D0D130D0D84360D0D0D130D0D0D130D0D0D130D0D0D130D0D356084
%AFFD0CFFAF360D0D0D130D0D5AFFFF360D5AFFFF840D0D0DFFFF84FD270D
%60FD0AFFA85AFD2B0D5A5AA9A8FD05FFA8FD070D5AFFA8350D0D2FFFFF5A
%350D0D0DFFFFAF2F350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D35350D0D350D0D0DA9FD0BFF360D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D5A5AA9840D0D350D0D0D36A8FFAF360D0D0D5AFFFF84
%FD050DA9FFFF59FD1C0DAFFFAF845A35AFFD0AFFA835FD3B0D5AA8FF84FD
%050D2FFFFF5A0D0D130D0D0D5AFFFFA85A0D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA8FD0FFFA8360D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D35AFFFFF35130D0D0D130D5AFF
%FF84FD080D84FFFFA92FFD180D84FD0EFF84FD3A0D3584FFA8A9FD080D2F
%FFFF600D0D350D0D0D350D0D0DFFFFFFA85A0D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D5AFD0EFF602F350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D35A9FFFFA95A0D0D0D350D0D0D350D5AFFFF84
%FD0B0D36A8FFFFAF59FD140D84FD10FFA88435FD320D5AA8FFFFFF35FD0B
%0D35FFFF5A130D0D0D130D0D0D130D0D0D132FAFFFFFFF8535130D0D0D13
%0D0D0D130D0D0D130D0D0D1335FD10FFAF5A5A0D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D3684FFFFFFA8360D130D0D0D130D0D0D130D0D0D5AFFFF84
%FD100D5AFFFFFFA8842FFD0E0D36FD0AFFA8A95A36FD310D365AAFFFFFA8
%84FD100D2FFFFF5A350D0D0D350D0D0D350D0D0D350D0D0D350D3684FD04
%FFA95A350D350D0D0D350D0D0D3535FD05FFA8855A5A0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D6084FD04FFAF350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D5AFFFF84FD150D3684FD04FFAF5A5AFD080D84843536
%FD330D353584A8FFFFFFA8A935FD150D2FFFFF5A0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D5AAFFD04FFAFA95A5A0D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D35358484FD05FFA8840D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD1D0D5A84
%FD05FFA9A95A602F35FD290D365A8484FD05FFA9A95935FD1C0D2FFFFF60
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D84A8FFAFFD05FFAFAF84846060355A350D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D36355A5A845AAFA8FD07FFAFAF5A5A0D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D5AFF
%FF84FD270D365A8484FFA9FD0CFFA984AF84A984AF84A984FD0BFFA9FFA9
%A9846035FD270D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D5A
%5A605AAFA8AFA8AFAFFFAFFFFFFFAFFFFFFFA8AFA8AFA8845A6035130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D2FFFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D5AFFFF84FD7C0D2FFFFF600D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%5AFFFF84FD7C0D35FFFF5A130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D5AFFFF84FD7C0D2FFFFF5A350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%5AFFFF84FD7C0D35FFFF5A0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13
%0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D
%0D130D0D0D130D0D0D130D0D0D130D84FFA8A9FD7C0D84FFFFFF350D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%FD04FF59FD7A0D5AFD05FF0D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0DA9FD05FF84FD780D5AFD07FF600D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D355AFD09FF5AFD
%740D2FFD0BFF5A0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%1336FD0DFF84FD700D59FD0FFFAF0D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D3584FD12FF35FD6A0D5AAFFD14FFA8360D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%132FAFFD18FF84FD630D357EFD1CFF84360D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D
%0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D
%350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F85FD1DFFAFFFFFA9
%35FD5A0D5A84FD24FFA985350D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D
%130D0D0D130D365AFD2AFFA85A2FFD4E0D3559AFFFFFA8FD2CFFAF843535
%0D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D
%0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D35
%0D0D0D350D0D0D350D0D0D5A84AFFD36FFAF5A36FD400D2F8484FD3EFFA8
%855A360D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D
%0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D130D0D0D13355A7E
%AFFD47FFA8A95A5A2FFD2A0D36358484AFFD04FFA8FD4EFFA8AF60845A5A
%35360D350D0D0D350D0D0D350D0D0D350D0D0D350D0D0D352F5A35606084
%A8AFFD5BFFA8FD09FFAFA984AF84A984AF84A984AF84A984FD0BFFAFFD6C
%FFAFFDBFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: Router 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -25.1797 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 25.1797 li
37.1631 25.1797 li
37.1631 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
37 0 li
37 25 li
0 25 li
0 0 li
clp
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
false sop
/0 
<<
/Name (PANTONE 3015 CVU)
/CSA /2 
/TintMethod /Additive
/TintProc null
/MappedCSA null
/NComponents 3 
/ColorLookup [ 
[ 1 1 1 ] [ .996109 .997739 .998462 ]
[ .992218 .995479 .996924 ] [ .988328 .993218 .995386 ]
[ .984437 .990957 .993848 ] [ .980546 .988697 .99231 ]
[ .976655 .986436 .990773 ] [ .972764 .984175 .989235 ]
[ .968874 .981914 .987697 ] [ .964983 .979654 .986159 ]
[ .961092 .977393 .984621 ] [ .957201 .975132 .983083 ]
[ .95331 .972872 .981545 ] [ .949419 .970611 .980007 ]
[ .945529 .96835 .978469 ] [ .941638 .96609 .976931 ]
[ .937747 .963829 .975393 ] [ .933856 .961568 .973856 ]
[ .929965 .959307 .972318 ] [ .926075 .957047 .97078 ]
[ .922184 .954786 .969242 ] [ .918293 .952525 .967704 ]
[ .914402 .950265 .966166 ] [ .910511 .948004 .964628 ]
[ .906621 .945743 .96309 ] [ .90273 .943483 .961552 ]
[ .898839 .941222 .960014 ] [ .894948 .938961 .958476 ]
[ .891057 .936701 .956939 ] [ .887166 .93444 .955401 ]
[ .883276 .932179 .953863 ] [ .879385 .929918 .952325 ]
[ .875494 .927658 .950787 ] [ .871603 .925397 .949249 ]
[ .867712 .923136 .947711 ] [ .863822 .920876 .946173 ]
[ .859931 .918615 .944635 ] [ .85604 .916354 .943097 ]
[ .852149 .914094 .94156 ] [ .848258 .911833 .940022 ]
[ .844368 .909572 .938484 ] [ .840477 .907311 .936946 ]
[ .836586 .905051 .935408 ] [ .832695 .90279 .93387 ]
[ .828804 .900529 .932332 ] [ .824913 .898269 .930794 ]
[ .821023 .896008 .929256 ] [ .817132 .893747 .927718 ]
[ .813241 .891487 .92618 ] [ .80935 .889226 .924643 ]
[ .805459 .886965 .923105 ] [ .801569 .884705 .921567 ]
[ .797678 .882444 .920029 ] [ .793787 .880183 .918491 ]
[ .789896 .877922 .916953 ] [ .786005 .875662 .915415 ]
[ .782115 .873401 .913877 ] [ .778224 .87114 .912339 ]
[ .774333 .86888 .910801 ] [ .770442 .866619 .909263 ]
[ .766551 .864358 .907726 ] [ .76266 .862098 .906188 ]
[ .75877 .859837 .90465 ] [ .754879 .857576 .903112 ]
[ .750988 .855316 .901574 ] [ .747097 .853055 .900036 ]
[ .743206 .850794 .898498 ] [ .739316 .848533 .89696 ]
[ .735425 .846273 .895422 ] [ .731534 .844012 .893884 ]
[ .727643 .841751 .892347 ] [ .723752 .839491 .890809 ]
[ .719862 .83723 .889271 ] [ .715971 .834969 .887733 ]
[ .71208 .832709 .886195 ] [ .708189 .830448 .884657 ]
[ .704298 .828187 .883119 ] [ .700407 .825926 .881581 ]
[ .696517 .823666 .880043 ] [ .692626 .821405 .878505 ]
[ .688735 .819144 .876967 ] [ .684844 .816884 .87543 ]
[ .680953 .814623 .873892 ] [ .677063 .812362 .872354 ]
[ .673172 .810102 .870816 ] [ .669281 .807841 .869278 ]
[ .66539 .80558 .86774 ] [ .661499 .80332 .866202 ]
[ .657609 .801059 .864664 ] [ .653718 .798798 .863126 ]
[ .649827 .796537 .861588 ] [ .645936 .794277 .86005 ]
[ .642045 .792016 .858513 ] [ .638154 .789755 .856975 ]
[ .634264 .787495 .855437 ] [ .630373 .785234 .853899 ]
[ .626482 .782973 .852361 ] [ .622591 .780713 .850823 ]
[ .6187 .778452 .849285 ] [ .61481 .776191 .847747 ]
[ .610919 .773931 .846209 ] [ .607028 .77167 .844671 ]
[ .603137 .769409 .843134 ] [ .599246 .767148 .841596 ]
[ .595356 .764888 .840058 ] [ .591465 .762627 .83852 ]
[ .587574 .760366 .836982 ] [ .583683 .758106 .835444 ]
[ .579792 .755845 .833906 ] [ .575902 .753584 .832368 ]
[ .572011 .751324 .83083 ] [ .56812 .749063 .829292 ]
[ .564229 .746802 .827754 ] [ .560338 .744542 .826217 ]
[ .556447 .742281 .824679 ] [ .552557 .74002 .823141 ]
[ .548666 .737759 .821603 ] [ .544775 .735499 .820065 ]
[ .540884 .733238 .818527 ] [ .536993 .730977 .816989 ]
[ .533103 .728717 .815451 ] [ .529212 .726456 .813913 ]
[ .525321 .724195 .812375 ] [ .52143 .721935 .810838 ]
[ .517539 .719674 .8093 ] [ .513649 .717413 .807762 ]
[ .509758 .715153 .806224 ] [ .505867 .712892 .804686 ]
[ .501976 .710631 .803148 ] [ .498085 .70837 .80161 ]
[ .494194 .70611 .800072 ] [ .490304 .703849 .798534 ]
[ .486413 .701588 .796996 ] [ .482522 .699328 .795458 ]
[ .478631 .697067 .793921 ] [ .47474 .694806 .792383 ]
[ .47085 .692546 .790845 ] [ .466959 .690285 .789307 ]
[ .463068 .688024 .787769 ] [ .459177 .685763 .786231 ]
[ .455286 .683503 .784693 ] [ .451396 .681242 .783155 ]
[ .447505 .678981 .781617 ] [ .443614 .676721 .780079 ]
[ .439723 .67446 .778541 ] [ .435832 .672199 .777004 ]
[ .431941 .669939 .775466 ] [ .428051 .667678 .773928 ]
[ .42416 .665417 .77239 ] [ .420269 .663157 .770852 ]
[ .416378 .660896 .769314 ] [ .412487 .658635 .767776 ]
[ .408597 .656374 .766238 ] [ .404706 .654114 .7647 ]
[ .400815 .651853 .763162 ] [ .396924 .649592 .761624 ]
[ .393033 .647332 .760087 ] [ .389143 .645071 .758549 ]
[ .385252 .64281 .757011 ] [ .381361 .64055 .755473 ]
[ .37747 .638289 .753935 ] [ .373579 .636028 .752397 ]
[ .369688 .633767 .750859 ] [ .365798 .631507 .749321 ]
[ .361907 .629246 .747783 ] [ .358016 .626985 .746245 ]
[ .354125 .624725 .744708 ] [ .350234 .622464 .74317 ]
[ .346344 .620203 .741632 ] [ .342453 .617943 .740094 ]
[ .338562 .615682 .738556 ] [ .334671 .613421 .737018 ]
[ .33078 .611161 .73548 ] [ .32689 .6089 .733942 ]
[ .322999 .606639 .732404 ] [ .319108 .604378 .730866 ]
[ .315217 .602118 .729328 ] [ .311326 .599857 .727791 ]
[ .307435 .597596 .726253 ] [ .303545 .595336 .724715 ]
[ .299654 .593075 .723177 ] [ .295763 .590814 .721639 ]
[ .291872 .588554 .720101 ] [ .287981 .586293 .718563 ]
[ .284091 .584032 .717025 ] [ .2802 .581771 .715487 ]
[ .276309 .579511 .713949 ] [ .272418 .57725 .712411 ]
[ .268527 .574989 .710874 ] [ .264637 .572729 .709336 ]
[ .260746 .570468 .707798 ] [ .256855 .568207 .70626 ]
[ .252964 .565947 .704722 ] [ .249073 .563686 .703184 ]
[ .245183 .561425 .701646 ] [ .241292 .559165 .700108 ]
[ .237401 .556904 .69857 ] [ .23351 .554643 .697032 ]
[ .229619 .552382 .695494 ] [ .225728 .550122 .693957 ]
[ .221838 .547861 .692419 ] [ .217947 .5456 .690881 ]
[ .214056 .54334 .689343 ] [ .210165 .541079 .687805 ]
[ .206274 .538818 .686267 ] [ .202384 .536558 .684729 ]
[ .198493 .534297 .683191 ] [ .194602 .532036 .681653 ]
[ .190711 .529776 .680115 ] [ .18682 .527515 .678578 ]
[ .18293 .525254 .67704 ] [ .179039 .522993 .675502 ]
[ .175148 .520733 .673964 ] [ .171257 .518472 .672426 ]
[ .167366 .516211 .670888 ] [ .163475 .513951 .66935 ]
[ .159585 .51169 .667812 ] [ .155694 .509429 .666274 ]
[ .151803 .507169 .664736 ] [ .147912 .504908 .663198 ]
[ .144021 .502647 .661661 ] [ .140131 .500387 .660123 ]
[ .13624 .498126 .658585 ] [ .132349 .495865 .657047 ]
[ .128458 .493604 .655509 ] [ .124567 .491344 .653971 ]
[ .120677 .489083 .652433 ] [ .116786 .486822 .650895 ]
[ .112895 .484562 .649357 ] [ .109004 .482301 .647819 ]
[ .105113 .48004 .646281 ] [ .101222 .47778 .644744 ]
[ .0973316 .475519 .643206 ] [ .0934408 .473258 .641668 ]
[ .08955 .470998 .64013 ] [ .0856592 .468737 .638592 ]
[ .0817684 .466476 .637054 ] [ .0778776 .464215 .635516 ]
[ .0739868 .461955 .633978 ] [ .070096 .459694 .63244 ]
[ .0662051 .457433 .630902 ] [ .0623143 .455173 .629365 ]
[ .0584235 .452912 .627827 ] [ .0545327 .450651 .626289 ]
[ .0506419 .448391 .624751 ] [ .0467511 .44613 .623213 ]
[ .0428603 .443869 .621675 ] [ .0389695 .441608 .620137 ]
[ .0350786 .439348 .618599 ] [ .0311878 .437087 .617061 ]
[ .027297 .434826 .615523 ] [ .0234062 .432566 .613985 ]
[ .0195154 .430305 .612448 ] [ .0156246 .428044 .61091 ]
[ .0117338 .425784 .609372 ] [ .00784302 .423523 .607834 ]
] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
.4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
36.9854 7.35156 mo
36.9854 11.3018 28.751 14.5039 18.5928 14.5039 cv
8.43457 14.5039 .200195 11.3018 .200195 7.35156 cv
.200195 17.8281 li
.200195 21.7783 8.43457 24.9805 18.5928 24.9805 cv
28.751 24.9805 36.9854 21.7783 36.9854 17.8281 cv
36.9854 7.35156 li
cp
1 1 1 rgb
s
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
1 /0 get_csd
sepcs
1 sep
f
18.5928 14.5039 mo
28.751 14.5039 36.9854 11.3018 36.9854 7.35156 cv
36.9854 3.40039 28.751 .199219 18.5928 .199219 cv
8.43457 .199219 .200195 3.40039 .200195 7.35156 cv
.200195 11.3018 8.43457 14.5039 18.5928 14.5039 cv
cp
1 1 1 rgb
s
14.3926 4.55469 mo
15.9111 6.83301 li
10.1689 8.16016 li
11.4238 7.11523 li
2.54883 5.59863 li
4.77539 3.92969 li
13.3389 5.37988 li
14.3926 4.55469 li
1 1 1 rgb
f
22.4727 10.0791 mo
21.4365 7.73047 li
26.6162 6.69531 li
25.7178 7.5 li
34.3506 8.97461 li
32.2793 10.6318 li
23.6982 9.02051 li
22.4727 10.0791 li
1 1 1 rgb
f
19.6406 3.31055 mo
25.4424 1.72266 li
25.5107 4.20898 li
24.0605 3.93262 li
21.2295 6.28125 li
18.5273 5.88672 li
21.4502 3.58984 li
19.6406 3.31055 li
1 1 1 rgb
f
17.1543 12.2207 mo
11.6299 13.2559 li
11.4229 10.7012 li
13.0107 11.0459 li
16.0518 8.44922 li
18.7432 8.9043 li
15.4971 11.7363 li
17.1543 12.2207 li
1 1 1 rgb
f
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (Gary Stewart) (Cisco Systems Inc.)
%%Title: (Router.eps)
%%CreationDate: 12/10/2002 12:24 PM
%AI9_DataStream
%Gb"07BlDbIehB(U"6;ZP(hD!Q\T)[>(<Q!\!*]9aR<4T`EgIRY%g'^N'"okiIUtOq\\EU=<XT^H[-T&LLT\Q'<@l]]FnTmVpuKP1
%F1"29Y!7k'J,MK#ML:MOaWO=M5fL_&7o,`SfCIJOZJOiAN:I*uSu=Wcmb(0r7k*5WT4CA^2bl9/=6GM7mcAV5]"#BmDcW@pjj3G<
%n@.cOCq3`n2V[j!DP0cL\sU4./q:X+IouV2T\nl-DsPm&e_/sDC4<`Rqs>@e^SFZr\+I`,`GPp%]DQpcqp-9i?1'W6o%:bh08Im2
%]QcU\Uf!Wk`rGi2O4a3WY9U7*c\(F,MXggtW$KXGLW7+&hWdH4pJUnIhlde;QC#5NI(.n4s-pS0J("h\lc$i55Cbc3FJ8X5*tBWU
%p[bH9Ne&7]?L[:K`rQ\?Ih#dii0?sH9>cBkq9LYT<nIeW4cT!(ldktCIto<i."9IbQP4a9_B!_T:`4YNa:3.L!<b5R&sqn.ir!7C
%h^sX\dR^!@5U@:sGJBWM5Q]H;(asc.1rp%NT/kV.Hs/0%r-@dPbSYa!gMAcm]nD.lKT_)Eh<X0PJ7<Vj%.Z09bHJ'LMs]ERb8juL
%l)WkWIc$YI<_Ou`qeS,;ipd#En'^7@I/@?W"")[%Y&F\T_NFZ\q:5;Iq<,`jdL96lI;uMo^Y/O;B)OR.Z9b0V>acL[/<b1;nD_Ce
%DkXkP1IL1#GdePLa(9N&AH$&Mr30H+N7_U69&I@Q?S&Xh(8nd:T,*5G^nM`0/^28M_p%A*Vss&Nje*0fq/s;3F%c[p>js\(qP<W[
%Qfc$_#H6AD(2F"hrq=UWX7LQ$q%>EN'SE-QLHHFT&$./Mh&J'qE:ps]Ignl>GJq!'I&/9@f,DDj-%6qsc.+YiT4s1TVC?t_VYo[p
%7^qu+>%9LnnLq#LS(?4dle0Jj>*dg=/?qtW?Z^Wt@^iY]DYP0"a)9olFrQM4f'sSA)3;&KCkeS-Am3[NZPdqRc1iWW1f'NP`6[L?
%nQ,7,R_nIe"1o^]p`6si>R"C2%"Z:afEZuEmf^6g#N(JZiHP2-J\pk8'I/Nk7\K64_2c:gAV:G`auJK#?oJ2t^LNnh%'Q(!U<,3g
%)4-:3r6Dc,oF(^qT4c3jVobF)10sY_]-3..*J`X.AB=R&=ZH<_]-3,FV&;.<1W"t*nLk$,klAKAjREk3a)2/-Icn[\Eae&"%.K[>
%(238nP0DAE'H-YtNKIjm_pC1>1jPZ25FKPMbJmi3(\U,p%?2Q^F?;k8+!Za>*P4&.,E.Qt^)=[q*s<-m2cOZSM:'Ai?qNB=Cl$*X
%*DN+sL5Ec$M-4'&50o:0cVJ06dH&Qh)#/@PfZcONLZ\^5F8h?E1SZ^:o@c!PG_d5c0e#3PkBl-1_nD)V%'gip0Vo^0E0No&4)-O@
%moJ3$g8tS)ae4i8G:52p2,cD/k(3?Z30*21Iu:1`jXWpt,PRD:PiBI6:]>t#Z]$QJTDXu;r3uRF?U_e\(PR9`+^`,1J)l(Lf4`*P
%]:]!)[ne>uao1;(l'23k5PZh8?R"ZQ%IlN`0E5ngih$KdU;e[P9nn2KiG:E/EqicGB8%7ifs"<)rJ0.$)g91>$b3I39eoEFd*69j
%%AQLb7MBV2T5a\AO3GpLit+0a4p2s[cPi7oitLrSfe@u<Ot#7LQ.Qs8B%W51US0F\1:'c[?b4?T`:/=1BpN?bm:%tF!P+"AS7Pm^
%/916EW5MG6M.fO<m]moNr_IfcQ`_>`Y9Q:N/DU5/$()@Q9UO.\0P,u.TSsR`!:\hjRIR\\0OQp-d,^8.]tiKuX3QGZ+/6uRo=Ch;
%6(-_,3W]laBS$ph6p;6`""5s.4LcBW&0FDOr['i[lOJ0c(uMZ&[fJ&Fn.HiK(+:Nji;[UQ'=)1OA"Zlt5/\u,&']Xg=GFAEF\cU/
%8JGL?GWH1e=@b=/73j$BjIA"'aI=^cRB1&.E)X;-7[gJ&'"ajM.?N*i[=:2k9f5'GVc]gbR1l3>CT8WO:2/@>Z%E&:jMsa@l6mh8
%i6D`qF<)Q#8.'.nI^h-6's/tp92qbQBW<`;:me3a_pT1GPOChC[/:oh6r9'Md7=\_%O7b1:_*%*M's\P1Lb=nl0pJrM)*(D7`Y)*
%)4\%?@3T1/im2</eKprDJZ#F!%Jfs75OgIQ4%pBC+Hlj>6\;0Wc,$ME!X2UKc].R7L#WS"=Wt(m8JEq"'Bc;R\;*2;a1D*;h,qE2
%'h6@cn`2Qs*cPO;$T)o_#$r[.TkC\!f.L=?F^q)(9;_P)h#9an^%LUm>sW]XJjm@Fas0>qKuK"0[RE&?/<d;g5R[OF.Ut]\dV:K/
%1Zu1=l`=Y'N1#gt3pLP5FeCe&V$&YN>bb_$`Xno-&69?>(!L3FP0)$@"Q%P;PBr[c,t+3f]^BW$LLfqJ%N^p)k3VD<:`W]1-u$fm
%MX^b,Xg/Qc/eSfE)PXFZVl41Z+GhH@<*V_;2[e7*.GVc\+I3ledWd?#cU:>O)(m'O,DGZ0U+,e,@RM/U!Z>SqI)dFq1R,&OE!NuS
%,WAPYCsUV7FsKi(%3D&-MqAcM"BmS0TIqB_(Ys\S`on0Y)%SBWKPZaZ=P>IdBtVc\BOAh/"f<oRIP8#*SIKQ;lEfOn(,Yh(Te-/3
%Z6;lNR=N,_"2lE79^&/YqijOhE+UN6kti)@6k<IWW'hYB`!]_t:.3uC:"4ZM@6F0>gGMrc_Pt_"dgVdI-CY;ZVR,QIN4;iVh[Cf5
%R@MaTafZL"f-_I3RZ4Fp1t?+o`.(Hk.6[!K<Bghem_mQc(WQ+^Ot"Aie*TNXII)P/B1+b.99,^:Kg@%a>t3;5Z#(G@REeq:UmYA0
%6lWB%8A*38nKp#H8Ul0a$+M&RfDf#MMG5ocf%Yti9*]i/JMPPQ9m"$=d0#PJKeX3p-2CJn8A(om5]VB7,f;>F`#.=Ec_<0UrWZQG
%8fN(/H?MgB\6Bp5'QBJF`+sg.V7Md49+()1jXJT_Ok;T`Di(/H?3Q2?FKqp+%u8T`?bU;l)tk(AYjlL*?)j<7%%Zk![=UI38;/Z&
%;9"V=YBFTl=o9e0`Aj-s']q8]4[rg<"\Aj!,\"bP2*5!6Z!_A<c4ooY1s\B8kfIhf=]GN16aR&u&d$R##b8V;D59Q+o5[Z!U83B>
%%^<lujBuW+&Ike"+]tSUYMhngTABaeDKNMdkok2diE">]Ib4s(QB[NpQJ9_'SR[:I*Sm9jiaoG>514G)dLf[<L(cVj3g\,7f<^Q\
%91<sX;USUQ$lV/B=WHq,31aYt]V!3E`rG+U+bYO;]SkFT1TD\C$<N]/,l_L5/!c_ZCHb7!i`s5.br\8:a%^jSjc`:WM>#[d]cB+W
%K_[8lF^P.4D4#<TgjNQ(><]`XS?F>XJu?1dg2rW=L27pL]&3)Cc>Q+p(h\CNO9`#X[sYc?<Y7>Z5?cbEs'I!sn84cBfl1At6L^/M
%]Z=/*gM$Q]oq+tr-ol_`\*$BSg8"@\jum#EN_cQ$_*l?hU0o_]g(%_-n(kRa5+RTuYTsFD,!@cc2jZ>e$c:^!F\fN95si%A782c@
%:24d]rW/sSA6*+1?t-cAEe/5$ZQ[@5\6K(+SUAmL=?(L2!rr=O,W\bT.EWK)l.V*F*6FRXpDD-]P[R8m?E-$8L(['H-J8RSV^>H4
%<ATS@"nSZFnu:]G<:5WrW$D_&RU3*$`Tmk9#EE;%(_Z]YeQp3oD5<*X!!]2X,=WD`fgq9---$1YiLX6*#O]uEm#Ac?Lb.K1-e%`+
%mR!%Ca.%/*<.oTpG_aGbm:Nd%+J650kd/m!h:9JShNL;ChEKi4%EgVHRsFqq3II,'7VfcZYM8m+&g$Q6i.o]pIeq+B#64V2gar`6
%i:;9gj5WY3QYH?Ikj7i7Im8ArR=G5QI)"?9]XK3B@)Skh;Qm&lbIj^KjjFKN,rQUFN/#bMeAdliV)F#c_a]iO&p@q;1_jZM1pe6+
%&XUk!cpj'<`M7YtK.)YUnVj=_-V9If;b<;=,_oDGAMQqKaZ,\6dpr[3#;MjJ.0Zg%4>"u:*N#TRS,uJLI[&+XUf\om<D$gpWuS(J
%<'rND5eq+=5UIU2<2Qua/$^oLA`ITi!E&/NKC$uh(V8*@4k<Os5RctMk#nkY+s5t-I$2g5\4DOZaG[>@'pE)2i1spbk2ifeQW$.E
%$G;K3LVrY$2Mt">P`Nu7GVg?ej(t6HJSbBqH85PdWG+(-"4E@#Rd!s=.qbX1"DR]3-COq?#2M-U_pooX<^70YbFib\GJph$3h&mB
%PNd<QRLZ5AN0R331kSZSBek[Ik[HT@9ZE:DA2l"c+DiGc4?8n08NKEsF?Q4TVrPmD4<BK;j)SD?r%uVqNDl3]49f[B9h,karFe"j
%-jkJnO"u57*@1\)O=i6RF>s;'7mkEf"6:BY=+Gu-()_A.S<ai(bR!]:Q3H2<"1Ap%/-3s``N5F.(<:sK+^c#H#aj-G$D4[r!7tW/
%k>T1n3$5sDPctWXX@AL+=I0-r.ag+9eK>E2c%`HCL!F*91Tb%B'-K?'@lDN-Yf:0TlQN?S!@t@[$toVD&s+H]2kZ*9:riq+U]c"c
%JSm69T+pK;<`(nNVa+NtTX#_;)pAoX%Kn'(?ja7H@PsPSD1Ypm3ZS:8(-o>I-s-Kr-U?-X49Goq.g5'a#h32]+)'R="l,4?Vk=`k
%@<N%RBa!2pBE?u=^lRu(?jk[0daLT['0T(^1spk$eDSI'd?\X.b*MR.OPq;Nl"_tahR7km\hnW!mGIO:DIK^)fD$3O*)4@@!ZT<b
%8:.G8n`Jh?Ysh#OIY4nG@iGGO'9]m@dW0)+>"6baV6gX;/Hn)<DeN9cA/sOun.O]0>UXJWC8J:h=tWNBbK/a@[$^ap7Ma]-B]G1W
%'%$d,BT[;&-Y0UB@cMLhJo`H`YgLlS+TVG45(5o3r5a%JK*V_a8V5%c$%pu'#_ZDJKYk[%ak4alBG?2==[Z5VaC?I<6rc.6!ZR,M
%NLHr51-:%iKTnFg=N[mK%W'+C`N06e-*.9Y4uM8G?n\.g@&A\'4@U9:bi[PP3L99(c7rWsX/BBKbaPA?Q%T0d-8b%N<ERX&j&E5m
%pboVrd7&YF`0M'?/@'Y.=7P&qWW8C_KN4MOZ2tDQ3[:.5JRq7ci0&'5^urcP?+FoN>/R0M@7/uW`ha8X4t_gS1GnMu\"W+e.,*$'
%@FX5@Eq`D?UhF_'nj\ei\9VRZG[/E46]X;9E]k>r5qO8-)RK1V:(.G3DBR6G_&5mUa2b\UV/:q<Ej'2\M3A)fno(PZdRm/9>Dp[;
%Gru3*e"A[ATYuF?Qk+a'7mN\V:otD(e7gq<M'I<Xfso*1R1UiN"'t(l[LMMipA+ieO$I-76#D81J9;;(4JFbXZ&.OpljP-H$6MeZ
%*sMqbOS/g<_&r_2#9)5@KKPVN/iF&C@Vm5m0I'EDJ3^tCikrRM^b;o]^uPLaBT/'Y>[.uA5al)F-m3hH%U^G6<D]?R@(6X8EHiF@
%3sMHl7SAQuJH@h8K1CLGPG->i&I4%%U'-%bC#\/"#++C!`o8HtOAX#'*/_WnJUu0^N6,p9j>`mp6g&G[mc+Ek1F"*"o7Ymi7?1mg
%gg22)Jc!igS:XBO!Jr/!FqdIR%FUu$,octYa!@jdi+>GDbR"P67I(ADdlR(=O(ia]g*X,*RatD<;q>qX.qmKePEj$cKCuZgL?fT'
%8h!pg9l!_NlJTh/30H[F_X!?53g?u]\->lab;Mk=YF@`H*-Ho6)YQJ.[:?t.Hbb"2mnKl60IE8kDo$],^>#k$\-Cfh@_7A1_K6I;
%D-/,)=3N_@WK%HGdLOm<WG@%5Brt)ZD-Uj$gP3/%dSR9&nOqTW2)5O"8-1^*;UJ>Jl)C%m'ko2J=&[OM'<qS2O[\K@E7_:6:G^FZ
%>>BK-Q`JhU#!>=+':GhS@Pitr,)*r4a*_"7J4!s#F,=)?pA9XsL65$i+k[A#5:<q<+A1\oCenSP"K-Lu&V"F%J6R6h2Qcmp^-Gpu
%JHjouo!@%@+HrlPKg='"V'nr7,ajl:aol9.8mde_,R]@f<W^_N+ec868>4=b`^`;_3Ot@;8k.l6:4PRUM*ug7aG#R<qb5@ZKN4bS
%@LP)lZIq]!D-1MKUKaHqDRr0<q^@cp'r2RAWh\+<pb"7p[C*Ad/&kAa>?nneQ&F[9r/JYJ>@97<c"/T%%tE[mXf/VT2ScLBr/n@k
%1fCkpnUkYs-FtcU.@Z-3TLddKoGBW"KWNqVC-7fr'CmkiA1jPa-7LLWccG'gr<Laf\,^cjZQQlfl(0g)>7(kIB8"619;It/,u'1^
%]L53kH][Sg!_u>UNC`f;p7%-J7%\QjL*(cC$#)cXLDeK4:0OnF8fA=JNEJ=E<<:>^$lkN`BMT)aFC7L$/`7uZ]Q?D3)F0Gc2?dJ%
%!+;)('L4r5!(m6QB/Lk0I7D&&%f\%g0^T&D)rZ:^WCjM.<if\C65jB(Q:+-rRZK[p$86%$=6.<g/-1K9@>mTt9Z5Ap2Tr$k>:f0/
%Hp"hGN-/MZ"Ci_p97a2KYo'RmJH&Qr,+qk"WbH65PXDM3!"^`jnHeL_ZFLUR[rSd^:qD7TMa9J1E&H=X3SCegVoL"+kt<;7eGpX$
%9ptinad%9T>H?$2/2k9_imtHgXG=)?T[t+-3tTU<BiX\aSb4VdKCA=Gf&Kb*![A5=r114;?]i&fD(^.m8RKe&ofZOn_"0p</r1=-
%QT5eQdY72k..Re3pjVmD*clXD3EB;NbUlm7So!H.#$5!B1q[N8FG934F")11iRNd\lS'YC6\m%*(UIUHnLIAmRDun`N>$UAq=l9+
%2KLfupp_NG73[XPN^XjfV6DV*=o)l/rY@DdB8e^2_D%^H`++qK/<<4HF0fbpOj-?ZZ]+$"&LFYP-75-R1NJsrpX$BSX[M<:<-BRI
%N:ke"f!)H'WZk/1=@JOS:7faGku=!GoqeZ]X%od5,maPg8gSLiI()H33"fBP1mkJY1=9B`J^R/GOTLOtI[s#?Q5%WZ@nH#tn6#Su
%j6-6PSjKafGX!#1"bl-lp\Wl5gEar5rpU<_OHJu6qS"n5JLMIdH,UT,hB:Pq[8lkNd-+&n(EFl(25>,`>=Vf7daO,<L0grs7`.NH
%F.<@L)9t:kPN/LKH8C]FZ*cU!-dd^hd]dNKbB;C(DOnui`O%ffo#AL,XSUuE&J4,^)_K7EeS%nT^eoRk-#,<6j?%\Ek]`fRNBT:I
%gbF-0SSb8DQ=@Xcf9U!TZte*o*YWYC_J4XV?_lX31Z(AH]lFQlW=_;1Lot],@O%EjnlaKY^;b+KRoN'A^`Tn/U\(L0,h\'Df'oJ6
%m*Tuk[08D8XhMLt/,DSSKpMe1O[1ds1aj\;8$l'oUi\"37!!BO1.mHS'(?2R7q2o")K/`j>d0El?>`&#e!ur#N)HRrHFkn7?P.Xt
%PXq?A'QQV+e03LZ"iVp38ul\5W@1BBVW=8c[#YcHiYac0'2#]B\ogCqd?9ZqKm:b-HHjMl<"qu"-j^iNpH53]m$&]>@nOk'-mi/]
%:Q;@,S/f/"'"!Nq+sIb8(K7a&CX3:Y#pjCBANTHl.24A-*/M%C&JGD3(^QiVd0:BDKP]PN([3=s3h>%#7TN/l]0s*"b-oE.0:hJX
%Zs?;Y-FEm;0!R"-D7]kl@Qq(W2sG1Gi-$Pe8ob#gVA?4"Mbe1ER90ldA@G3U]7dY[ncfN5['r\U]@;%OhTjftT#Jo31J$"%AabT>
%>g;+Cle*T%rOe[oLaP)r2^L+j/9)>i(3bUT8r`Sa#S3UGU$co^PkO^q0&&:m)/7C*q,oZ-"=ET']Bl$MEE"`5-4:XE/=beY]^4BD
%]Hrb[1Hq"gCg($6S1s\6g+5Ga#cX-upADI)#1F<!1btFPs-_+<]/#A_bJ"q*'(PUA?dHs2YdqSDHp6`d`Kg7g2&s#NVU2&,-?eUh
%i1M20E(0.DN]\uFpJ[?L't%i)KV@o)?\Q;@^LFepS+H8-T6orUf5CB6D?H@'91I+d(/8t7nr'ma@m\niA/Y>.@psD;?s.HW;=]])
%g($HuQsXMJTde<*.(W%gI,^5<3\9KN:ns7+8DFg14Cau0Cs(kd4FbI2fmK".347lA9]!m&Sm6_?143WQQlP"No;mNG"+B<C=&!:,
%?mOqQ2C1&.m3qH4#nD^+cG,rP]5:RXX<n0X203L'Q3:&9nMH!?^qu0M3!]kY^SY"N&=E:jO\*<*a]'n'qPD\W/p%_QbqTWh"\ApI
%-5+'KD<*RhY,Pa\jJn\_+,.Y<h,L2ma_P/GjOi!OcDS,5Bd/g<J8::I,HnhVoW"QXSVO9<csm#:,c#nF#=XtqD3U$CC=3!QrB8t$
%noT@Rg-<$3fnaabe,38@MbQ)S]@CTpWrB2*!%r_W_$K.=J=N!lXT7p4LD5/M\&P<+,?O8`S?b)A<)FrJ("J[li+Tom;FOTn%H<7n
%i)``ho(+ZPI`bb"Yl8-&1"MeO`B3YhUJZs:L6`e4D.p<lA?V]7(6PGJFrFOu)>`04Q.S8N`&8j`9\*fHfi_Nh"mUiE0kZE$-&/H#
%[[48;g1/2;WasjsK-Af9'LB$*f],KI%Ki4s.lC@]A?n?kXCdC$qC8!'"9*L&RB;D:-pP&_Vg:l/Z)`,TesKh=7#brRfGZP_kg_t!
%CS@7mVCQdd`WAsL+0Jd\<D0Gs2-%-?r5u"DNBN5:)g\Wf[A)7C>*C??fcRZ6b%;Pcc')*iOb/E>[82V^Kp>V&AWli4]fN)iWb4;k
%`77[onr(%*b#Ll!K(;<ECUcFJeOO?E]=COklD-[(%rJGuLj[@%XdGQ_+4!qce<3GcP`k[IQMN&1TE=!0.Oq4:7oE"AWi;k).*+S+
%WN+sh.T9K88Tg;qlDgB>X/N>Ed]JEGq\c0oL7ES8W*8LcaW(>*<%EEt2*[oZB5CQG<$RA8CS^5pPEg=]`bPHJV#lH8l.2dd735s=
%TQPBBeOlKL/^X0u=4VDColl[BAL4@H89RMXCk0V1E#ugU!$qP^,K;'6S@Ef.XO`@h:`Z^^!mS'\1@)H]/?'1oXiri//do2>X3>=C
%`1KF?Rg7=I^<@)%QNb&0/u<c!-)JK1@=`gB+%`'3PeS;%!0u--,UM94jU&VB/lR"!S88$1PZJ2V;B@U0(Xg^e7HQc3a8u)#.JL`6
%_:\kj@!<X=HgpA]E)W@"P]<].\c:l'm]JmYnNCP53WEc`F:@ZcS9<NeoZcfJRi*]f*)^q8*XMP*k8`M$h;H]YH9bkq(tUc#Bk9*u
%,Ng,`-ZX.lNI9gcJhMMh)g#Hn91@Zfmr5CO*#"uu"MQPZ;0C>lDn'fIq<$-G[r'Jf5[*Gig9?Ig.HS.)mh25:1e'jSMgE]cLnP_4
%0F<qXC1QdHemN/!75Tp/%a<0R60_m=HJ=dp\_a8F1hte/HcCgQRg&'LB=))X+,4$0l>S=ia(A&Vep>o-XYO*0ANHujD%/sN>k(-d
%/d5M0;SXU[lmM=o!cLrpTXn!W]6&J-8>g?Gm8N&Da?beYJWrmIM]t(dq!1T.X6Q2i3YpXu7IHnu?$a!9giA;.WHMM2#O\*>\jXNh
%NNTkG`N!6IZceY3Z,&&hfN%Mn[AJ4%iM3]eD8CnJ@V^-+K,Y9e;?BH8'/&k`ifiXC"^;bg6,_@!$'-1]cs_?\K%m(TC^D+WWWc\R
%$R=9ZAm8PhA#$"5NN0s+`*3+!;1=1E5,Vm!inGi2>#IVK3j#<1Y"Ji`9*7a0#aCmUJo%0&gmY07Cc\mS8S?5PaZ\RDd'R#?DJtEX
%"=Il8?#:6W4\_hhgZqPEa93umTaKR_B9RJGi/h:gVenuqqBBL7;Q:N_=#YoBD%C]W];cg^@ST^D)t3^sda6b6R!V+,QYpM3+B>jg
%\WDFc@]8$3=[N:uV]`"]JuDkP=02ca'gX'G%3uZ(mYD9UcW.%-,*a:=3-R?:IlrHm,MT:%8h9RS[Z\g7-')n+QX>g?Wfd7+A3NP:
%.m9.sG`G$mToqsG)P%DbR#jX"FeG`!arR%8OQ]3>5I?\=$&SG'<=a=m+M(9Q:MIIT/&G$A+2p,EC`B_).Wlf8dNb%X<IOm7F,r\b
%JT*N^4-A:Af[R5bI]d9r)c`ZK*;t0t1IlALHhM-[mDn_Z33'ApCF^@+BJc)$.3R)5"\c=<e*NY?1SV(WgcS)Mf8(bRQcMpa$)pDL
%,GKF4#cZ>dWEN$drP[G.;Sp!qMA\nuM&Xj&*K1bTUj+.HEDte7hLfU<o,rWNYg.b7;&^2lE`%GI5%Y5B'GPC[5RPjG-9ur.'Uc8=
%"%=O)7B]]'j.S9c^0)/3S7=9?dHh:6&r/C:Z\l^D/O#%Si(]:5.-OLCTkIquB"%XS,Z-\Q^/iF#W;:=;]iiUV+EP1gh1*,`\5m0G
%WGub*rm/6UQ&/_U.b,\jpMn1;6F,5tU/;P'j^9:c7PWCKn\[tXflOnXXqrSh^Tq7nhV5d0jm-!][+'&<WOlt-FZ%4#SAmokG.XMT
%cWU$5B=1`N2X</))`O5/WL-uUY'P0CXQ+-HF1Ts#!Z.Ypj[gE9b7)q$TUibpX^U+*mhkfN7'Oc6L06?W"'&o!Hd-V@A(lCNqN1%`
%=0ZZ0S"unGfgNBkB'5932<=3,cY8_R[7["GA9O23gtT?]-MD;Nh^8=CbDnT?JV-^t]?KsEF>$;7'$gc@]#Z)l@hR/,i*KTW!&g$,
%-%=\;#*))@*&9'*b%j)nUL3TY,_6-nL[THmO.TAKR_u`L`li3M?"1M[a"oN1Q*phUO1YFH1!`q9NWu]LbOrKlT,@Fsrrf:-(BG8C
%\`mh+StY>:He'mQUtUgEkF6Y^jiE^]=1H4!&Z\0UqI&E97MRG7e16qp[:.3('(Lra=eMd&71i`;CM8\Y^bVj?)6!g>%,Oi/U(E8E
%0ZnoGJPcQO#"/cZ!W_a$9K"0dT<SttgMBaVUT_h:N`<k<AWC":a1`r:pdmak)d?:c8+AE[b#82.V;*TXX-UIo`:+[Jcd=C/oOH"&
%1,`n`2i[Q9[14E&qPnB@kO%>)h,.lXCF!Uie;-)XmG%_JBt8)7D.RK5W)UtUo4pEsQ/h/b("Kh;F/rh=jDeNa%,/3q*HO*>R:nn9
%-[`[*_Y5ZT#,R]]jX?.!M[#"nCt[b'U;=IpPglDFp"HSO7CF5ZE,XB\*3nWe1sXUaFZV]0d6q5r/\5\%+i&r67^dZ*gb'l/qdT7C
%R5XX$GO^n-T6Rb<3>dCDIJ6\"m<b:%WhDGDOV%t[huPVXHR8Z1%)R$OA(O*JXt^UKrK?`Mm)U*R7]uY[Q%,r8>83#d1tB5nbfVZ9
%WMV:>bp`,>mG9N9>;Pe7Ws\b<=W4^'WqHRpF1,Eh]5,[GYsu.?FZ!6!ZJS&\1g-X>8[kMCD$&Geb!scQ6,f[nhJuG0,>`/3:hco)
%4sfaPU;VdcYrX$3`[;DOpbX*T#'H3a#k_<L'ItV3;'kTISrdtbjG7GJ9WXQ6p7mofZ(@+.8o;3Z'p(ha61qJA);6+0J4EEsW,coV
%2lLP)UhCG_#$m%:61r+;`Gi8h=CR==[)?PA2"!f2CBd7Q@eErapgs9[SrD;l.j)VL]e=>4E7Ma;97f$!96IXgNCkO[AQ)%kKK3%J
%Bqt&YZO'+VqjD7gg0[S5dSaseP4RFs?E[cB_[ug5@pRarmV`9LmDm3XX.*S$\LhB9;jg]'i\jbu5N/HjRL))@)O,KdftK'&(a!eQ
%d`p?bm;5[tAsA/*AUfJBf8OCe-t?A>mB1oIYJ4X]5D:(TO^e;rnZ".p-ct-RE@]0#AI\-B,KX&JTbNE%2DUUm,R2GHP_i?^TcuP`
%O+Utf+u!UQ.6L(?#fC.#JYo_3-)XFI6CCB/2l22G>X/_Z$VD5"/LD<h;?^S<SN_Z]"XT$4L)#l$1ncUf+=KHJ^(Fo]9+E1*W`%k\
%RGgaZ_XLSn)"Bd,6!o"-UJ1O"<Zfu*AiFOAH#,?.W'%Yi;+>N3EBRl<:E+/8dIH:+TT,GhKht3l-MHheFqioaKV8a&hm^Ahh3_AT
%Cl-83/RPW)XF!\L\@rrpE@sN+nF5kF)X0bNS=dC5fPQK-eZ#QL+RMV].OKU%Q/r`B=&*#iP>`eG-1uY-qL[VE[5M`5ofeWF,@:9C
%_:EiPN&\(T6T!QR>4+n0*?MKNM"KYa5($36?Sop/gQ0g!06TIfO6PAh8buVueK,:rM_"Pg.dOb1X1lL;-6jPf1KGNk*O9HNnOKh\
%Z$[;Cg_4pWc^cZ5XR4&CN`&j!_HlH&=rQf=!Goc$F>`/+dUNDXUDbiU-&7U%G9o,,Or4G)i))7>O2O;/i>i,(4Ue)k@dKEtju=m_
%R\m[?E"\qH]Wbt]2LI6f2*:NA0LLV44-u\uAaNc(hdqf4FdBP.*ls)E;KGDS?]/,!$0]a*.j3#/];#JpIWXGUmuM^A59?j*atb&Z
%*MhNCY5PW.mjI_$h<@hJ)4Tnc<LM:L/lFcW?(i_84muX@b+6.EUdd;A7D3[ekaUu%@X1"A%:3DD0,H^O#-D6a5r4!dr%ZdD2>5)l
%CSX\j?bb(C5@jOcM0k_?d:-T*fG!/=R(dtRq]SLKcoUN$5<,^P3?DaO>\A,6eH$H+`&l&KBm9?<8(I<Peq^Rr^]FPRcg=TFCk^A_
%`>VCf5:S7ip'=kJ'77N5q=p(S->]0UFi*hY>:=BUm$Ngd0frrlYH6D/X6???ZroXObH=us1$-@ASK6*L9r6Z3S'0Q'1:ra9O'#'9
%[&Z_-^7EZSor7;[S]GSaL9e^_)o!61]eIKTAR;_+q9b=5l9O"]:i"si2j?ZSO);#F3dQg5>:n4R[5G;5[RnSB>;!K.iosSFCo_tG
%^FlQa%p`t@2?)lragZpb]6shu*c-PpX3U69RBU2-?.V(Ii]b`bpXd(XW8^-CSI"CJ,lSi4H4q12gL52KO-@&jWI"-(G8LSk4o_XN
%r][4d^E\\ZU3eths(8L0mB'dSN(iWAVhbg59^I*\bo(B^P2ldrQ1j\Y5-^+)(,d<N6fD32R"8El#E$kI`2K*UZgb#fge6"7gBt.;
%02cb#gQqlO4S_P"c7)A$&X+GK0<M/2FGKuU@R0<]hBAAfUU=.-D%Bd?LTF^0Na43uDRSYLV[D8AR6W?D"V;'$'7i1d_<Ag'p$fq7
%j!:;c;2(='!\j.%Y?F(9VLSpBg/EIg,,2k#p^HtpC,VMWO!W:#$.W.0M'bpKSrifRk2G,SWUp?hbNX'c%kj8H;^sE??/N>E]h;_W
%R+kkkoC*Y9]<7n%M9L,Xd!T_XBVUd4IJg&:=mb12:@<ESOjU$cg5^Kk<^G/ic/&AG:FSL*]ZR2UD%PAgL3:&]hAYDoDIPcpE_km=
%PZDuIf[74`mYE?AqkA):9CJ5tG-INID;HVW$qbH&Tsr)]2`eEcZZ9]Hg\4K>ls"dkp>++CWPE3O3j]4rhtFb1rk!?/*]s8^ZGbVS
%*So+C,BIslAT2^8<GG=AO1k-gVK/!93PW;0*F0u["l[p$kj/@pBU(Zbb+2,`^DeH$]jG8a&#upJ@foI#kEJq[9"==?m/Le6F#&dd
%Sah5lC>$uj7O&+2Q^E.>oP7(iB[D!\a`'P@V'L+n8oGD;kZrdRW1]P6OW?T$T^]SVpc\+F0hfqF6)0)H*E.7`TBtjJk>+h6"KKu+
%d5)C;,aL@sZh[IaD=<fY_o%l_ZcYj=>[94L2p<S=%#o#U_V<$W7sW&Hbp$ISqr:1EAYgn=hV:1^XD\`@2ali_IoE*1UJ8G23#`r6
%q/:3FI'g0AUWmQBDGD_==lI'/fm%(,pBF(X*bXM]!S4[O\'+l6mYFAWaJ1h(>KLUHraCk.g`r,)K?<+JAp7mn]@5DREsfNBoPlE0
%YPZ@(-?@g$^MQ]7F4S%re_S@41[d_SGF!R0&Wfo[:YPt`/QHn1_h-Xbkk5rfpo:d3:^kRjWFLS]Dm,kD_72EbH_[oVFOkXPgG],R
%q>X.#A!'`&1Q-[nU%`.do1h[E5/Si"PT!.2g@lG!qgL[SYH:CopDD&B%&`YC_m+WF+]->A8+r#W:0('$\%-%Tqr/009PH^\SMoo5
%9O^V4%_nSbg1[3U&VX!ioFC/b7L`@$BRB?XTa%1qs4u-h)uf`UFB![LQZmi!(UYlUqe?M[[[lqg02t9M"k<pB(l)I-fmTBQSRqsW
%B[+q4M-)?5_Cf?(>hF4Va_(0t/n;1qVTPGbQ'qAPd.,<I]t,ial9[+uei2mbHS.:t3YDg5b)%\HSn$:(\\qK.U,qg207<2bP.)AH
%?MJ*UR[IW\!$:?5s2\abq&J,_WD*3L9DXg>l]3]eq=!<c48.HI4a/rf9nn"5Qu[sfa_"G_I5LO*]CJain2E>8lQiBn81t!er:fQ<
%C:Yjtkbc9kT[0]'1@NbY\*?R0h5/Q]S\!\TFPY\nh4&NBHZ\(JFQFOSoG4`H/\UT/8*87cm]C")''u@Sgk!sLO5D88?"uO3?GB(3
%-RPAohSm\cd`48*?J=JNY4""*1+GJ`%Ao]Cq^LOCPorLCp:V0JC9$\\FXRkpZP/EZkoe/F5es>$og8?+\eR5:fnkGL],*NM%5Ku2
%O_O)3ARrrJC+0=b8;h*1g%F0jV.-V(.kXUoC@<SdC\GAKq:+<RlhUA9D"'_C%:ZE3C:QsXn;c&bI?r`&W<C@,Ob*a\21a^=+b@Z2
%Vu,7U\0:\IoAal#ptK2`R\0S1KNn9,-eYG5-/HGHp"I,iU\:<lgD54H&`q^Q[FMTs)lGdPpg3W@kKKOdlqX_h$P.2?P'9=#SQA&9
%3VO/SSSUGOB7#]I2n!Xd1DY+N:]?d7PCG?75!<#pB[qY[a"bHJ4/"ha)nDcci67ecK,3qjOH\+<oL%R,)=Y;5F+)&9![Y4;Eerl^
%J5dBeaqVpi0d$p$^-ZTAc[D8S0pl:=m?)$E:%U9idmQtF?":9OpDE(hc"UqmGgAG`lhApn4CBPQQ+,'ul^-AfHFI./Gl#q!TDVJ+
%5C.cET>_Clq"c)IcBbNe!^QV(r]^)prqb78c^o(#(ARb;n*0D(K:cK=@%\$_+9"<.Xl70qp^MY,*s[:Br2BSS:\3*OIi],Lq@/sQ
%b,;kt(]<5f_sMXH\bY=*S#bqgX4:[-](enDs2FXjrO?+'D&7!U0j1+9QCIPpgRKT$F8b`[fH#R^9f9K1WI!C_4*^2*X52cu3l37^
%=<F4'ippillNC*V^mJif_0IuS>g0X7s)eLts*PA-nDgj:TW68N%c$pGr5Io<rX!L&!*KpI=T5u!0O=+4]@2gZQE(K\XZ*G_G=\r<
%k5VpV44dnj^DLn70/f0TgBK5"QKs/2o6PJc4^ET@](ict%;BsNlR'S&fDCp[>]E8TXoku?=D[04bs?KcIg*Rn/8j0sg#X&srTg]?
%IhEAXrbATP#L*tt#VEXQcfNhtT:g@8J>!qs+>W7D0HV+S%j)<$8YJF[VVR>aB*U^?rq:NF](e77)i"P-:;!8ga^t;FHFZ+R5]#<U
%cc,-d[(0A46*J[JT;_N3^f:@p+<#`u/D^ndl!:hQm`N6#cG=O,4l7eDHY4sQB.bT8Fa(Qi$43fjQg9(1hO!PV\_`\=ICUgETm8l9
%03@o0JheTt?g`C<Ekfo'/h`R_ok8L@[:XB:VWd7?]\<rc:p*T,6]F&e,`(0u[*.:YAFX@oa"d"K]2P9rNI?Bpn))ScL%h-T2?_&X
%,2g0i:M=dANGHfLRuTf)b#sYeG]q_k%h"-,No9K[(Q6bCeU76&9f.C\gF2?RS)ntjXG_)q%HYiCEd4$A;%sX7*9GX4V6aMq!i(H0
%s)T$9,W%4So;+b_*Aue%nG8'DIJnILpa(m>c`=s?R[(tNVl-$7B)D1l+86"L^QB[2:c*^7g:j2O/mb0q42;\4X]fl0%CeeP:B.oX
%X;C1TnWohuCJ94"JE+oNE]<Fg@#4<_g#(HG\I[qbmo$"f#gKWRRp\T'he*/ViC\XNEqaUggagA4Rg=7X3SY`gg22MYI(S0^4C@Hl
%>+UU*VuZP3^*nu-`XE.dS8SLaI3r'p0Z5OsV"`'Z`;)<!36^i"_2oY1*.M=35C>'%f_0"V4(,bW6&C;`F''KI#'qCB&u(Z@D*@=F
%8_lnIBtue:X4$(=G^!O\*+-[\_?/ea<D7s0F1Wp!dGiVap%m_HD"D;$qblj%Q-\ogmD[,jC@gC,X,$/f#8Jcc4plZuqn6XceNBqO
%b^Q1nK2;nj@9P-1nbA3H_o7l18PfWrQs&>%d!e5h/>u8N[h*%XnOP=G_Bc?lGWhF'd<@n0k-q=M#mlXCe4Bll%r*iQ\@b1sldN(Q
%6pDd0h#3Q60>/pGg(OE<//<1q)rcJOlL$RK#?;$'4`-"iYlYA-q&HA"KArU8TuNu#R4L!E<qFeZq-q&7I=;d4#3m\@pSG]Y'%[YH
%6TUIp"NDX&PrW+e4Xd%>1R11c5L.mH`Tm,*[5dOdYo&2u;02GRq#7iRI'5kgY;uK74j^1P5:A;"[.XAV;`S@CL@P-\qAme1L[OZ%
%?O+P5FEN1UVJi4kK4:'TXimA<UJ:""6k9)IOaVH(T^cf&q)'FJ%<+7lDr9JTN62RklfIsAA4-^/p&/p=l4?Wm/H-;^(l>.r?Z=cg
%3DKHK\bb:V0"qX.2(0AB^"o49YL6[IE?1(qk'i#GE5$H3c45bt+0p;mq:gSAY?EJ`YT?Sih]+7rrF**=0BPQ#qRWXbKYcp;ebR`Q
%\R7Y%[gl$Aq,;3^F`t4K/O(6[C:g-P;G_>c\[P\[]D8m&e_'05q<+Cfb0IX0dQ;iMcXDGW-t$T2L[D/r))VgplJKVQ$-R$Bddmc[
%2;10b)]`,uP[2c\>=NCK)UtL/kERH(/]P&\-q-ZloT^g8Y7fqRW*EO+T"P505H&7-?]/rCeBa7<1aq>0f:pW\"I4_QKopWk32Ann
%8mj2jA1^DU7+Kn`I'9q+6+K(*/]pG]76(f,OEhf$)4%p!d^fj%2=@ac-15PG^:f'_.MIC@(#28*KZ-\Vb(QEgUX.A5Cu6<hGM<5E
%![I-.M;\B:6t"-pms$-F4Kd^^8k-N[iCTBfffTQITuS2A(YC0W`uj^cLBU4u\=\Terq:NJfrRZZ<J1$a.@!^*o*`<jp:XNTpHQ`O
%ZT9-g'i_iLqiOfIO_lKA4eX`^)\cWTF'3k#f#tH?aYb(O1]b_+T^^CQ[9g"a8\):^DYAgim\a.pat*ibXA*\kHY]aMC;!TY^JZX3
%UEghY()0s?^JqfmjWujc!skn`j/-r!?]KX6V1'?tNd<SjOcApn80h"i$49;tSW+]3Yuf]!q.B(].fgZ;eZmsh*lPf=d3-`mHSg9Q
%^VK=-o,%10&/(46M<umTpL<]C[21P@T'b(i4K1<A,@bV8T[`',*[qg:4T0h/qo)unT[_T_cl_D$;RP&c=NkuQ%ao7*5$P[,Y*WQC
%n@\Q=[UAR%LXGe%Y/&olrI)?#Zcg0jJM#*J2h_CrU"s`faEVcTZ+8XCeF&G!3&RAA\-hMdo=$a#.l>g;nrSQU'1=G8/Tf8Lm9RPH
%T-!9o!(_[6G447!B5!s$m<7J35l9\%_I1)`mQR3qG$t]erAin&p>p'P%k]+uE4ubup2P>U0Z5Oslmo(BF;H^X[fOBTSdu3`j9R'b
%n"7>erom7%F6NKj];6*H0)o+V?EWF_hhHj?mqGR&$^CN%5MiG$U-TQZVXgU5J2-ouDkI%e^i[g#'")3R3/N(jNq3(;mrsuem9_(0
%Fi^`3q<j.YoJte^#u$u_m;p#9-,pm?9XFtl53Mf[Tt+a[GHuVrrp"Oo%$09HJ9nu3pWFDDc\p=goB.bK[Yr-$(LZ4@0;&<3+#^l]
%>&IB!h(RO%fe8i^I(_HIHB0)TQ#OXi;`t"?,l$fEC[5@+g3[\Mf@G:c^";refB@I_D6eif?14A-3TooOg.[D>4K"B'Xb-uVHLl#F
%])O>-YIY\g=p,"kSb?Jiqh"83)*8`[+m,I7@ifg<"'h'kn,-qt*\<)uSR+Ale7mjkR5`?47fR_>-BWbll=LruD_[r9]t,e!:ln[(
%?AGPEDch4Y6\;HN^l8ebf,'?Dn--7Kbc$R?22lC2&95ob!_="dl=3;3bc$R?oeE49+#E1l7UI($5%\nD@n%J$f$uW#"QQ]ZZ*-tH
%$7#7e.3;Dq>P9+_r9HgLU\GmaN=7gAs1/3"Y=mY!/DqGqhZmQ`^fXE"V`F]:J2[l\J_qF[I(,+Y4eOCh%o9P;$;nRQ]K^3VBM#F3
%mU"2*H^3-0'*A7WdrLs$#Vjra+#6[s.4@"?a?q;+8nB&ha@'.rE82TM@DQp,+VPA_3<mGB\'U-Y.f3]jA$?/eY8dW[B`/62@DL6^
%_"<mbNulLO9L7t)LN`OB5#r(==4s4[</!':1M@iNktCtp"2R#S_1p%#d+i<,ISd?EQM^;]]RPFA#e>,V,MR#?%MSru`E@.*pV8:'
%c47Qm338HNid;\!ln^[hL#K5l\[cKYdt&OWQ8@@0S;4X1TdLWE\a0(fj8<`bB7K482tK+X%kS>k1Gk#kpWsgtl&_S&4g]QD3V=Fs
%&J>LBH>$a'd!KH>LXpfc]n^cH&+-UZHQ$Nm6Ghqn:%<X6",-qIM[oT)H.HQ5U5FO(6tT^0k2W2Z^>0mj1b<=aZl>mr:#[!Uj`(&U
%`r1^']Xcb1]36f;HOl/#cR*rtB+s+fR%ANnbJe;0pg7)f*W%[!Lo9mXhep^M='(sr[F(?(>_ck!kl=4M8*o8p)bt:+F%#jlPJ/;)
%rLlg[-$OiPdando[NCt1?(EfoN;^Ta5(K-sg\L)O^3[LrL:(aE%=:K^rA5pPAm[7*Mie^TePVf`*ObXkq$Wjr:E<&Y_`Cf9T6MBT
%bM@2_qXMgNeH)]Cju)fA$+A"S)tANt&^/Y-arT1oiZ/MTKI%Q_eoA"rpjLf"g4c'6>)E7>PD=,Ja\fG!/QB<N#I_sd&!Y3aIA$6+
%!kXZ*YWE!0rUUa8Ul^,;.rQSWT^G-C74mD\\+!\WW1ce<hFd`aXjk7"04>SB**)VD('qsI]L60/Em'W4^nA5Dac!LFhsNR[VYB5!
%Dsf^VjrS($-T$bKY5Gi'[ThX[3u8T5]fXiXF1jZe]5tYIf=Q)I4$^J@fBUWb(%L_J\bk@2oqsNl$h*6Zm#SfYX9rfYg'#obNg0mm
%FmG*R@'(%5G4,ZbX@*::Ydoe>Je8+`$&838I#Q`nZT1QuiCg<=hTm%)T^#?\*#^BqHN%u@\$`q?lJgDkrqpXk5Q0W/!FOPcbYOS;
%cT_XMPnp<9bXM7L\G<i(s7"\+aO"eV/+d3o\2P/_QZOq$3&mp"B"uE?hoYXe?7>_gi[g9>]qtO-QOr8f9HkK(%=0aM=F4+Q<;^2/
%F6Rj1A5F67]Qr*pRf@#GIao`LT*?#:[aRFa\6mT<#k5g7I5i@b7;6l\Y.!f^Vi00)o+#(o:qTl#Gp>eokT=`oUmhi%QB4@I9YLuW
%ZWFV)$OX2^`9U7%`/8hdSO_T<qt"<*a$/#9Iq*9^[Cf&;2s9VUS-t0?H>B[mjpnu#@D5J2JQm4,eIF@a2#Z`LZX.`.KRsglc0=[!
%n:"Pec.Vh\dDHFP5<R=7-q&LRp&,0PJ%(TV]K/0NQ2,;)qDnn6&>OHY&d%[lEqf*O&_Jg.qt#&^lmk<iFs)G@$-p!\_`h!T:h(4&
%gON_i7d<h%+`2eh0Y`AH6ddL*#G`>,"Qrn#(p(F.lc+J:fl=SX//XDrNFD)Gj)ed50H?i,qf`M+G'AAuV2`M.`Vj/3J?=aAae@O,
%<Vn"g^@^FAl3O#7b7g+[J$XcT*pgG=@AO+AViuLgMo.^erCdCk^X&V2_<l]FMt6K*TX]J<r)]9,jY_`)6-8U+>SEu4C(&G96okV?
%5pWT"2gZhrBFSK2()%5EOH34$XBXilK7g,1#cp68j*n>\MkIs%[pYq,6#,GS%S'2T%E_U1nr/F'5tQU%%[hQ,8OEUa\`?ImkCDE@
%l%?@LO3JZ!/XlPD]*E"Cq][2^:#3:?$)*6e>FX)]=>.M(V*Rh5'fR\Vg!839n%[BZR'Wjdl)T=P\Pr-:2h)X0$>^6Ed5:mN/O5L.
%JdSJYVLE#Y7j@i<-aMZdlm*Z@K:kK@249GM1(0/eid39$^9IS30@9[(jYj%pJ"SFYG9-P<./O+@Zr!1RG$>?,g`k:(55H2F6_^M(
%a+c$tm^+&*(^Wne4C#!T6Ad.[^Aq_(Ueg!ShGnXH>ED/RiqW6jARPU[bP*+_#0lPlKCmL7k3U!/*gWhn?\0PqR$SpY)?(CADl;nW
%q_BG.QJn[LcSt0V!#lr3nl2cQ(*AiXs-(KaSmRk)kel#EceiS?SGlk(hTXRnIXM&A)@Z/j^]&WYkisn3B^c'VR6iQCs-hs_;tTad
%chQ,l"2Fe1\G#)N%=TDsqnJoB);P(l=-"Fdc&8kiag*<8'Nl<EjA@Wk2j^;</DtPGSeP%f&,;lV2-qe.i.">Mne7:$1#F'g4ZMR#
%ogtaO8qtS'm]0,__&)-q3)7r=BC;:^A3-LOa[oCo(cn!\FAaG'cCiBVaun-0!oBh_[Mh?\\Lur_0VMC03F7bBni3Jd(!2:^9>6_R
%-&u0i0X%!Y>F]B'Zb`$sc_H[TU<>O8=CG9:SA7&d[nKS\]L_:]4t4rc^aeqRT!,JaW5o^K-B3'f5b01">g`r9St>"W.fCQVg&'_7
%Bhmm;Tgt=Vl5*k`Zs;+2H+oT\<+GuO&hAP6Y=D#)'?HE8VZBmk>ft#Bk*8BJ`ngtuR3d5D94SAJVB/Utj?tA`i'l`>Fc9b:J9H0f
%496GK'QR<8]VNhu"u'^1+O=JQ&iKG+g_lD?f/O&;8/<X\0EoND>(X#0AdDs5&eT?3:=98o'*<f;1NPc5.?Y+`#@QS[`G&Q_J]9,J
%!5n!1;@Ns:G_rBoU5fUIJrV);-o=_U(''OeRN'[.MQ$0uk7`&oV+nA!"e^p4!A5]f/f/YmATBM`P?`jemF6[WdN[erOcD6VLJ15I
%Q3&a2(P//M==Sp487G_[1'04B3\>lA2"<pN!@D2Zm]9Ea#M`7C$s@UK7`paQSJ4C;5['VK"pCJQb!7?h8Ke2s8WkcskX&u>!0@M.
%$IFlt!AlSa?N`-LMilu3.#kkGUkq^2s)[+"=^_q4F>;1B&PH+9#!Dk`EHDi4cnd^S+oi^hT]1Xj@0'pGree"E+/EAB=XrYe93DDG
%]G+#8'_nU`P:]`$%(AYn2)mq(W$;jmPZS2(5S=Z-M27)VOorr9%^S^X/csUS.30S!lT%/G&42Nf4kja,E@5!a:ZBTj6(&N,05_3H
%<FuX0.edVRJo)JN=+qLmGc"$mBj"?06?U3c,42`U[%^E`6#2J'!0jEa/HJWq]TT.;.Op>o3`@cj%PtMM8-@``1$]#QnjGGjd8A1^
%'C.&$g-s&f$s@+P/)7$:?:R-Y![JRZPGa6cLD7Z=#qLNq'q2NtBdFu0T"#o;"jVhPVlh/3<LF0DQ6e+m%Y2T2bVK7-26mRr9-1Dh
%6[h`tNl,4X.+?tO#6;Lm@`DI[E'7d;A=fY!#qD)aM\,RZ-nWjW83SZM#WYHMS43]*o9/bK.RTA+.%:5__#^c7c50DEWYqHl!K8NE
%\2fIZHpj-pHnC3ZZPfc^/HQm=.4Q5?:aHRD=AIf.Ur_7F6H1Jj#_D(W4Ar#<=Tq();6_h]`Cq.9.#CH&6.:X&:m(*4M,rVgfcWUD
%8rHe@d%qMBQ_dOs,mY<!4&SgK/n`D=Bu2BTMBO09KOrXndh0\KAd,tHRM#s>O/iH[6M@XjV,F&KM\q,c\Qs6p/.FDZ7<cYg=;4M6
%W'[X%&T]@8)^E/?qT+U.9&j#qJ"]ie(DE&\E`'1r=pZrgZ"ZIV1)^Oc(m?.PBogh4,\2fX`,[S-ljUZde;VBMVSMmL0FfX4b(L%`
%RB86K2OV:1kg2X1Oo^[f7%5ts1!-5j$jpcW%U(aXfIU-p&C&%6Pnh_+c6Hn^(tept(4mB*9/?RN8QITaEb,];3#.=-f^qG_!i?bJ
%^f43EV?#b!Al?""=Wi9T.sa1tGnk:M;'L6^=_^n9r07k)^blEo(;rn@1+g.D0HKKM,SoADaVn<r"Ucr@H$'dq/ni(#.VobeM(oFl
%[`46@'<)X/3_IZVo)/OhaTu.FP&rd/"!Jp,.#PBN[jT$9+Ni+2&je3%/$a%=8hQOJ1e\WX,YQ6/aopZpBl2TMbJ^j6F_p35FC^[F
%op1O:.R5B0\VS1eL5Ua?YI.!H7?W>JNb+nH.#L\TFHjaV_T':oU+0%m'4ZA(<OoEBXDsPBs.MfV[@#AbdP=iT;%dLcPsJ%hXG&pb
%V2cMS%-`e"T-T;R6_lLr7s(PlE(EY\+dj@),t3NPPd(ur&33FVi5UT='pi&QglSD0fQe>IW+@?>L3-^PJSf4iSC\cPY_[>;:\H![
%p"5(.^dQ&&0i!m6k+J-9cuM[q\5$F@`qiS%U7<-!\e)?ta@-^UChu-INBVkfA%i4LP7\-MG7p[s9-"nT,j$^OoN:`qF<Y1!Z"2qs
%1lD<8e9R:a=OJULE\W&C`fS$2o)Q;_H0.X@dXp:#c3haW9$DiGbD\GXdg`3g;H6[94H2bp\Wp6A/63J?DjE1F#%;;hX\bJL@P(#V
%XZIO.=B01iLk1I`LAiu**ZFo<5b;2TVF9<?$[)lA;nu'pVR4u85_P.mJeu7\bJY\n5?$,\NKg@)iuCe"9M@bR5oD$p8U5lV80Ei^
%akNGBgKc]%oAo9L:XL=NDY!p)UXAT'o]lA)B'0O#T"N%8c<EAqWpb1MOHehGlnB%YXTL?Xcl@u1[3@P))n=K87O0-gXK7Ao5pVVV
%Y!l$%N+JQA^COcSf!B<t#1]KfRO[\[JO1YoJO2:MROQgEd2(HFVt-(KC;d!J^^t(s)cYPD3&N6,_R!!HQ$:2g2#(I@RV&:]6#.-.
%cQ:92@ePSnL]i!74LE2`=Xh=.fJ`hd04sJu<+c&'MH:Be'<KbT($c=jYE%8%!o#pcKHUT];(`Yb</<KuO+:7Bff7(HfRo_Aj/R`+
%R72sWh\66'7@^t%EoSHT3!J)Io/JHD,.%H3lWMAVOl2H#>mS6WqFk8Y@3dKXeJ]Y;e@lU^M$[ZgoL$PaR@%q^R[=+T)2Y>\TG(_4
%3ECefN8S**LL!e(_TRj=J8l99L*'=Rk].@]0g;RoNN\n1nHBb>]tdsb!(OQ:Y!XgB<h'l#XFc:FTH'p_%*HLDF'^KC:t/BGQ86ug
%`"QMqPeS@eH9*NSFAhKE`[P7"HdC-1."!;YUkiSY@Ucp9-8*r5@dKqQJX%hkK3=Y!gfA6,,L(jf/d)EH-p<F(=s%mq14il49S0d:
%1(.=H-$IblHkR&Oino;FVI8c$d@`4%RE$FSP<56F=a"8KXiQHt`$I\)(_$o6ME.P-+:=Z2@krQA@[jY`!LiB4+.%U%IN8:OT,7o2
%UM)@:3\ceqCm)(m".$NdFCNoAD*56o0kQhU.jJ^,&a\g32L#HAkIL-B&>98gIZtZOWAU@.3&MN*-S$ns=aHA9HIR=&QUjFGk"R;r
%"lUC>'0d_r'JI%jV)Ma?KcKJCEaCFfU.]"CeBflbgB#.;,%a.%)2AlX'T![[\S,(RBV_%!+qqr,)!7Jk/k1#M=U-%?W&73Q$tcg=
%!UV/@P'NL$bR>F?$rDr.#e=!Mm4?Vh6%VtbQjnJ2K8PTu7M85Ri(r"N!CUUeMUre%F#C3fkUD1PGUO[?=[Q0jm-!MW9RaO_/@Z?D
%)RTRGc.pr6[+\[B;@VtSTi!+e'RWrDapO#ePpb,kibK=Q&mk+>K'1/-/Oo1kY?h<^&X=+tjt^t[q"075fZ#VP\O[<SNq$O+b-"TV
%r#dSR[lh'i<67^gqF+Ru$\2JPUTe9)$KM(RVJ94MXMCe[i@8Ro$%lZ)i\$'G7Qf>Pk'8D&gQd[\HL,du.$`N1,KeZE"!bQSMX'c"
%Mj?^V6rW>SW*JQ?(uT`Q$k0<IdCdJ#`M_rk!l<g;Q<!jMM\ZT9?EQ)?*lW[58k4`ei\"9_aB]&C(qrN!<MU7>0B4J68*'+\a+N>>
%>@pc&i>=)6];PbVldsN4b7.ZeM8;SpKX6MAb=.?`dKFN*h\<C2Bm!*n9qH:F;QcLVSNeNK;e]95-X\R<+E*QFq`:C_6(8]NAI\RR
%P$hh_LS:g@`oU1]\OF6Z>+*AW"s'tr?nPX)QuP$Zg:?:+\Nd*DO_.ukOQum?RMuDRUJa:_3WZs*Z,9L_r<tsJBQ_Zt)qmL0:K]^3
%]S1Sp)@c%SEufph\4S*KL_hME#\kRDYR0/.Ohm>.gQ\#0-l7CH++CPeEt\e4gWD?.k";dcZ.`^3"IpBW8(&+dS)`-3npeYm7KdB:
%g6!_6K1@4om(P#+R;EQcPK;=B8g%f*\2<&O!ld9.9YI:GN;u;&Na`*oE?R%LVCW@[80ir(lCQ&<8X_BBF0MF0bueq:.F26-TeL3'
%*;qOa!oR')=c#Ju^]Xj.,;L1r2_Fi/9JOI4s-XYVW]kJ5*7rupSDmlW1M5>X1FBkj*%LXgoScGR(k[D*=ZC6s':N$Xk*Y!NH%:D[
%b$:1h#UYUQ2aYeECC]OI*5+[[RWJ5!SL'Cs8)n_U2u3XpfH&dRmP\iFZ2TmhDU&^@V(-#<-jmil7N#ia;G,OpE+!>p6;Udh@95)4
%)8UppDN4u'#31k$'Or9&:nJGRT_XJ5:Rc_]UJc'$-uG+OAJ(Dj'IS]NKT,3uEk#3cD?TMQ3=:A82$8u?>UVpql^VTGg5H[#BOqV1
%V'6'/dMEZTQr=`l#KG)t/9-]h//AV^W"R?,>YrG-,^G2Qfm,iFPa!AqHm[Ep?7er/AHbW)f)+&[2FLhTam4d29p.'q*3\nnEJIn,
%H'B"#*Ea=]n7OCU=7H.l'p2pigtCiG@PHMB?%*dk5$uW#/@L0IgU"lma$UpYps\b\[9A%;l?qjmB!YY=1ruE-`GRA6c$)DN3&m$L
%^pL-Up]A7tR1[`tc07_Zm7TkMbq':?>:FX1fA4c^jNi@&?LL(](71((rUg,m2h/!p0.I##pLNfCI^Ro.2c.onq>#Ulmp7Zn03/J8
%BlCQ9X+j"\hP?$g#!.D"d=Jf0PNNbFPmFQPo>;u$3F=@]]*2!qjh(BMIe`Xfk]OGj&oRccpsHkUK1MqhnFEpqhB2a=mqQp9qL\Kt
%d;".,LO9GPI"JaVi:>>-csHnI>=fEBqk*;o/R%;F(^#X-k<@:j_ET4YbodM_J%CQpp,_^3/^T"@B?dd:;TB@aA]id873+)d_S9d9
%s&l,/bUMOdS;9G(H.[HTn!.+O.*&<QKET,To_lgNZbhp,.NNX?@T,=ZW9R>s2^CCm1.Df#b_ba;.[-jfPfARlM,+/A0[0bgZ?#tT
%Z!)#DFH>A!@^Kq"($=W&Wcj;G!8WgdjQ%r\c)Q(g;Wng1RWtr-Q!sD(MtWN#&kc>2i)mT0g`^2(b-BG0T3ip3*f:<&nd:X]"qW=6
%`k:=.&Wc_^N!cWpW4];4c!Yrs8J]S(P+%KI>CTsTY2s)M;u$e_S"D:Xg1W#a,RA[@CW\Rmac,aq1.poE>)n!<3-0aBe>iaf-K<ZQ
%bX7\G'A&p,^,Jo7/2qk0qtp<VPFYO,#.50R6p!O2c$")`gq$Ti<#.gl0`?TQ0h[lN\`!/C3=Lj$00EHEWQGZ]P%AedYp1P,)dZ<W
%L<fT1?DncCg29lCIdCe0#a%oRlCTs&9UX*s\(k.&SSu-o?E>\UEJ60N!L00tan/kTQ[^X>J#qqBPVQ6,As.nN$tmdK/_4T5<!A2N
%=_qYUm'#K.m<nk@;%jZgNA=rQO[dltWSM_o>VOGA[uT<R<B]ZA^C<Ti3.^Ntdc^e5W6r[7/_es;@[MB3O[c-Bs#-OaK3.ZNja;2i
%i7<7f=cPEW(PprN_jG>uSZdJ__19`%3u!tcDQi]g"5WRnVtn/[\<Ak02quTrnoVSa]Y7Ru@>b?pB_3*1,e"`aU*SWQa/k<k`=WKU
%+'oGL^No?s3_1u81&f5N`D$(88ZD4l52t\FfgaNo\sZk!%#gg9/_Dnq\BCH0O2.Ig\(W0cR^XGGNjdBhGlDit\[qQQrI/6noU#1*
%7plMYr6$/e`m:;B#CHnaICB&a/tU:R(I&r^Ejs](?`\NhBD2q:*TSIB(dKY0e)_a]F5$fT_cmSacZ'ihs4feOcb3U*qtcNge+U`F
%8+pB940F&C,2iD4V*+5mRI18'4A4UII5Z?KEK9pYW9;Cjfk(/u/=Z%;LNC$f?%6%Z2AZaFh-QMe"91C=??ALDZ,-#%gu62`@Xmi%
%'Y']<D`[Ngq<@>)a(HSF-C`Jbo>Q#7RIB8T:&)h8i)monp#(M<c0WR,+9)!jl$d<8forn#G*P49>@+eBN++*=Z`Gm@o>PTr"q]S/
%/?[g@II/RLc*p>.oAoT(n@#s42NogAo!S"mDsq*B7IT,3LnFXJ%B,mPk86]TT(rS+I08,:'?Aigbk?hl@t"1Ho]gJ+3WJ4!B$_oD
%YMB]bKpK].d^D:1dEeFG_?gp&))d]bb256XlLD4^GQ:or:=qR_\9CU"/:@63"lBT(4tph!ZJ(iJYrK8T)`k,\lb`s@Hm9aC&7;"e
%DB_$VkGR_bX.eMCrL_tJRpN7`V[lFc&k%+J%@o`q0Q;0+3'>Zc^hjQA;#763HkdPMZqJDk-`oLVS)XEA9OWS[f&q4\3h<qcT]NgR
%,t,i05qEK/\fJclo>]461(P![mpq^gI.&sTYXP09hX=ceQQH^0J41Yi[+U*:@hXm,F>kVXLSDBK<bpM3(gb"20&^^39^k(?XW5Qo
%]6Bb?p2"]*DquANK<7$$%X.fdWL.RohmrF('!+1OgGeZbE3QB-LP)/T20F)K?]F9R_[b"5^R/s0KpqMLjk8R4q&_CjA69q#?Hb&<
%>PRjgC?68Wi"cJ.K%TD.eaDF32g@3pgb#tXs%q%XX2X14FlhEnB9es8?X/%BFA%6IPX#82)8L7pg"F@8U^k:i[CiSJ4.fmZ@GoLE
%7MkYPcP7;r2Afcf2KjB^b6YSM0ocJ,<u?-e",=86n`csjkmgbVh0_)XQgiN;>.J9e[9G67Mns<$f</W8bM@@5a.`T3XnV'pGl_]A
%+dTlnp-&HX&)D92?!K"jT,*((VoA?2,G!s,jjD>3qkJ--s/l@0]?c+BMbf8]?;XmkA?QfMs-iC'S'u#>e+j?ab=h-I0)'1#Gl2%J
%gSE9Ls83<1aRIUN1K`,Tbna7<c$9bIHG8'45EC5M?Z-no#0Sm_;3'6cUGiDHl>gY0i$Xo&=mW:Ns!#"ABCjGoVH,5o1aZq&QNQ#q
%`6%-MY<I;'$!HJOml5^'(+_<mhG@e^rO3(5a1^@smpC=!ha2P^kXRSZ\$_F/\;9AZdrA@d'G#ZK=7Lq]i+C54R])FE9_8<Yj-'TV
%$Te#87WN69)XA&r4.'!3SjZ"J_?BL&k5IJkr$\6@HK)eI9Q6I&*qj$_EECBE`c.]`R$K&e+F."uLaNH/[!$i(j>HA5i&TFS@1IIP
%Y)e.QNoOE-a,SjC!-<DZ\-D'*pB68.-FOhFSQ;=IHY5)EWH!BMQB='r21JYgC+af\P]<-_4n\=-E8Ocijr1s\*96aDGjm)2Nosl9
%pgi'KNmL9u,[Tu8nk9k,<4#;*,>(S$ernVq2\P+i+kT`T9(U#X2h\+h4t4Z7iJVq'%j=DcIQbRR`E](:@[KX/Qg,61L=N5:N+MHh
%#uAlC1'!a*M>Ik4Ju43j+_cHDlh48KHr6o&0;`jP&RLBQOoS+<KX]4*W8R86kT\Suk_p(1'utE;baZ>NA#@G60@hMho>JC_^Dj<p
%D0eA.Vl-O_fWk!+:X#&Ja\tB*7%RBCS1j/$3Wa8"R#^B(EJk?5`7%ePVMdHP@@!LlQNn$TU;-#XOZ@$$:7/m-[TJ?5c7>=A(0_NQ
%'AUrI=#Z!C)+@E`4=D3b7+X3L;>Q4X"q/t$*GBN/b`MPd'700S1[.HN"Q6$_Zi]K$I6Ptl4#rmXeHR:P.8Ta"jo!$Uc$$g+Tu?tM
%3WFcsc8Cn20.u0-[.c2hA,t0ZEUtPa_40d#TKcc,*^BN$!KcV`@K~>
%AI9_PrivateDataEnd

cleartomark
countdictstack exch sub { end } repeat
restore grestore
%
% End Imported PIC File: router.eps
%%EndDocument
%
/Helvetica-Bold ff 150.00 scf sf
3225 2775 m
gs 1 -1 sc  90.0 rot (TCP traffic) col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
3560 4024 m
gs 1 -1 sc (management) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
3560 3842 m
gs 1 -1 sc (remote) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
3560 3660 m
gs 1 -1 sc (XML/RPC) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 90.00 scf sf
7052 3797 m
gs 1 -1 sc (. . .) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 90.00 scf sf
7052 2803 m
gs 1 -1 sc (. . .) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 150.00 scf sf
7050 2520 m
gs 1 -1 sc (testbed) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 135.00 scf sf
4805 3954 m
gs 1 -1 sc (support functions) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
7.500 slw
 [15 45] 45 sd
n 6375 3750 m
 5550 2850 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 6225 3975 m
 5550 4125 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 5550 3225 m
 6300 3825 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 6225 3900 m
 5550 3750 l gs col0 s gr  [] 0 sd
/Helvetica-Bold ff 180.00 scf sf
3075 3225 m
gs 1 -1 sc (thread/session manager) col0 sh gr
% Polyline
n 2730 1350 m 2625 1350 2625 4395 105 arcto 4 {pop} repeat
  2625 4500 5520 4500 105 arcto 4 {pop} repeat
  5625 4500 5625 1455 105 arcto 4 {pop} repeat
  5625 1350 2730 1350 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
15.000 slw
gs  clippath
3015 3780 m 3015 3720 l 2848 3720 l 2968 3750 l 2848 3780 l cp
eoclip
n 1950 3000 m 1950 3750 l
 3000 3750 l gs col0 s gr gr

% arrowhead
n 2848 3780 m 2968 3750 l 2848 3720 l 2848 3780 l  cp gs 0.00 setgray ef gr  col0 s
/Helvetica-Bold ff 180.00 scf sf
4125 4425 m
gs 1 -1 sc (harpoon software architecture) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 210.00 scf sf
4548 2175 m
gs 1 -1 sc (. . .) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
% 
% here starts figure with depth 45
/Helvetica-Bold ff 180.00 scf sf
1927 2700 m
gs 1 -1 sc (self) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica-Bold ff 180.00 scf sf
1927 2925 m
gs 1 -1 sc (configuration) dup sw pop 2 div neg 0 rm  col0 sh gr
% here ends figure;
$F2psEnd
rs
showpage
