%!PS-Adobe-2.0 EPSF-2.0
%%Title: harpoon_terms.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Wed May 12 16:12:35 2004
%%For: jes@coredump.cs.wisc.edu (joel sommers)
%%BoundingBox: 0 0 422 163
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.555 0.555 0.555 srgb} bind def

end
save
newpath 0 163 moveto 0 0 lineto 422 0 lineto 422 163 lineto closepath clip newpath
-42.4 207.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<00030003000c000c0030003000c000c0030003000c000c00
	30003000c000c00000030003000c000c0030003000c000c0
	030003000c000c0030003000c000c000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P2 exch def

% crosshatch30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<033003300c0c0c0c30033003c000c000300330030c0c0c0c
	0330033000c000c0033003300c0c0c0c30033003c000c000
	300330030c0c0c0c0330033000c000c0>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P3 exch def

% left45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004010002008001004000802000401000200
	8001004000802000401080200040100020080010
	0400080200040100020080010040008020004010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P4 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Helvetica-BoldOblique /Helvetica-BoldOblique-iso isovec ReEncode
/Helvetica /Helvetica-iso isovec ReEncode
/Helvetica-Bold /Helvetica-Bold-iso isovec ReEncode
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 80
% Polyline
7.500 slw
n 5700 1875 m 7725 1875 l 7725 2400 l 5700 2400 l
 cp gs 0.85 setgray ef gr gs col0 s gr 
% Polyline
n 5775 1125 m 7650 1125 l 7650 1667 l 5775 1667 l
 cp gs 0.85 setgray ef gr gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 70
% Polyline
7.500 slw
 [45] 0 sd
n 3150 1350 m
 2775 2100 l gs col0 s gr  [] 0 sd
/Helvetica-iso ff 120.00 scf sf
5931 1440 m
gs 1 -1 sc (is modulated to achieve ) col0 sh gr
/Helvetica-iso ff 120.00 scf sf
5931 1275 m
gs 1 -1 sc (number of active sessions) col0 sh gr
/Helvetica-iso ff 120.00 scf sf
5775 2025 m
gs 1 -1 sc (source and destination addresses) col0 sh gr
/Helvetica-iso ff 120.00 scf sf
5775 2190 m
gs 1 -1 sc (are assigned to active sessions to) col0 sh gr
/Helvetica-iso ff 120.00 scf sf
5775 2355 m
gs 1 -1 sc (obtain desired spatial distribution) col0 sh gr
% Polyline
n 2775 2100 m 4800 2100 l 4800 2850 l 2775 2850 l
 cp gs col7 0.90 shd ef gr gs col0 s gr 
/Helvetica-iso ff 120.00 scf sf
5931 1605 m
gs 1 -1 sc (desired volumes) col0 sh gr
% Polyline
 [45] 0 sd
n 4425 1350 m
 4800 2100 l gs col0 s gr  [] 0 sd
% here ends figure;
% 
% here starts figure with depth 65
% Polyline
7.500 slw
n 3344 750 m 4650 750 l 4650 1189 l 3344 1189 l
 cp gs col7 0.75 shd ef gr gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 62
% Polyline
7.500 slw
n 3247 838 m 4553 838 l 4553 1275 l 3247 1275 l
 cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 3199 882 m 4505 882 l 4505 1319 l 3199 1319 l
 cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 3150 924 m 4456 924 l 4456 1363 l 3150 1363 l
 cp gs col7 0.75 shd ef gr gs col0 s gr 
% here ends figure;
% 
% here starts figure with depth 55
% Polyline
2 slc
7.500 slw
 [45] 0 sd
n 2925 2100 m
 2925 3000 l gs col0 s gr  [] 0 sd
% Polyline
0 slc
 [60] 0 sd
n 4050 2100 m
 4050 3000 l gs col0 s gr  [] 0 sd
% Polyline
 [60] 0 sd
n 3150 2100 m
 3150 3000 l gs col0 s gr  [] 0 sd
% here ends figure;
% 
% here starts figure with depth 52
% Polyline
7.500 slw
n 4575 2250 m 4650 2250 l 4650 2700 l 4575 2700 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 305.00 150.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4050 2175 m 4275 2175 l 4275 2625 l 4050 2625 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 270.00 145.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 3150 2175 m 3525 2175 l 3525 2625 l 3150 2625 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 210.00 145.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 3600 2250 m 3750 2250 l 3750 2700 l 3600 2700 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 240.00 150.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 3975 2250 m 4350 2250 l 4350 2700 l 3975 2700 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 265.00 150.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 2925 2250 m 3375 2250 l 3375 2700 l 2925 2700 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P3 [16 0 0 -8 195.00 150.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
 [15 45] 45 sd
n 4725 1275 m
 5775 1350 l gs col0 s gr  [] 0 sd
/Helvetica-iso ff 120.00 scf sf
2400 2700 m
gs 1 -1 sc (<IP source, IP dest, protocol,) dup sw pop neg 0 rm  col0 sh gr
/Helvetica-iso ff 120.00 scf sf
2400 2550 m
gs 1 -1 sc (to canonical five-tuple flows:) dup sw pop neg 0 rm  col0 sh gr
/Helvetica-iso ff 120.00 scf sf
2400 2400 m
gs 1 -1 sc (connections are analogous) dup sw pop neg 0 rm  col0 sh gr
% Polyline
n 2925 2925 m
 4575 2925 l gs col0 s gr 
% Polyline
gs  clippath
3000 2891 m 2973 2945 l 3107 3012 l 3014 2932 l 3134 2958 l cp
eoclip
n 3750 3300 m
 3000 2925 l gs col0 s gr gr

% arrowhead
n 3134 2958 m 3014 2932 l 3107 3012 l 3134 2958 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
3385 2893 m 3343 2935 l 3449 3042 l 3386 2936 l 3492 2999 l cp
eoclip
n 3750 3300 m
 3375 2925 l gs col0 s gr gr

% arrowhead
n 3492 2999 m 3386 2936 l 3449 3042 l 3492 2999 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
3857 2916 m 3798 2904 l 3769 3052 l 3822 2941 l 3827 3064 l cp
eoclip
n 3750 3300 m
 3825 2925 l gs col0 s gr gr

% arrowhead
n 3827 3064 m 3822 2941 l 3769 3052 l 3827 3064 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
4082 2932 m 4035 2894 l 3941 3012 l 4040 2938 l 3988 3050 l cp
eoclip
n 3750 3300 m
 4050 2925 l gs col0 s gr gr

% arrowhead
n 3988 3050 m 4040 2938 l 3941 3012 l 3988 3050 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
4378 2942 m 4346 2891 l 4218 2972 l 4336 2934 l 4250 3023 l cp
eoclip
n 3750 3300 m
 4350 2925 l gs col0 s gr gr

% arrowhead
n 4250 3023 m 4336 2934 l 4218 2972 l 4250 3023 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
 [15 45] 45 sd
n 5700 2175 m
 3825 1500 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 3600 1275 m 3600 1500 l 4125 1500 l
 4125 1275 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 4650 1200 m 4725 1200 l 4575 1425 l
 4500 1425 l gs col0 s gr  [] 0 sd
% Polyline
n 3440 1012 m 3683 1012 l 3683 1231 l 3440 1231 l
 cp gs 0.95 setgray ef gr gs col0 s gr 
/Helvetica-iso ff 120.00 scf sf
2400 1125 m
gs 1 -1 sc (sessions are analogous to) dup sw pop neg 0 rm  col0 sh gr
/Helvetica-iso ff 120.00 scf sf
2400 1275 m
gs 1 -1 sc (canonical three-tuples:) dup sw pop neg 0 rm  col0 sh gr
/Helvetica-iso ff 120.00 scf sf
2400 1425 m
gs 1 -1 sc (<IP source, IP dest, protocol>) dup sw pop neg 0 rm  col0 sh gr
% Polyline
 [60] 0 sd
n 3600 2100 m
 3600 3000 l gs col0 s gr  [] 0 sd
% Polyline
 [60] 0 sd
n 3975 2100 m
 3975 3000 l gs col0 s gr  [] 0 sd
% Polyline
 [60] 0 sd
n 4575 2100 m
 4575 3000 l gs col0 s gr  [] 0 sd
/Helvetica-Bold-iso ff 150.00 scf sf
3000 3450 m
gs 1 -1 sc (inter-connection times) col0 sh gr
/Helvetica-Bold-iso ff 120.00 scf sf
4566 861 m
gs 1 -1 sc  45.0 rot (...) col0 sh gr
/Helvetica-BoldOblique-iso ff 120.00 scf sf
4875 2850 m
gs 1 -1 sc (individual files) col0 sh gr
% Polyline
n 4021 1012 m 4264 1012 l 4264 1231 l 4021 1231 l
 cp gs 0.95 setgray ef gr gs col0 s gr 
/Helvetica-iso ff 120.00 scf sf
2400 2850 m
gs 1 -1 sc (source port, dest port>) dup sw pop neg 0 rm  col0 sh gr
/Helvetica-BoldOblique-iso ff 120.00 scf sf
4875 2700 m
gs 1 -1 sc (blocks represent) col0 sh gr
% Polyline
15.000 slw
gs  clippath
4043 1130 m 4043 1083 l 3919 1083 l 4012 1107 l 3919 1130 l cp
3657 1083 m 3657 1130 l 3781 1130 l 3688 1107 l 3781 1083 l cp
eoclip
n 3672 1107 m
 4028 1107 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3781 1083 m 3688 1107 l 3781 1130 l 3781 1083 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 3919 1130 m 4012 1107 l 3919 1083 l 3919 1130 l  cp gs 0.00 setgray ef gr  col0 s
/Helvetica-Bold-iso ff 180.00 scf sf
3500 1189 m
gs 1 -1 sc (A) col0 sh gr
/Helvetica-Bold-iso ff 180.00 scf sf
4081 1189 m
gs 1 -1 sc (B) col0 sh gr
/Helvetica-BoldOblique-iso ff 180.00 scf sf
1275 900 m
gs 1 -1 sc (session level) col0 sh gr
/Helvetica-BoldOblique-iso ff 180.00 scf sf
975 2175 m
gs 1 -1 sc (connection level) col0 sh gr
% here ends figure;
$F2psEnd
rs
end
showpage
